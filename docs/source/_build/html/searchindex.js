Search.setIndex({"alltitles": {"1. Introduction": [[11, "introduction"]], "10. Working with Subtrees": [[11, "working-with-subtrees"]], "11. Expression Trees and Evaluation": [[11, "expression-trees-and-evaluation"]], "12. Conclusion": [[11, "conclusion"]], "2. Installation": [[11, "installation"]], "3. Core Concepts": [[11, "core-concepts"]], "4. FlatForest: A Flexible Tree Structure": [[11, "flatforest-a-flexible-tree-structure"]], "5. TreeNode: A Simple Recursive Tree Structure": [[11, "treenode-a-simple-recursive-tree-structure"]], "6. Tree Traversal and Manipulation": [[11, "tree-traversal-and-manipulation"]], "7. Tree Visualization": [[11, "tree-visualization"]], "8. Tree Conversion": [[11, "tree-conversion"]], "9. Advanced Features": [[11, "advanced-features"]], "Adding a Child Node": [[2, "adding-a-child-node"]], "AlgoTree": [[5, "algotree"]], "AlgoTree package": [[0, "algotree-package"]], "AlgoTree.flat_forest module": [[0, "module-AlgoTree.flat_forest"]], "AlgoTree.flat_forest_node module": [[0, "module-AlgoTree.flat_forest_node"]], "AlgoTree.node_hash module": [[0, "module-AlgoTree.node_hash"]], "AlgoTree.pretty_tree module": [[0, "module-AlgoTree.pretty_tree"]], "AlgoTree.tree_converter module": [[0, "module-AlgoTree.tree_converter"]], "AlgoTree.treenode module": [[0, "module-AlgoTree.treenode"]], "AlgoTree.treenode_api module": [[0, "module-AlgoTree.treenode_api"]], "AlgoTree.utils module": [[0, "module-AlgoTree.utils"]], "AlgoTree: Comprehensive Tutorial": [[11, "algotree-comprehensive-tutorial"]], "Attributes and Methods": [[10, "attributes-and-methods"]], "Conclusion": [[2, "conclusion"]], "Contents:": [[3, null]], "Converting to TreeNode": [[2, "converting-to-treenode"]], "Cycle Detection": [[2, "cycle-detection"]], "Detaching and Purging Nodes": [[2, "detaching-and-purging-nodes"]], "Example Usage": [[10, "example-usage"]], "Features": [[4, "features"]], "FlatForest": [[2, "flatforest"]], "FlatForest Class": [[2, "flatforest-class"]], "FlatForestNode Proxies": [[2, "flatforestnode-proxies"]], "Getting Started": [[4, "getting-started"]], "Handling Errors": [[2, "handling-errors"]], "Indices and tables": [[3, "indices-and-tables"]], "Initialization": [[10, "initialization"]], "Initializing a FlatTree": [[2, "initializing-a-flattree"]], "Introduction": [[4, "introduction"]], "Invalid Parent Reference": [[2, "invalid-parent-reference"]], "Manipulating the Tree": [[2, "manipulating-the-tree"]], "Methods": [[10, "methods"]], "Module contents": [[0, "module-AlgoTree"], [9, "module-test"]], "Node Hash Functions": [[0, "node-hash-functions"]], "Node Hashing": [[11, "node-hashing"]], "Node-Centric API": [[4, "node-centric-api"], [11, "node-centric-api"]], "Philosophical Perspective - The Ship of Theseus": [[0, "philosophical-perspective-the-ship-of-theseus"]], "Properties": [[10, "properties"]], "Proxy Objects and Views": [[2, "proxy-objects-and-views"]], "Purging Detached Nodes": [[2, "purging-detached-nodes"]], "Root Node": [[2, "root-node"]], "Submodules": [[0, "submodules"], [9, "submodules"]], "Table of Contents": [[11, "table-of-contents"]], "Text Visualization": [[2, "text-visualization"]], "Theoretical Background": [[2, "theoretical-background"]], "Tree API": [[10, "tree-api"]], "Tree Conversions": [[2, "tree-conversions"]], "Tree Data Format": [[2, "tree-data-format"]], "Tree Node Concept": [[11, "tree-node-concept"]], "TreeNode": [[10, "treenode"]], "TreeNode Structure": [[10, "treenode-structure"]], "Validating the Tree": [[2, "validating-the-tree"]], "Viewing Sub-Trees": [[2, "viewing-sub-trees"]], "Visualizing the Tree": [[2, "visualizing-the-tree"]], "Welcome to AlgoTree\u2019s documentation!": [[3, "welcome-to-algotree-s-documentation"]], "conf module": [[1, "conf-module"]], "setup module": [[8, "setup-module"]], "test package": [[9, "test-package"]], "test.test_algos module": [[9, "test-test-algos-module"]], "test.test_algos_treenode module": [[9, "test-test-algos-treenode-module"]], "test.test_flatnode_hash module": [[9, "test-test-flatnode-hash-module"]], "test.test_flattree module": [[9, "test-test-flattree-module"]], "test.test_flattree_additional module": [[9, "test-test-flattree-additional-module"]], "test.test_flattree_node module": [[9, "test-test-flattree-node-module"]], "test.test_flattree_node_api module": [[9, "test-test-flattree-node-api-module"]], "test.test_flattree_utils module": [[9, "test-test-flattree-utils-module"]], "test.test_flattreenode_eq module": [[9, "test-test-flattreenode-eq-module"]], "test.test_misc module": [[9, "module-test.test_misc"]], "test.test_nb module": [[9, "test-test-nb-module"]], "test.test_node_hash module": [[9, "test-test-node-hash-module"]], "test.test_tree_converter module": [[9, "test-test-tree-converter-module"]], "test.test_tree_print module": [[9, "module-test.test_tree_print"]], "test.test_tree_with_flattreenode module": [[9, "test-test-tree-with-flattreenode-module"]], "test.test_treenode module": [[9, "module-test.test_treenode"]], "test.test_treenode_utils module": [[9, "module-test.test_treenode_utils"]]}, "docnames": ["AlgoTree", "conf", "flat_forest", "index", "introduction", "modules", "notebooks/expr_trees_nb", "notebooks/flat_forest_nb", "setup", "test", "treenode", "tutorial"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["AlgoTree.rst", "conf.rst", "flat_forest.rst", "index.rst", "introduction.rst", "modules.rst", "notebooks/expr_trees_nb.ipynb", "notebooks/flat_forest_nb.ipynb", "setup.rst", "test.rst", "treenode.rst", "tutorial.rst"], "indexentries": {"add_child() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.add_child", false]], "add_child() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.add_child", false]], "add_child() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.add_child", false]], "algotree": [[0, "module-AlgoTree", false]], "algotree.flat_forest": [[0, "module-AlgoTree.flat_forest", false]], "algotree.flat_forest_node": [[0, "module-AlgoTree.flat_forest_node", false]], "algotree.node_hash": [[0, "module-AlgoTree.node_hash", false]], "algotree.pretty_tree": [[0, "module-AlgoTree.pretty_tree", false]], "algotree.tree_converter": [[0, "module-AlgoTree.tree_converter", false]], "algotree.treenode": [[0, "module-AlgoTree.treenode", false]], "algotree.treenode_api": [[0, "module-AlgoTree.treenode_api", false]], "algotree.utils": [[0, "module-AlgoTree.utils", false]], "ancestors() (in module algotree.utils)": [[0, "AlgoTree.utils.ancestors", false]], "as_tree() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.as_tree", false]], "breadth_first() (in module algotree.utils)": [[0, "AlgoTree.utils.breadth_first", false]], "breadth_first_undirected() (in module algotree.utils)": [[0, "AlgoTree.utils.breadth_first_undirected", false]], "check() (algotree.treenode_api.treenodeapi static method)": [[0, "AlgoTree.treenode_api.TreeNodeApi.check", false]], "check_valid() (algotree.flat_forest.flatforest static method)": [[0, "AlgoTree.flat_forest.FlatForest.check_valid", false]], "child_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.child_names", false]], "children (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.children", false]], "children (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.children", false]], "clone() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.clone", false]], "clone() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.clone", false]], "contains() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.contains", false]], "contains() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.contains", false]], "convert() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.convert", false]], "copy_under() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.copy_under", false]], "default_extract() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.default_extract", false]], "default_node_name() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.default_node_name", false]], "default_style (algotree.pretty_tree.prettytree attribute)": [[0, "AlgoTree.pretty_tree.PrettyTree.default_style", false]], "depth() (in module algotree.utils)": [[0, "AlgoTree.utils.depth", false]], "descendants() (in module algotree.utils)": [[0, "AlgoTree.utils.descendants", false]], "detach() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.detach", false]], "detach() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.detach", false]], "detached (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.detached", false]], "detached_key (algotree.flat_forest.flatforest attribute)": [[0, "AlgoTree.flat_forest.FlatForest.DETACHED_KEY", false]], "distance() (in module algotree.utils)": [[0, "AlgoTree.utils.distance", false]], "find_node() (in module algotree.utils)": [[0, "AlgoTree.utils.find_node", false]], "find_nodes() (in module algotree.utils)": [[0, "AlgoTree.utils.find_nodes", false]], "find_path() (in module algotree.utils)": [[0, "AlgoTree.utils.find_path", false]], "flatforest (class in algotree.flat_forest)": [[0, "AlgoTree.flat_forest.FlatForest", false]], "flatforestnode (class in algotree.flat_forest_node)": [[0, "AlgoTree.flat_forest_node.FlatForestNode", false]], "forest (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.forest", false]], "from_dict() (algotree.treenode.treenode static method)": [[0, "AlgoTree.treenode.TreeNode.from_dict", false]], "height() (in module algotree.utils)": [[0, "AlgoTree.utils.height", false]], "interior_node_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.interior_node_names", false]], "is_ancestor() (in module algotree.utils)": [[0, "AlgoTree.utils.is_ancestor", false]], "is_descendant() (in module algotree.utils)": [[0, "AlgoTree.utils.is_descendant", false]], "is_internal() (in module algotree.utils)": [[0, "AlgoTree.utils.is_internal", false]], "is_isomorphic() (in module algotree.utils)": [[0, "AlgoTree.utils.is_isomorphic", false]], "is_leaf() (in module algotree.utils)": [[0, "AlgoTree.utils.is_leaf", false]], "is_root() (in module algotree.utils)": [[0, "AlgoTree.utils.is_root", false]], "is_sibling() (in module algotree.utils)": [[0, "AlgoTree.utils.is_sibling", false]], "is_valid() (algotree.flat_forest.flatforest static method)": [[0, "AlgoTree.flat_forest.FlatForest.is_valid", false]], "is_valid() (algotree.treenode.treenode static method)": [[0, "AlgoTree.treenode.TreeNode.is_valid", false]], "is_valid() (algotree.treenode_api.treenodeapi static method)": [[0, "AlgoTree.treenode_api.TreeNodeApi.is_valid", false]], "lca() (in module algotree.utils)": [[0, "AlgoTree.utils.lca", false]], "leaves() (in module algotree.utils)": [[0, "AlgoTree.utils.leaves", false]], "logical_root_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.logical_root_names", false]], "map() (in module algotree.utils)": [[0, "AlgoTree.utils.map", false]], "mark() (algotree.pretty_tree.prettytree static method)": [[0, "AlgoTree.pretty_tree.PrettyTree.mark", false]], "missing() (algotree.treenode_api.treenodeapi static method)": [[0, "AlgoTree.treenode_api.TreeNodeApi.missing", false]], "module": [[0, "module-AlgoTree", false], [0, "module-AlgoTree.flat_forest", false], [0, "module-AlgoTree.flat_forest_node", false], [0, "module-AlgoTree.node_hash", false], [0, "module-AlgoTree.pretty_tree", false], [0, "module-AlgoTree.tree_converter", false], [0, "module-AlgoTree.treenode", false], [0, "module-AlgoTree.treenode_api", false], [0, "module-AlgoTree.utils", false], [9, "module-test", false], [9, "module-test.test_misc", false], [9, "module-test.test_tree_print", false], [9, "module-test.test_treenode", false], [9, "module-test.test_treenode_utils", false]], "name (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.name", false]], "name (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.name", false]], "name_hash() (algotree.node_hash.nodehash static method)": [[0, "AlgoTree.node_hash.NodeHash.name_hash", false]], "node() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.node", false]], "node() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.node", false]], "node() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.node", false]], "node_hash() (algotree.node_hash.nodehash static method)": [[0, "AlgoTree.node_hash.NodeHash.node_hash", false]], "node_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.node_names", false]], "node_stats() (in module algotree.utils)": [[0, "AlgoTree.utils.node_stats", false]], "node_to_leaf_paths() (in module algotree.utils)": [[0, "AlgoTree.utils.node_to_leaf_paths", false]], "nodehash (class in algotree.node_hash)": [[0, "AlgoTree.node_hash.NodeHash", false]], "nodes() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.nodes", false]], "nodes() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.nodes", false]], "parent (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.parent", false]], "parent (algotree.treenode.treenode property)": [[0, "AlgoTree.treenode.TreeNode.parent", false]], "parent() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.parent", false]], "parent_key (algotree.flat_forest.flatforest attribute)": [[0, "AlgoTree.flat_forest.FlatForest.PARENT_KEY", false]], "path() (in module algotree.utils)": [[0, "AlgoTree.utils.path", false]], "path_hash() (algotree.node_hash.nodehash static method)": [[0, "AlgoTree.node_hash.NodeHash.path_hash", false]], "paths_to_tree() (in module algotree.utils)": [[0, "AlgoTree.utils.paths_to_tree", false]], "payload (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.payload", false]], "payload (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.payload", false]], "payload_hash() (algotree.node_hash.nodehash static method)": [[0, "AlgoTree.node_hash.NodeHash.payload_hash", false]], "preferred_root (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.preferred_root", false]], "pretty_tree() (in module algotree.pretty_tree)": [[0, "AlgoTree.pretty_tree.pretty_tree", false]], "prettytree (class in algotree.pretty_tree)": [[0, "AlgoTree.pretty_tree.PrettyTree", false]], "properties (algotree.treenode_api.treenodeapi attribute)": [[0, "AlgoTree.treenode_api.TreeNodeApi.properties", false]], "proxy() (algotree.flat_forest_node.flatforestnode static method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.proxy", false]], "prune() (in module algotree.utils)": [[0, "AlgoTree.utils.prune", false]], "purge() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.purge", false]], "root (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.root", false]], "root (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.root", false]], "root (algotree.treenode.treenode property)": [[0, "AlgoTree.treenode.TreeNode.root", false]], "root (test.test_tree_print.testtreeprettyprinter.node property)": [[9, "test.test_tree_print.TestTreePrettyPrinter.Node.root", false]], "root_key() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.root_key", false]], "root_names (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.root_names", false]], "setup() (test.test_misc.testtreenodeadvanced method)": [[9, "test.test_misc.TestTreeNodeAdvanced.setUp", false]], "setup() (test.test_tree_print.testtreeprettyprinter method)": [[9, "test.test_tree_print.TestTreePrettyPrinter.setUp", false]], "setup() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.setUp", false]], "siblings() (in module algotree.utils)": [[0, "AlgoTree.utils.siblings", false]], "size() (in module algotree.utils)": [[0, "AlgoTree.utils.size", false]], "spec() (algotree.flat_forest.flatforest static method)": [[0, "AlgoTree.flat_forest.FlatForest.spec", false]], "subtree() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.subtree", false]], "subtree() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.subtree", false]], "subtree() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.subtree", false]], "subtree_centered_at() (in module algotree.utils)": [[0, "AlgoTree.utils.subtree_centered_at", false]], "subtree_rooted_at() (in module algotree.utils)": [[0, "AlgoTree.utils.subtree_rooted_at", false]], "test": [[9, "module-test", false]], "test.test_misc": [[9, "module-test.test_misc", false]], "test.test_tree_print": [[9, "module-test.test_tree_print", false]], "test.test_treenode": [[9, "module-test.test_treenode", false]], "test.test_treenode_utils": [[9, "module-test.test_treenode_utils", false]], "test_add_child() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_add_child", false]], "test_ancestors_node9() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_ancestors_node9", false]], "test_breadth_first() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_breadth_first", false]], "test_constructor_with_children() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_constructor_with_children", false]], "test_constructor_with_name_and_value() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_constructor_with_name_and_value", false]], "test_custom_payload_and_attributes() (test.test_misc.testtreenodeadvanced method)": [[9, "test.test_misc.TestTreeNodeAdvanced.test_custom_payload_and_attributes", false]], "test_default_pretty_print() (test.test_tree_print.testtreeprettyprinter method)": [[9, "test.test_tree_print.TestTreePrettyPrinter.test_default_pretty_print", false]], "test_depth() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_depth", false]], "test_descendants_node3() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_descendants_node3", false]], "test_edge_cases() (test.test_misc.testtreenodeadvanced method)": [[9, "test.test_misc.TestTreeNodeAdvanced.test_edge_cases", false]], "test_find_node() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_find_node", false]], "test_find_nodes() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_find_nodes", false]], "test_get_node() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_get_node", false]], "test_height() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_height", false]], "test_is_ancestor() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_is_ancestor", false]], "test_is_descendant() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_is_descendant", false]], "test_is_internal() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_is_internal", false]], "test_is_leaf() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_is_leaf", false]], "test_is_root() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_is_root", false]], "test_is_sibling() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_is_sibling", false]], "test_large_tree_performance() (test.test_misc.testtreenodeadvanced method)": [[9, "test.test_misc.TestTreeNodeAdvanced.test_large_tree_performance", false]], "test_leaves() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_leaves", false]], "test_map() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_map", false]], "test_mark_nodes() (test.test_tree_print.testtreeprettyprinter method)": [[9, "test.test_tree_print.TestTreePrettyPrinter.test_mark_nodes", false]], "test_move_subtree() (test.test_misc.testtreenodeadvanced method)": [[9, "test.test_misc.TestTreeNodeAdvanced.test_move_subtree", false]], "test_node_method() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_node_method", false]], "test_repr() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_repr", false]], "test_root() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_root", false]], "test_set_get_children() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_set_get_children", false]], "test_set_get_payload() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_set_get_payload", false]], "test_setitem() (test.test_treenode.testtreenode method)": [[9, "test.test_treenode.TestTreeNode.test_setitem", false]], "test_siblings_node6() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_siblings_node6", false]], "test_visit_level_order() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_visit_level_order", false]], "test_visit_pre_order() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_visit_pre_order", false]], "test_visit_stop_on_match() (test.test_treenode_utils.testtreenodeutils method)": [[9, "test.test_treenode_utils.TestTreeNodeUtils.test_visit_stop_on_match", false]], "testtreenode (class in test.test_treenode)": [[9, "test.test_treenode.TestTreeNode", false]], "testtreenodeadvanced (class in test.test_misc)": [[9, "test.test_misc.TestTreeNodeAdvanced", false]], "testtreenodeutils (class in test.test_treenode_utils)": [[9, "test.test_treenode_utils.TestTreeNodeUtils", false]], "testtreeprettyprinter (class in test.test_tree_print)": [[9, "test.test_tree_print.TestTreePrettyPrinter", false]], "testtreeprettyprinter.node (class in test.test_tree_print)": [[9, "test.test_tree_print.TestTreePrettyPrinter.Node", false]], "to_dict() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.to_dict", false]], "to_dict() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.to_dict", false]], "to_dict() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.to_dict", false]], "to_dict() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.to_dict", false]], "tree_hash() (algotree.node_hash.nodehash static method)": [[0, "AlgoTree.node_hash.NodeHash.tree_hash", false]], "treeconverter (class in algotree.tree_converter)": [[0, "AlgoTree.tree_converter.TreeConverter", false]], "treenode (class in algotree.treenode)": [[0, "AlgoTree.treenode.TreeNode", false]], "treenodeapi (class in algotree.treenode_api)": [[0, "AlgoTree.treenode_api.TreeNodeApi", false]], "trees (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.trees", false]], "visit() (in module algotree.utils)": [[0, "AlgoTree.utils.visit", false]]}, "objects": {"": [[0, 0, 0, "-", "AlgoTree"], [9, 0, 0, "-", "test"]], "AlgoTree": [[0, 0, 0, "-", "flat_forest"], [0, 0, 0, "-", "flat_forest_node"], [0, 0, 0, "-", "node_hash"], [0, 0, 0, "-", "pretty_tree"], [0, 0, 0, "-", "tree_converter"], [0, 0, 0, "-", "treenode"], [0, 0, 0, "-", "treenode_api"], [0, 0, 0, "-", "utils"]], "AlgoTree.flat_forest": [[0, 1, 1, "", "FlatForest"]], "AlgoTree.flat_forest.FlatForest": [[0, 2, 1, "", "DETACHED_KEY"], [0, 2, 1, "", "PARENT_KEY"], [0, 3, 1, "", "add_child"], [0, 3, 1, "", "as_tree"], [0, 3, 1, "", "check_valid"], [0, 3, 1, "", "child_names"], [0, 4, 1, "", "children"], [0, 3, 1, "", "contains"], [0, 3, 1, "", "detach"], [0, 4, 1, "", "detached"], [0, 3, 1, "", "interior_node_names"], [0, 3, 1, "", "is_valid"], [0, 3, 1, "", "logical_root_names"], [0, 4, 1, "", "name"], [0, 3, 1, "", "node"], [0, 3, 1, "", "node_names"], [0, 3, 1, "", "nodes"], [0, 3, 1, "", "parent"], [0, 4, 1, "", "payload"], [0, 4, 1, "", "preferred_root"], [0, 3, 1, "", "purge"], [0, 4, 1, "", "root"], [0, 3, 1, "", "root_key"], [0, 4, 1, "", "root_names"], [0, 3, 1, "", "spec"], [0, 3, 1, "", "subtree"], [0, 3, 1, "", "to_dict"], [0, 4, 1, "", "trees"]], "AlgoTree.flat_forest_node": [[0, 1, 1, "", "FlatForestNode"]], "AlgoTree.flat_forest_node.FlatForestNode": [[0, 3, 1, "", "add_child"], [0, 4, 1, "", "children"], [0, 3, 1, "", "clone"], [0, 3, 1, "", "contains"], [0, 3, 1, "", "detach"], [0, 4, 1, "", "forest"], [0, 4, 1, "", "name"], [0, 3, 1, "", "node"], [0, 4, 1, "", "parent"], [0, 4, 1, "", "payload"], [0, 3, 1, "", "proxy"], [0, 4, 1, "", "root"], [0, 3, 1, "", "subtree"], [0, 3, 1, "", "to_dict"]], "AlgoTree.node_hash": [[0, 1, 1, "", "NodeHash"]], "AlgoTree.node_hash.NodeHash": [[0, 3, 1, "", "name_hash"], [0, 3, 1, "", "node_hash"], [0, 3, 1, "", "path_hash"], [0, 3, 1, "", "payload_hash"], [0, 3, 1, "", "tree_hash"]], "AlgoTree.pretty_tree": [[0, 1, 1, "", "PrettyTree"], [0, 5, 1, "", "pretty_tree"]], "AlgoTree.pretty_tree.PrettyTree": [[0, 2, 1, "", "default_style"], [0, 3, 1, "", "mark"]], "AlgoTree.tree_converter": [[0, 1, 1, "", "TreeConverter"]], "AlgoTree.tree_converter.TreeConverter": [[0, 3, 1, "", "convert"], [0, 3, 1, "", "copy_under"], [0, 3, 1, "", "default_extract"], [0, 3, 1, "", "default_node_name"], [0, 3, 1, "", "to_dict"]], "AlgoTree.treenode": [[0, 1, 1, "", "TreeNode"]], "AlgoTree.treenode.TreeNode": [[0, 3, 1, "", "add_child"], [0, 3, 1, "", "clone"], [0, 3, 1, "", "from_dict"], [0, 3, 1, "", "is_valid"], [0, 3, 1, "", "node"], [0, 3, 1, "", "nodes"], [0, 4, 1, "", "parent"], [0, 4, 1, "", "root"], [0, 3, 1, "", "subtree"], [0, 3, 1, "", "to_dict"]], "AlgoTree.treenode_api": [[0, 1, 1, "", "TreeNodeApi"]], "AlgoTree.treenode_api.TreeNodeApi": [[0, 3, 1, "", "check"], [0, 3, 1, "", "is_valid"], [0, 3, 1, "", "missing"], [0, 2, 1, "", "properties"]], "AlgoTree.utils": [[0, 5, 1, "", "ancestors"], [0, 5, 1, "", "breadth_first"], [0, 5, 1, "", "breadth_first_undirected"], [0, 5, 1, "", "depth"], [0, 5, 1, "", "descendants"], [0, 5, 1, "", "distance"], [0, 5, 1, "", "find_node"], [0, 5, 1, "", "find_nodes"], [0, 5, 1, "", "find_path"], [0, 5, 1, "", "height"], [0, 5, 1, "", "is_ancestor"], [0, 5, 1, "", "is_descendant"], [0, 5, 1, "", "is_internal"], [0, 5, 1, "", "is_isomorphic"], [0, 5, 1, "", "is_leaf"], [0, 5, 1, "", "is_root"], [0, 5, 1, "", "is_sibling"], [0, 5, 1, "", "lca"], [0, 5, 1, "", "leaves"], [0, 5, 1, "", "map"], [0, 5, 1, "", "node_stats"], [0, 5, 1, "", "node_to_leaf_paths"], [0, 5, 1, "", "path"], [0, 5, 1, "", "paths_to_tree"], [0, 5, 1, "", "prune"], [0, 5, 1, "", "siblings"], [0, 5, 1, "", "size"], [0, 5, 1, "", "subtree_centered_at"], [0, 5, 1, "", "subtree_rooted_at"], [0, 5, 1, "", "visit"]], "test": [[9, 0, 0, "-", "test_misc"], [9, 0, 0, "-", "test_tree_print"], [9, 0, 0, "-", "test_treenode"], [9, 0, 0, "-", "test_treenode_utils"]], "test.test_misc": [[9, 1, 1, "", "TestTreeNodeAdvanced"]], "test.test_misc.TestTreeNodeAdvanced": [[9, 3, 1, "", "setUp"], [9, 3, 1, "", "test_custom_payload_and_attributes"], [9, 3, 1, "", "test_edge_cases"], [9, 3, 1, "", "test_large_tree_performance"], [9, 3, 1, "", "test_move_subtree"]], "test.test_tree_print": [[9, 1, 1, "", "TestTreePrettyPrinter"]], "test.test_tree_print.TestTreePrettyPrinter": [[9, 1, 1, "", "Node"], [9, 3, 1, "", "setUp"], [9, 3, 1, "", "test_default_pretty_print"], [9, 3, 1, "", "test_mark_nodes"]], "test.test_tree_print.TestTreePrettyPrinter.Node": [[9, 4, 1, "", "root"]], "test.test_treenode": [[9, 1, 1, "", "TestTreeNode"]], "test.test_treenode.TestTreeNode": [[9, 3, 1, "", "test_add_child"], [9, 3, 1, "", "test_constructor_with_children"], [9, 3, 1, "", "test_constructor_with_name_and_value"], [9, 3, 1, "", "test_node_method"], [9, 3, 1, "", "test_repr"], [9, 3, 1, "", "test_set_get_children"], [9, 3, 1, "", "test_set_get_payload"], [9, 3, 1, "", "test_setitem"]], "test.test_treenode_utils": [[9, 1, 1, "", "TestTreeNodeUtils"]], "test.test_treenode_utils.TestTreeNodeUtils": [[9, 3, 1, "", "setUp"], [9, 3, 1, "", "test_ancestors_node9"], [9, 3, 1, "", "test_breadth_first"], [9, 3, 1, "", "test_depth"], [9, 3, 1, "", "test_descendants_node3"], [9, 3, 1, "", "test_find_node"], [9, 3, 1, "", "test_find_nodes"], [9, 3, 1, "", "test_get_node"], [9, 3, 1, "", "test_height"], [9, 3, 1, "", "test_is_ancestor"], [9, 3, 1, "", "test_is_descendant"], [9, 3, 1, "", "test_is_internal"], [9, 3, 1, "", "test_is_leaf"], [9, 3, 1, "", "test_is_root"], [9, 3, 1, "", "test_is_sibling"], [9, 3, 1, "", "test_leaves"], [9, 3, 1, "", "test_map"], [9, 3, 1, "", "test_root"], [9, 3, 1, "", "test_siblings_node6"], [9, 3, 1, "", "test_visit_level_order"], [9, 3, 1, "", "test_visit_pre_order"], [9, 3, 1, "", "test_visit_stop_on_match"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function"}, "terms": {"": [0, 6, 7, 11], "0": [4, 6, 7, 11], "0a5c451b": 6, "0f0d258b2a25": 6, "0n": [6, 7], "1": [0, 3, 4, 6, 7], "10": [3, 6], "1000": [0, 7], "11": [3, 6], "118": 7, "119": 7, "12": [3, 6, 7], "120": 7, "121": 7, "122": 7, "123": 7, "124": 7, "125": 7, "126": 7, "127": 7, "128": 7, "129": 7, "13": 6, "130": 7, "131": 7, "132": 7, "133": 7, "134": 7, "135": 7, "136": 7, "137": 7, "137b3a08d31": 6, "138": 7, "139": 7, "14": 6, "140": 7, "141": 7, "142": 7, "143": 7, "144": 7, "145": 7, "146": 7, "147": 7, "148": 7, "149": 7, "14e057df": 7, "150": 7, "151": 7, "152": 7, "153": 7, "154": 7, "1549bcb8": 6, "155": 7, "156": 7, "157": 7, "158": 7, "159": 7, "160": 7, "161": 7, "162": 7, "163": 7, "164": 7, "165": 7, "166": 7, "167": 7, "168": 7, "169": 7, "170": 7, "171": 7, "172": 7, "173": 7, "174": 7, "175": 7, "1d223ec4": 6, "1f73": 6, "1n": [6, 7], "2": [2, 3, 4, 6, 7], "200": 7, "2000": 7, "27bc": 7, "2a2e": 6, "2ab5": 6, "2ad7": 6, "2n": 7, "3": [3, 4, 6, 7], "3000": 7, "30a87f4c": 6, "36a9": 7, "3af8": 6, "3e19": 6, "3n": [6, 7], "4": [3, 4, 6, 7], "409a": 6, "41": 7, "41d8adc8": 6, "42": 7, "4217": 6, "4544": 6, "457d": 7, "45eb": 6, "45f0": 7, "45f4": 6, "467f": 6, "474c": 6, "477d": 6, "47c3": 7, "48e9": 6, "4aae": 6, "4bb4": 6, "4dae": 7, "4fef": 6, "4n": 7, "5": [3, 6, 7], "5a8df89c": 6, "5ce307424675": 6, "5da441854dcb": 6, "5f189f2e85f2": 6, "5n": 7, "6": [3, 6], "7": [0, 3, 6, 7], "779cc759": 7, "78baf6c2": 6, "7dc9523b": 6, "7n": 7, "8": [3, 6, 7], "8004": 7, "8424": 6, "8749": 6, "8a24": 6, "9": [3, 6, 7], "90a4": 6, "9415": 7, "945ef525": 7, "9551": 6, "9852": 6, "9aa8123ac2bd": 6, "9b38": 6, "9daf": 6, "9db394571b83": 6, "9n": 7, "A": [0, 2, 3, 4, 6, 7], "And": 7, "As": [0, 4, 6, 7], "At": 6, "For": [0, 2, 6, 7], "If": [0, 4, 6, 7, 10], "In": [0, 2, 4, 6, 7, 11], "It": [0, 2, 4, 6, 7, 10, 11], "No": 0, "Of": 7, "On": 7, "Or": 6, "The": [2, 4, 5, 6, 7, 10, 11], "Then": [0, 4], "These": [0, 2], "To": [0, 4, 6, 11], "With": 2, "_": 6, "_2": 7, "__call__": 6, "__detached__": [0, 7], "__detached__n": 7, "__init__": [0, 6, 10], "__root__": [0, 7], "_eval": 6, "a08e5a3fc4e0": 6, "a1c9": 7, "a2": 7, "a44d": 6, "a499": 7, "a8f1": 6, "ab68": 6, "abilityn": 7, "about": [0, 4, 7], "abstract": [0, 2, 7], "accept": [0, 6, 7], "access": [0, 2, 4, 7, 10, 11], "accessn": 7, "achiev": 0, "across": 11, "act": 2, "ad": [6, 10, 11], "adapt": 2, "add": [0, 6, 7, 10, 11], "add_child": [0, 2, 5, 7, 10, 11], "add_prefix": 7, "addit": [0, 2, 7, 10], "adff": 6, "advanc": [2, 3], "aec46058acda": 6, "afbd": 6, "after": [0, 6, 7], "again": [6, 7], "algebra": 6, "algorithm": [4, 6, 7], "algotre": [2, 4, 6, 7], "all": [0, 2, 4, 6, 7], "alln": 6, "allow": [0, 2, 7, 10, 11], "allowsn": 7, "along": [7, 11], "alreadi": [0, 7], "also": [0, 2, 4, 6, 7, 10], "alson": 7, "altern": 6, "alwai": 0, "among": 0, "an": [0, 2, 4, 6, 7, 10, 11], "ancestor": [0, 4, 5, 7], "andn": [6, 7], "ani": [0, 2, 4, 7, 10, 11], "ann": 6, "anoth": [0, 2, 4, 7, 11], "answer": 0, "any_kei": 0, "any_valu": 0, "api": [0, 2, 3, 7], "append": [6, 7], "appli": 6, "applic": 11, "approach": [0, 4, 11], "approxim": 0, "ar": [0, 2, 4, 6, 7, 11], "arbitrari": 7, "aren": 6, "arg": [0, 10], "argument": [0, 6, 10], "around": 0, "as_tre": [0, 2, 5, 7], "aspect": 0, "assert": 6, "assign": 0, "associ": [0, 4, 11], "assum": [0, 4, 11], "atn": 7, "attempt": 2, "attribut": [0, 2, 3], "attributeerror": 0, "augment": 0, "avail": [0, 4], "avoid": 7, "awai": 0, "awar": 2, "b": [0, 4, 7, 11], "b2": 7, "b2a8": 6, "b4be": 6, "b5449d28ef1": 7, "b5449d28ef1en": 7, "b614": 6, "b6d9": 7, "b7c7235ea4d8": 7, "b7c7235ea4d8n": 7, "b_0": 7, "b_0n": 7, "b_1n": 7, "b_2n": 7, "b_3n": 7, "b_4n": 7, "b_5n": 7, "b_6n": 7, "b_7n": 7, "back": 10, "background": 3, "base": [0, 6, 7, 9, 11], "basic": 2, "becaus": 7, "been": [6, 7], "befor": [6, 9], "behav": 0, "behavior": [0, 2, 4], "being": [0, 7], "belong": [0, 4], "below": 7, "ben": [6, 7], "better": 0, "between": [0, 2, 4, 7, 11], "bit": 7, "bn": 7, "bookkeep": 7, "bool": [0, 11], "both": 0, "bottom": 6, "breadth": [0, 7, 11], "breadth_first": [0, 5, 7, 11], "breadth_first_undirect": [0, 5, 7], "break": 7, "butn": [6, 7], "byn": 7, "c": [0, 4, 6, 7, 11], "c0c917ab03e5": 6, "c2": 7, "c7034d020978": 7, "c7034d020978n": 7, "c833": 6, "c_2n": 7, "cach": 2, "cad1": 6, "call": [0, 6, 7], "callabl": 0, "can": [0, 2, 4, 6, 7, 10, 11], "cannot": [6, 7], "capabl": 2, "care": 7, "carri": 0, "case": [0, 4, 6], "caution": 0, "cell": [6, 7], "cell_typ": [6, 7], "center": 0, "center_c": 7, "centric": [0, 2, 3, 7], "certain": [0, 4], "chage": 0, "chang": [0, 2, 4, 6, 11], "changen": 7, "check": [0, 2, 5, 11], "check_valid": [0, 2, 5, 7], "child": [0, 4, 6, 7, 10, 11], "child1": [0, 7, 10], "child1_1": 10, "child1_1_valu": 10, "child1_2n": 7, "child1_valu": 10, "child2": [0, 7, 10], "child2_1": 10, "child2_1_valu": 10, "child2_2n": 7, "child2_valu": 10, "child2n": 7, "child_connector": 0, "child_nam": [0, 5], "children": [0, 2, 4, 5, 6, 7, 9, 10, 11], "choos": 0, "chose": 7, "class": [0, 3, 6, 7, 9, 10], "clear": 7, "clone": [0, 5, 11], "clone_children": 0, "cloned_a": 11, "closest": 0, "closur": 6, "cn": 7, "code": [0, 2, 4, 6, 7, 10], "codemirror_mod": [6, 7], "collect": 2, "collis": [0, 4], "com": 2, "comesn": 7, "common": [0, 2, 4, 6], "compar": [0, 11], "comparison": 0, "compil": 6, "compilern": 6, "complet": 7, "complex": [2, 6, 11], "compon": 0, "comprehens": 3, "comput": [0, 2, 6], "concept": [0, 3, 4, 7], "conclus": 3, "conclusionn": [6, 7], "condit": [0, 4], "configur": 7, "conflict": 0, "connect": 0, "consid": 0, "consist": [0, 2, 4, 11], "const": [6, 11], "construct": [6, 10], "constructor": 7, "contain": [0, 2, 4, 5, 6, 11], "content": 5, "context": [0, 2, 6, 11], "contextn": 6, "continu": 0, "contrast": 6, "control": 2, "conveni": 6, "convent": 0, "convers": [0, 3, 4, 6, 7], "convert": [0, 4, 5, 6, 7, 11], "copi": [0, 6, 7], "copy_und": [0, 5, 7], "core": [3, 7], "correspond": 0, "cost": 7, "could": [0, 6], "cours": 7, "cover": [2, 11], "creat": [0, 2, 4, 7, 9, 11], "ctx": 6, "current": [0, 4, 11], "cycl": [0, 7], "cycle_tre": [2, 7], "cycle_tree_data": 2, "d": [0, 4, 7, 11], "d2": 7, "d433395a": 7, "d_0n": 7, "d_1n": 7, "d_2n": 7, "data": [0, 3, 4, 6, 7, 10, 11], "databas": 2, "datan": 7, "dde50326": 6, "deal": [0, 4], "debug": 6, "debugn": 6, "decid": [0, 4], "decoupl": 4, "deepcopi": [0, 6, 7], "deepcopyn": [6, 7], "def": [6, 7, 10, 11], "default": [0, 2, 6, 7, 10], "default_extract": [0, 5], "default_node_nam": [0, 5], "default_styl": [0, 5], "defin": [0, 4, 6], "del": 7, "delet": 7, "demonstr": [2, 11], "denot": 0, "depend": 0, "depth": [0, 5, 6, 7], "descend": [0, 4, 5, 7, 11], "desend": 0, "design": [0, 2, 4, 6], "dest": 0, "destin": 0, "detach": [0, 5, 7], "detached_kei": [0, 5, 7], "detail": [0, 2, 7], "detect": 7, "determin": 0, "dict": [0, 2, 4, 6, 7], "dictionari": [0, 2, 4, 6, 7, 10, 11], "differ": [0, 2, 4, 6, 7, 11], "direct": 7, "directli": [0, 2, 6], "disconnect": 7, "discov": 7, "disk": 6, "displai": 7, "display_data": 7, "display_nam": [6, 7], "distanc": [0, 5], "dn": 7, "do": [0, 2, 4, 7], "document": [0, 4], "doe": [0, 4, 7], "doesn": [0, 7], "domain": [2, 11], "don": 7, "down": [0, 4, 6], "due": 0, "dump": [2, 6, 7], "dure": 6, "e": [0, 2, 4, 6, 7, 11], "e021d65aa1d4": 7, "e021d65aa1d4n": 7, "e2": 7, "e_2n": 7, "ea98d53a1c56": 6, "each": [0, 2, 4, 6, 7, 10], "earlier": 6, "easi": 7, "easier": 11, "easili": 4, "eef6aa53bbec": 6, "effect": 0, "effici": [0, 2, 6], "efficientn": 6, "either": 0, "elif": [7, 11], "els": 7, "elsewher": 4, "en": 7, "encapsul": 2, "encount": 6, "ensur": [0, 2, 6], "entir": [0, 11], "entiti": 0, "enumer": 0, "env": [6, 7], "equal": 0, "equival": 0, "error": [6, 7], "error_tre": 7, "essenc": 6, "essenti": [0, 6], "eval": 6, "evalu": [3, 6], "evaluaten": 6, "evaluationn": 6, "evaluatorn": 6, "even": [0, 2, 4, 11], "everi": 6, "exact": 0, "exampl": [0, 2, 3, 4, 6], "examplesn": 7, "except": [0, 2, 4, 6, 7], "execute_result": 7, "execution_count": [6, 7], "exercis": 9, "exist": [0, 2, 4, 7, 11], "expalanatori": 7, "expect": [0, 2, 6], "experi": 0, "explicit": 7, "explor": [4, 6, 7], "expos": [0, 2, 6], "expr": [6, 11], "expr_typ": 6, "express": [3, 6], "extend": [0, 11], "extens": 0, "extract": [0, 6], "extractor": 0, "extrins": 0, "f": [0, 4, 6, 7, 11], "f2": 7, "f4057e80": 6, "f633d8d3": 6, "f_2n": 7, "f_node": 7, "facilit": [0, 2], "fairli": 7, "fals": [0, 6, 7, 11], "falsen": 7, "far": 7, "fast": 6, "fc106112": 6, "featur": [2, 3, 7], "fece": 7, "fewer": 10, "file": [2, 7], "file_extens": [6, 7], "final": 6, "find": [0, 7, 11], "find_nod": [0, 5], "find_path": [0, 5], "first": [0, 2, 6, 7, 11], "fix": 7, "fixtur": 9, "flat": [0, 2, 4, 6, 7, 11], "flat_expr": 6, "flat_forest": [5, 6, 7, 11], "flat_forest_nod": [4, 5, 6, 7, 11], "flat_forest_root": 11, "flatforest": [0, 3, 4, 5, 6, 7], "flatforestn": [6, 7], "flatforestnod": [0, 4, 5, 6, 7, 10, 11], "flatforestnoden": [6, 7], "flatten": 6, "flatter": 6, "flattern": 6, "flattre": 7, "flattreenod": 7, "flexibl": [0, 2, 3, 4, 7], "fn": [6, 7], "focus": [0, 7], "follow": [0, 4, 10, 11], "forest": [0, 2, 4, 5, 6, 7, 11], "forest2": 7, "forest3": 7, "forestn": [6, 7], "form": [6, 10], "format": [3, 7], "formatn": 6, "formn": 6, "forn": 6, "found": [0, 2], "foundat": 11, "from": [0, 2, 4, 6, 7, 11], "from_dict": [0, 5, 6, 7, 10, 11], "full": 7, "func": 0, "function": [2, 4, 5, 6, 7, 11], "fundament": 0, "further": [6, 7], "g": [0, 4, 7], "g2": 7, "g_2n": 7, "gather": 0, "gener": [0, 6, 7, 10], "generaln": 7, "get": [0, 3, 6, 7, 11], "github": 2, "give": 6, "given": [0, 4, 10, 11], "gn": 7, "go": [0, 4, 6, 7], "gone": 7, "good": [0, 6, 7], "graph": 0, "h": 7, "h2": 7, "ha": [0, 2, 4, 6, 7, 10, 11], "had": [0, 4, 6], "handl": [0, 4, 6], "happen": [6, 7], "hash": [4, 5], "hash_fn": 0, "have": [0, 2, 4, 6, 7, 11], "height": [0, 5, 7, 11], "help": 4, "here": [4, 9, 10], "hide": 2, "hierarch": [2, 11], "highlight": [0, 7], "hn": 7, "hook": 9, "hop": 0, "horizont": 0, "how": [0, 4, 6, 11], "howerv": 6, "howev": [0, 4, 7, 10], "http": 2, "human": 6, "i": [0, 2, 4, 6, 7, 9, 10, 11], "i2": 7, "id": 0, "idea": 6, "ident": 0, "identifi": [0, 2, 4, 11], "ignor": 0, "illustr": 7, "immedi": 0, "immut": [0, 4, 7], "immutablen": 7, "implement": [0, 2, 4, 6, 7, 11], "import": [0, 2, 4, 6, 7, 10, 11], "inaccess": [0, 4], "includ": [0, 4, 7], "incomplet": 6, "incur": 7, "indent": [0, 2, 6, 7], "index": 3, "indic": 2, "indirect": 2, "individu": [2, 11], "inf": 0, "inform": [0, 2, 7], "informationn": 6, "instal": [3, 4], "instanc": [0, 4, 6, 7, 10], "instead": [0, 6, 7], "int": 0, "integ": 0, "integr": [0, 4, 7], "interfac": [0, 2, 6, 7, 11], "interior": 0, "interior_node_nam": [0, 5], "intermediari": 2, "intern": 0, "intrins": 0, "introduct": 3, "intuit": [2, 11], "invalid": [0, 4, 7], "invalid_tre": 2, "invok": 0, "ipython": [6, 7], "ipython3": [6, 7], "irrelev": 0, "is_ancestor": [0, 5], "is_descend": [0, 5], "is_intern": [0, 5, 7], "is_isomorph": [0, 5], "is_leaf": [0, 5, 7], "is_root": [0, 5, 7], "is_rootn": 7, "is_sibl": [0, 5], "is_valid": [0, 5], "isn": 6, "isomorph": 0, "item": 7, "iter": [0, 7], "itn": [6, 7], "itrat": 7, "its": [0, 2, 4, 6, 7, 11], "itself": [0, 2, 6, 7], "j": 7, "jn": 7, "json": [0, 2, 6, 7, 10], "jsonn": [6, 7], "just": [0, 4, 6, 7], "k": 7, "k_2n": 7, "keep": 7, "kei": [0, 2, 4, 6, 7, 10, 11], "kernelspec": [6, 7], "keyerror": [0, 2, 4, 6, 7], "keyword": 0, "kind": [0, 6, 7, 10], "kn": 7, "know": 6, "known": 6, "kwarg": [0, 10], "l": 7, "l_2n": 7, "label": 0, "lambda": [0, 6, 7, 11], "languag": [6, 7], "language_info": [6, 7], "larger": [0, 4], "last_child_connector": 0, "lazi": 2, "lca": [0, 5], "leaf": [0, 2, 7], "leafn": 7, "learn": 4, "leav": [0, 4, 5, 7, 11], "leaves_und": 7, "len": [7, 11], "length": [0, 7], "let": [6, 7, 11], "level": [0, 2, 7, 11], "librari": [7, 11], "lightweight": 0, "like": [0, 2, 4, 6, 7, 9, 11], "liken": 7, "list": [0, 4, 10, 11], "ln": 7, "load": [2, 7], "locat": 0, "log": [6, 7], "logic": [0, 7], "logical_root_nam": [0, 5, 7], "long": [2, 4, 7], "longer": 7, "look": [4, 7, 9], "low": 0, "lowest": 0, "m": 7, "m_2n": 7, "mai": [0, 2, 4, 6, 7], "main": [7, 11], "maintain": [2, 7, 11], "make": [0, 7, 11], "mani": [0, 2, 6], "manipul": [0, 3, 4, 7, 10], "map": [0, 5, 6, 7, 10], "mark": [0, 5, 7], "markdown": [6, 7], "markdownn": 7, "marker": 0, "match": 0, "max": [6, 7, 11], "max_hop": 0, "max_lvl": 0, "max_tri": 0, "maximum": 0, "maxn": 6, "mayn": 7, "md": 7, "mean": [0, 4, 11], "meaning": [0, 4], "memori": 0, "merg": 2, "met": [0, 4], "metadata": [6, 7], "method": [0, 2, 3, 4, 7, 9, 11], "methodnam": 9, "might": [0, 6], "mimetyp": [6, 7], "miss": [0, 5, 6], "mn": 7, "model": [0, 4, 7], "modifi": [0, 4, 7, 11], "modifyn": 7, "modul": [3, 5], "monotext": 7, "more": [0, 2, 4, 6, 7], "more_data": 7, "moren": 6, "most": [0, 4], "multipl": [0, 2, 6], "must": [0, 7, 11], "mutabl": 7, "mutablemap": 0, "mutat": 0, "n": [6, 7, 11], "name": [0, 2, 4, 5, 6, 7, 9, 10, 11], "name_hash": [0, 5, 11], "natur": [0, 2], "navig": [4, 11], "nbconvert_export": [6, 7], "nbformat": [6, 7], "nbformat_minor": [6, 7], "necessarili": [0, 4], "need": [0, 2, 6, 10], "neglig": 4, "nest": [0, 2, 7], "network": [2, 6], "new": [0, 2, 4, 7, 11], "new_data": 7, "new_forest": 7, "new_nod": 7, "new_root": 7, "new_tre": [2, 7], "nn": 7, "node": [3, 5, 6, 7, 9, 10], "node0": [2, 9], "node1": [0, 2, 4, 9, 11], "node2": [0, 2, 4, 9, 11], "node3": [2, 4, 9], "node36": 2, "node4": [2, 4, 9], "node5": [2, 9], "node6": 9, "node7": 9, "node8": 9, "node9": 9, "node_detail": [0, 7, 11], "node_hash": [5, 11], "node_info": 7, "node_kei": [0, 2], "node_nam": [0, 5, 6, 7, 11], "node_stat": [0, 5, 7], "node_to_leaf_path": [0, 5, 7], "nodehash": [0, 5, 11], "noden": 7, "nodetyp": [0, 4, 6, 11], "non": [2, 6, 7], "non_existent_par": [2, 7], "non_existent_parent_tre": 7, "none": [0, 4, 6, 7, 9, 10, 11], "nonen": 7, "nor": [0, 4], "normal": [6, 7], "normallyn": 7, "note": [0, 6, 7], "notebook": 7, "noten": 7, "noth": 7, "notic": 7, "notion": 0, "now": [0, 4, 6, 7], "null": 7, "nulln": 7, "number": [0, 6], "o": 7, "object": [0, 4, 7, 9, 10], "occupi": 0, "occur": 0, "offer": [2, 11], "ofn": 6, "often": [0, 7], "onc": [0, 4], "one": [0, 4, 6], "onen": 7, "onli": [0, 4, 6, 7], "onlyn": 7, "onn": 6, "op": [6, 11], "open_ctx": 6, "oper": [0, 2, 4, 6, 7, 11], "optim": 6, "option": [0, 2, 4, 6, 7, 10, 11], "order": [0, 6, 7], "origin": [0, 2, 4, 7, 11], "other": [0, 4, 6, 7, 10], "other2": 10, "other2_valu": 10, "other_new_data": 7, "other_valu": 10, "otherwis": [0, 10], "our": [0, 6, 7], "ourn": 6, "output": [2, 4, 6, 7, 10, 11], "output_typ": [6, 7], "over": [0, 4, 6, 7], "overheadn": 7, "overn": 6, "overridden": 2, "own": 4, "p": 7, "packag": [3, 4, 5, 7], "page": 3, "pair": [2, 6, 7, 10], "par_kei": 7, "param": 6, "paramet": 0, "parent": [0, 4, 5, 6, 7, 10, 11], "parent_kei": [0, 5], "parent_node_kei": 2, "parentn": 6, "pars": 11, "part": [0, 7], "partial": [0, 4], "particular": [0, 2, 7], "particularli": 2, "pass": [0, 6, 7], "path": [0, 5, 7], "path_hash": [0, 5], "paths_to_tre": [0, 5, 7], "pattern": [0, 2], "payload": [0, 2, 4, 5, 6, 7, 9, 10, 11], "payload_connector": 0, "payload_hash": [0, 5], "payloadn": 7, "perform": [0, 4, 6, 11], "permit": 7, "permitn": 6, "permitsn": 6, "perspect": [2, 4, 5, 11], "philosoph": 5, "pip": [4, 11], "place": [0, 7], "plain": 7, "pn": 7, "point": [0, 4], "pointer": [0, 4], "pop": 7, "posit": 0, "possibl": [0, 4], "post": [0, 6], "postord": 6, "potenti": [0, 2], "power": [2, 6, 7, 11], "pprint": 7, "pprintn": 7, "pre": [0, 6, 7], "pred": 0, "predic": [0, 7], "prefer": [0, 6, 7], "preferred_root": [0, 2, 5, 7], "present": [0, 2, 6], "pretti": [0, 4, 7], "pretty_print": 2, "pretty_tre": [2, 5, 6, 7, 11], "pretty_treen": 7, "prettytre": [0, 2, 5, 6, 7], "previousn": 6, "print": [0, 2, 4, 6, 7, 10, 11], "print_nod": [7, 11], "print_tre": 4, "printn": 7, "problem": 6, "proc": 0, "procedur": 0, "process": 6, "produc": 4, "program": 6, "project": 0, "properti": [0, 2, 4, 5, 9, 11], "provid": [0, 2, 4, 6, 7, 10, 11], "proxi": [0, 4, 5, 7], "prune": [0, 2, 5, 7], "pruned_tre": 7, "purg": [0, 5, 7], "purpos": [0, 6, 7], "py": [0, 6, 7], "pygments_lex": [6, 7], "python": [4, 6, 7, 11], "python3": [6, 7], "q": 7, "qn": 7, "queeliu": 2, "question": 0, "quick": 4, "r": 7, "rais": [0, 2, 4, 7], "random": [0, 4], "rang": [4, 7], "rather": 11, "re": [7, 11], "reach": [0, 4], "readabl": [0, 6], "real": 0, "recurs": [3, 4, 6, 7, 10], "recursiven": 7, "refer": [0, 4, 7], "refersn": 7, "reflect": [0, 2, 11], "regener": 7, "rel": 6, "relat": [0, 2, 6, 11], "relationship": [0, 2], "relev": 0, "remain": [0, 4], "rememb": 11, "remov": [0, 2], "replac": [0, 6], "replic": 0, "repositori": 2, "repres": [0, 2, 4, 7, 11], "represent": [0, 2, 4, 6, 7, 10, 11], "representingn": 7, "requir": [0, 7, 11], "require_prop": 0, "respect": 0, "respectivelyn": 6, "restrict": 10, "result": [6, 7, 11], "result2": 7, "resultn": 6, "resultsn": 6, "retriev": [0, 10], "return": [0, 4, 6, 7, 10, 11], "revert": 7, "rewrit": [0, 6], "rewritten": 6, "rid": 6, "right": 7, "rn": 7, "root": [0, 4, 5, 6, 7, 9, 10, 11], "root2": 7, "root_1": 6, "root_1_1": 6, "root_1_1_1": 6, "root_1_1_2": 6, "root_2": 6, "root_2_1": 6, "root_2_1_1": 6, "root_2_1_2": 6, "root_2_2": 6, "root_2_3": 6, "root_dist": 7, "root_kei": [0, 5], "root_map": 7, "root_nam": [0, 2, 5, 7], "root_valu": 10, "rooter": 7, "rootn": 7, "rout": 2, "rule": 6, "run": 6, "runtest": 9, "sae": 7, "sai": 6, "same": [0, 4, 6, 7], "sampl": 9, "satisfi": 0, "scienc": 2, "seamlessli": 2, "search": [0, 3, 4], "second": 0, "see": [0, 6, 7], "seek": 6, "seem": 7, "self": [0, 6, 7, 10], "send": 6, "seper": 7, "serial": 6, "serializ": 7, "set": [0, 2, 4, 6, 7, 9], "setup": 9, "shape": 7, "shiftn": 6, "ship": 5, "should": [0, 4, 6, 11], "should_prun": 7, "show": 0, "sibl": [0, 5, 7], "side": 0, "signatur": 0, "similar": [6, 7], "simpl": [3, 4, 6, 7], "simpler": 6, "simplic": [6, 7], "simplif": 6, "simplifi": 6, "sinc": [0, 2, 4, 7], "sine": 0, "singl": [0, 6, 7], "size": [0, 5, 7], "sn": 7, "so": [0, 4, 6, 7], "sole": 0, "solid": 11, "some": [0, 2, 4, 7], "somen": 7, "someth": 7, "soon": 0, "sort_kei": 7, "sourc": [0, 6, 7, 9], "spacer": 0, "spec": [0, 5], "special": [0, 2, 6, 7], "specializedn": 7, "specialn": 7, "specif": [0, 4], "specifi": [0, 4, 7, 10], "specifyingn": 7, "src_node": 0, "standalon": 6, "standard": 0, "start": [0, 3], "state": [0, 6, 7], "static": 0, "staticmethod": 0, "statist": 0, "stdout": [6, 7], "stiill": 7, "still": [0, 4, 6, 7], "stop": 0, "storag": 7, "store": [0, 7, 10], "str": [0, 4, 10, 11], "stream": [6, 7], "strength": 4, "string": [0, 7], "structur": [0, 2, 3, 4, 6, 7], "structuren": [6, 7], "style": 0, "sub": [0, 4, 6], "submodul": 5, "substructur": 0, "subtre": [0, 3, 4, 5, 7], "subtree_a": 11, "subtree_b": 11, "subtree_centered_at": [0, 5, 7], "subtree_info": 7, "subtree_rooted_at": [0, 5, 7], "suffix": 0, "suit": [4, 11], "sum": [6, 11], "support": [4, 7], "supportsn": 7, "suppos": [0, 4, 6], "system": [2, 6], "systemn": 6, "t": [0, 4, 7], "take": [0, 6], "target": [0, 7], "target_typ": [0, 2, 6], "task": [2, 6], "tc": 2, "technic": 0, "term": [0, 6], "terminologi": 2, "test": 7, "test_add_child": 9, "test_ancestors_node9": 9, "test_breadth_first": 9, "test_constructor_with_children": 9, "test_constructor_with_name_and_valu": 9, "test_custom_payload_and_attribut": 9, "test_default_pretty_print": 9, "test_depth": 9, "test_descendants_node3": 9, "test_edge_cas": 9, "test_find_nod": 9, "test_get_nod": 9, "test_height": 9, "test_is_ancestor": 9, "test_is_descend": 9, "test_is_intern": 9, "test_is_leaf": 9, "test_is_root": 9, "test_is_s": 9, "test_large_tree_perform": 9, "test_leav": 9, "test_map": 9, "test_mark_nod": 9, "test_move_subtre": 9, "test_node_method": 9, "test_repr": 9, "test_root": 9, "test_set_get_children": 9, "test_set_get_payload": 9, "test_setitem": 9, "test_siblings_node6": 9, "test_visit_level_ord": 9, "test_visit_pre_ord": 9, "test_visit_stop_on_match": 9, "testcas": 9, "testn": 7, "testtreenod": 9, "testtreenodeadvanc": 9, "testtreenodeutil": 9, "testtreeprettyprint": 9, "text": [6, 7], "than": [0, 4, 6, 11], "thatn": [6, 7], "thei": [0, 2, 6], "them": [2, 4, 6, 7], "theoret": 3, "thesen": 7, "theseu": 5, "thi": [0, 2, 4, 6, 7, 11], "thing": 6, "thingsn": 6, "think": 6, "thisn": 6, "thought": 0, "three": 6, "through": [0, 7], "ti": 0, "tn": 7, "to_dict": [0, 5, 6, 7, 11], "ton": [6, 7], "too": [0, 7], "tool": [4, 11], "top": [2, 6], "total": 10, "tradit": 11, "transform": 6, "translat": 6, "transmit": 7, "travers": [0, 3, 4, 6, 7], "traversaln": 6, "treat": [0, 2], "tree": [0, 3, 4, 5, 6, 7, 9], "tree1": 7, "tree2": 7, "tree_convert": [2, 5, 6, 7, 11], "tree_data": 2, "tree_dict": 11, "tree_hash": [0, 5, 11], "tree_node_root": 11, "treeconvert": [0, 2, 5, 6, 7, 11], "treeconvertern": [6, 7], "treen": [6, 7], "treenod": [3, 4, 5, 6, 7], "treenode_2n": 7, "treenode_api": 5, "treenode_dict": 7, "treenode_from_dict": 7, "treenodeapi": [0, 5], "treenodem": 7, "treenoden": [6, 7], "treesn": 6, "treeviz": 7, "tri": 0, "true": [0, 4, 6, 7], "truen": 7, "try": [0, 2, 6, 7], "tutori": [2, 3], "two": [0, 4, 6, 7, 11], "txt": 7, "type": [0, 2, 6, 7, 11], "typeerror": [0, 7], "typic": 6, "u": 7, "un": 7, "undefin": [0, 4, 6], "under": [0, 2, 7], "underli": [0, 2, 4, 7], "understand": 0, "undirect": 0, "unifi": 7, "uniqu": [0, 2, 4, 7], "unless": 7, "unlik": 10, "until": 0, "up": [0, 4, 6, 9], "us": [0, 2, 4, 6, 7, 10, 11], "usag": [2, 3], "usedn": 7, "util": [4, 5, 7, 11], "utilsn": 7, "uuid": [0, 4, 10], "v": [0, 6, 7], "valid": [0, 7], "valu": [0, 2, 6, 7, 10, 11], "valueerror": [0, 2, 7], "valuen": 7, "valuesn": 6, "var": [6, 11], "variabl": [0, 6], "variablesn": 6, "variou": [0, 2, 4, 11], "veri": 7, "verifi": 0, "versatil": 2, "version": [6, 7], "vertic": 0, "view": [0, 4, 7, 11], "visit": [0, 5], "visual": [3, 4, 6, 7], "vn": 7, "w": 7, "wa": 7, "wai": [0, 2, 4, 6, 7], "want": [0, 4, 7], "we": [0, 2, 4, 6, 7, 10, 11], "weak": 4, "welcom": 4, "well": [0, 4, 6], "wen": 6, "what": [6, 7, 9, 10], "whatev": 7, "when": [0, 4, 6, 7], "where": [0, 2, 4, 6, 7, 10], "whether": [0, 11], "which": [0, 2, 4, 6, 7, 10, 11], "while": 2, "whole": 11, "whose": 0, "wide": [4, 7], "within": [0, 4], "withn": 7, "without": [0, 7], "wn": 7, "word": [0, 10], "work": [2, 3, 4, 6, 7], "would": [0, 4, 6, 7], "x": [0, 4, 6, 7, 11], "xn": [6, 7], "y": [6, 7, 11], "ye": 7, "yn": [6, 7], "you": [0, 2, 4, 6, 7, 11], "youn": 6, "your": [0, 6, 11], "z": 6, "zero": 6}, "titles": ["AlgoTree package", "conf module", "FlatForest", "Welcome to AlgoTree\u2019s documentation!", "Introduction", "AlgoTree", "&lt;no title&gt;", "&lt;no title&gt;", "setup module", "test package", "TreeNode", "AlgoTree: Comprehensive Tutorial"], "titleterms": {"": 3, "1": 11, "10": 11, "11": 11, "12": 11, "2": 11, "3": 11, "4": 11, "5": 11, "6": 11, "7": 11, "8": 11, "9": 11, "A": 11, "The": 0, "ad": 2, "advanc": 11, "algotre": [0, 3, 5, 11], "api": [4, 10, 11], "attribut": 10, "background": 2, "centric": [4, 11], "child": 2, "class": 2, "comprehens": 11, "concept": 11, "conclus": [2, 11], "conf": 1, "content": [0, 3, 9, 11], "convers": [2, 11], "convert": 2, "core": 11, "cycl": 2, "data": 2, "detach": 2, "detect": 2, "document": 3, "error": 2, "evalu": 11, "exampl": 10, "express": 11, "featur": [4, 11], "flat_forest": 0, "flat_forest_nod": 0, "flatforest": [2, 11], "flatforestnod": 2, "flattre": 2, "flexibl": 11, "format": 2, "function": 0, "get": 4, "handl": 2, "hash": [0, 11], "indic": 3, "initi": [2, 10], "instal": 11, "introduct": [4, 11], "invalid": 2, "manipul": [2, 11], "method": 10, "modul": [0, 1, 8, 9], "node": [0, 2, 4, 11], "node_hash": 0, "object": 2, "packag": [0, 9], "parent": 2, "perspect": 0, "philosoph": 0, "pretty_tre": 0, "properti": 10, "proxi": 2, "purg": 2, "recurs": 11, "refer": 2, "root": 2, "setup": 8, "ship": 0, "simpl": 11, "start": 4, "structur": [10, 11], "sub": 2, "submodul": [0, 9], "subtre": 11, "tabl": [3, 11], "test": 9, "test_algo": 9, "test_algos_treenod": 9, "test_flatnode_hash": 9, "test_flattre": 9, "test_flattree_addit": 9, "test_flattree_nod": 9, "test_flattree_node_api": 9, "test_flattree_util": 9, "test_flattreenode_eq": 9, "test_misc": 9, "test_nb": 9, "test_node_hash": 9, "test_tree_convert": 9, "test_tree_print": 9, "test_tree_with_flattreenod": 9, "test_treenod": 9, "test_treenode_util": 9, "text": 2, "theoret": 2, "theseu": 0, "travers": 11, "tree": [2, 10, 11], "tree_convert": 0, "treenod": [0, 2, 10, 11], "treenode_api": 0, "tutori": 11, "usag": 10, "util": 0, "valid": 2, "view": 2, "visual": [2, 11], "welcom": 3, "work": 11}})