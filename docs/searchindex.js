Search.setIndex({"alltitles": {"1. Introduction": [[10, "introduction"]], "10. Working with Subtrees": [[10, "working-with-subtrees"]], "11. Expression Trees and Evaluation": [[10, "expression-trees-and-evaluation"]], "12. Conclusion": [[10, "conclusion"]], "2. Installation": [[10, "installation"]], "3. Core Concepts": [[10, "core-concepts"]], "4. FlatForest: A Flexible Tree Structure": [[10, "flatforest-a-flexible-tree-structure"]], "5. TreeNode: A Simple Recursive Tree Structure": [[10, "treenode-a-simple-recursive-tree-structure"]], "6. Tree Traversal and Manipulation": [[10, "tree-traversal-and-manipulation"]], "7. Tree Visualization": [[10, "tree-visualization"]], "8. Tree Conversion": [[10, "tree-conversion"]], "9. Advanced Features": [[10, "advanced-features"]], "Adding a Child Node": [[2, "adding-a-child-node"]], "AlgoTree": [[8, "algotree"]], "AlgoTree package": [[0, "algotree-package"]], "AlgoTree.flat_forest module": [[0, "module-AlgoTree.flat_forest"]], "AlgoTree.flat_forest_node module": [[0, "module-AlgoTree.flat_forest_node"]], "AlgoTree.node_hasher module": [[0, "module-AlgoTree.node_hasher"]], "AlgoTree.pretty_tree module": [[0, "module-AlgoTree.pretty_tree"]], "AlgoTree.tree_converter module": [[0, "module-AlgoTree.tree_converter"]], "AlgoTree.tree_hasher module": [[0, "module-AlgoTree.tree_hasher"]], "AlgoTree.treenode module": [[0, "module-AlgoTree.treenode"]], "AlgoTree.treenode_api module": [[0, "module-AlgoTree.treenode_api"]], "AlgoTree.utils module": [[0, "module-AlgoTree.utils"]], "AlgoTree: Comprehensive Tutorial": [[10, "algotree-comprehensive-tutorial"]], "Algorithm Examples": [[3, "algorithm-examples"]], "Alternative Way To Construct Expression Trees": [[1, "alternative-way-to-construct-expression-trees"]], "Arguments": [[7, "arguments"]], "Attributes and Methods": [[9, "attributes-and-methods"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"]], "Contents:": [[5, null]], "Converting to FlatForest": [[1, "converting-to-flatforest"]], "Converting to TreeNode": [[2, "converting-to-treenode"]], "Creating a FlatForest": [[3, "creating-a-flatforest"]], "Creating a FlatForest from a JSON": [[3, "creating-a-flatforest-from-a-json"]], "Cycle Detection": [[2, "cycle-detection"]], "Detaching and Purging Nodes": [[2, "detaching-and-purging-nodes"]], "Equality in Trees and Nodes": [[4, "equality-in-trees-and-nodes"]], "Equality: Intrinsic and Extrinsic Properties": [[4, "equality-intrinsic-and-extrinsic-properties"]], "Example Usage": [[9, "example-usage"]], "Explanation of Hash Collisions": [[4, "explanation-of-hash-collisions"]], "Expression Tree Evaluator": [[1, "expression-tree-evaluator"]], "Expression Trees and Evaluation": [[1, "expression-trees-and-evaluation"]], "Features": [[6, "features"]], "FlatForest": [[2, "flatforest"]], "FlatForest Class": [[2, "flatforest-class"]], "FlatForest Notebook": [[3, "flatforest-notebook"]], "FlatForestNode Proxies": [[2, "flatforestnode-proxies"]], "Getting Started": [[6, "getting-started"]], "Handling Errors": [[2, "handling-errors"]], "Handling Undefined Variables": [[1, "handling-undefined-variables"]], "Hashing and Equality": [[4, "hashing-and-equality"]], "Identity: The Strict Definition": [[4, "identity-the-strict-definition"]], "Indices and tables": [[5, "indices-and-tables"]], "Initialization": [[9, "initialization"]], "Initializing a FlatTree": [[2, "initializing-a-flattree"]], "Introduction": [[3, "introduction"], [6, "introduction"]], "Invalid Parent Reference": [[2, "invalid-parent-reference"]], "License": [[7, "license"]], "Manipulating the Tree": [[2, "manipulating-the-tree"]], "Methods": [[9, "methods"]], "Module contents": [[0, "module-AlgoTree"]], "Node Hashing": [[10, "node-hashing"]], "Node-Centric API": [[6, "node-centric-api"], [10, "node-centric-api"]], "Output": [[3, "output"]], "Overview": [[7, "overview"]], "Philosophical Perspective: The Ship of Theseus": [[4, "philosophical-perspective-the-ship-of-theseus"]], "Post-order Traversal": [[1, "post-order-traversal"]], "Post-order vs.\u00a0Pre-order Traversal": [[1, "post-order-vs-pre-order-traversal"]], "Properties": [[9, "properties"]], "Proxy Objects and Views": [[2, "proxy-objects-and-views"]], "Purging Detached Nodes": [[2, "purging-detached-nodes"]], "Root Node": [[2, "root-node"]], "Self-Evaluating Trees": [[1, "self-evaluating-trees"]], "Storing and Transmitting Trees": [[3, "storing-and-transmitting-trees"]], "Submodules": [[0, "submodules"]], "Table of Contents": [[3, "table-of-contents"], [10, "table-of-contents"]], "Text Visualization": [[2, "text-visualization"]], "Theoretical Background": [[2, "theoretical-background"]], "Tree API": [[9, "tree-api"]], "Tree Conversions": [[2, "tree-conversions"]], "Tree Data Format": [[2, "tree-data-format"]], "Tree Node Concept": [[10, "tree-node-concept"]], "TreeNode": [[9, "treenode"]], "TreeNode Structure": [[9, "treenode-structure"]], "Understanding Equality in Trees and Nodes": [[4, "understanding-equality-in-trees-and-nodes"]], "Usage": [[7, "usage"]], "Validating the Tree": [[2, "validating-the-tree"]], "Viewing Sub-Trees": [[2, "viewing-sub-trees"]], "Visualizing the Tree": [[2, "visualizing-the-tree"]], "Visualizing the Tree Structure": [[1, "visualizing-the-tree-structure"]], "Welcome to AlgoTree\u2019s documentation!": [[5, "welcome-to-algotree-s-documentation"]], "jt Command-Line Tool": [[7, "jt-command-line-tool"]]}, "docnames": ["AlgoTree", "expr_trees_nb", "flat_forest", "flat_forest_nb", "identity", "index", "introduction", "jt", "modules", "treenode", "tutorial"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["AlgoTree.rst", "expr_trees_nb.rst", "flat_forest.rst", "flat_forest_nb.rst", "identity.rst", "index.rst", "introduction.rst", "jt.rst", "modules.rst", "treenode.rst", "tutorial.rst"], "indexentries": {"add_child() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.add_child", false]], "add_child() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.add_child", false]], "add_child() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.add_child", false]], "algotree": [[0, "module-AlgoTree", false]], "algotree.flat_forest": [[0, "module-AlgoTree.flat_forest", false]], "algotree.flat_forest_node": [[0, "module-AlgoTree.flat_forest_node", false]], "algotree.node_hasher": [[0, "module-AlgoTree.node_hasher", false]], "algotree.pretty_tree": [[0, "module-AlgoTree.pretty_tree", false]], "algotree.tree_converter": [[0, "module-AlgoTree.tree_converter", false]], "algotree.tree_hasher": [[0, "module-AlgoTree.tree_hasher", false]], "algotree.treenode": [[0, "module-AlgoTree.treenode", false]], "algotree.treenode_api": [[0, "module-AlgoTree.treenode_api", false]], "algotree.utils": [[0, "module-AlgoTree.utils", false]], "ancestors() (in module algotree.utils)": [[0, "AlgoTree.utils.ancestors", false]], "as_tree() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.as_tree", false]], "average_distance() (in module algotree.utils)": [[0, "AlgoTree.utils.average_distance", false]], "breadth_first() (in module algotree.utils)": [[0, "AlgoTree.utils.breadth_first", false]], "breadth_first_undirected() (in module algotree.utils)": [[0, "AlgoTree.utils.breadth_first_undirected", false]], "check() (algotree.treenode_api.treenodeapi static method)": [[0, "AlgoTree.treenode_api.TreeNodeApi.check", false]], "check_valid() (algotree.flat_forest.flatforest static method)": [[0, "AlgoTree.flat_forest.FlatForest.check_valid", false]], "child_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.child_names", false]], "children (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.children", false]], "children (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.children", false]], "clone() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.clone", false]], "clone() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.clone", false]], "contains() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.contains", false]], "contains() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.contains", false]], "convert() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.convert", false]], "copy_under() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.copy_under", false]], "default_extract() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.default_extract", false]], "default_node_name() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.default_node_name", false]], "default_style (algotree.pretty_tree.prettytree attribute)": [[0, "AlgoTree.pretty_tree.PrettyTree.default_style", false]], "depth() (in module algotree.utils)": [[0, "AlgoTree.utils.depth", false]], "descendants() (in module algotree.utils)": [[0, "AlgoTree.utils.descendants", false]], "detach() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.detach", false]], "detach() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.detach", false]], "detached (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.detached", false]], "detached_key (algotree.flat_forest.flatforest attribute)": [[0, "AlgoTree.flat_forest.FlatForest.DETACHED_KEY", false]], "distance() (in module algotree.utils)": [[0, "AlgoTree.utils.distance", false]], "find_node() (in module algotree.utils)": [[0, "AlgoTree.utils.find_node", false]], "find_nodes() (in module algotree.utils)": [[0, "AlgoTree.utils.find_nodes", false]], "find_path() (in module algotree.utils)": [[0, "AlgoTree.utils.find_path", false]], "flatforest (class in algotree.flat_forest)": [[0, "AlgoTree.flat_forest.FlatForest", false]], "flatforestnode (class in algotree.flat_forest_node)": [[0, "AlgoTree.flat_forest_node.FlatForestNode", false]], "forest (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.forest", false]], "from_dict() (algotree.treenode.treenode static method)": [[0, "AlgoTree.treenode.TreeNode.from_dict", false]], "height() (in module algotree.utils)": [[0, "AlgoTree.utils.height", false]], "interior_node_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.interior_node_names", false]], "is_internal() (in module algotree.utils)": [[0, "AlgoTree.utils.is_internal", false]], "is_isomorphic() (in module algotree.utils)": [[0, "AlgoTree.utils.is_isomorphic", false]], "is_leaf() (in module algotree.utils)": [[0, "AlgoTree.utils.is_leaf", false]], "is_root() (in module algotree.utils)": [[0, "AlgoTree.utils.is_root", false]], "is_valid() (algotree.flat_forest.flatforest static method)": [[0, "AlgoTree.flat_forest.FlatForest.is_valid", false]], "is_valid() (algotree.treenode.treenode static method)": [[0, "AlgoTree.treenode.TreeNode.is_valid", false]], "is_valid() (algotree.treenode_api.treenodeapi static method)": [[0, "AlgoTree.treenode_api.TreeNodeApi.is_valid", false]], "isomorphic() (algotree.tree_hasher.treehasher static method)": [[0, "AlgoTree.tree_hasher.TreeHasher.isomorphic", false]], "lca() (in module algotree.utils)": [[0, "AlgoTree.utils.lca", false]], "leaves() (in module algotree.utils)": [[0, "AlgoTree.utils.leaves", false]], "logical_root_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.logical_root_names", false]], "map() (in module algotree.utils)": [[0, "AlgoTree.utils.map", false]], "mark() (algotree.pretty_tree.prettytree static method)": [[0, "AlgoTree.pretty_tree.PrettyTree.mark", false]], "missing() (algotree.treenode_api.treenodeapi static method)": [[0, "AlgoTree.treenode_api.TreeNodeApi.missing", false]], "module": [[0, "module-AlgoTree", false], [0, "module-AlgoTree.flat_forest", false], [0, "module-AlgoTree.flat_forest_node", false], [0, "module-AlgoTree.node_hasher", false], [0, "module-AlgoTree.pretty_tree", false], [0, "module-AlgoTree.tree_converter", false], [0, "module-AlgoTree.tree_hasher", false], [0, "module-AlgoTree.treenode", false], [0, "module-AlgoTree.treenode_api", false], [0, "module-AlgoTree.utils", false]], "name (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.name", false]], "name (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.name", false]], "name() (algotree.node_hasher.nodehasher static method)": [[0, "AlgoTree.node_hasher.NodeHasher.name", false]], "node() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.node", false]], "node() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.node", false]], "node() (algotree.node_hasher.nodehasher static method)": [[0, "AlgoTree.node_hasher.NodeHasher.node", false]], "node() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.node", false]], "node_names() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.node_names", false]], "node_stats() (in module algotree.utils)": [[0, "AlgoTree.utils.node_stats", false]], "node_to_leaf_paths() (in module algotree.utils)": [[0, "AlgoTree.utils.node_to_leaf_paths", false]], "nodehasher (class in algotree.node_hasher)": [[0, "AlgoTree.node_hasher.NodeHasher", false]], "nodes() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.nodes", false]], "nodes() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.nodes", false]], "parent (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.parent", false]], "parent (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.parent", false]], "parent (algotree.treenode.treenode property)": [[0, "AlgoTree.treenode.TreeNode.parent", false]], "parent_key (algotree.flat_forest.flatforest attribute)": [[0, "AlgoTree.flat_forest.FlatForest.PARENT_KEY", false]], "path() (algotree.node_hasher.nodehasher static method)": [[0, "AlgoTree.node_hasher.NodeHasher.path", false]], "path() (in module algotree.utils)": [[0, "AlgoTree.utils.path", false]], "paths_to_tree() (in module algotree.utils)": [[0, "AlgoTree.utils.paths_to_tree", false]], "payload (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.payload", false]], "payload (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.payload", false]], "payload() (algotree.node_hasher.nodehasher static method)": [[0, "AlgoTree.node_hasher.NodeHasher.payload", false]], "preferred_root (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.preferred_root", false]], "pretty_tree() (in module algotree.pretty_tree)": [[0, "AlgoTree.pretty_tree.pretty_tree", false]], "prettytree (class in algotree.pretty_tree)": [[0, "AlgoTree.pretty_tree.PrettyTree", false]], "properties (algotree.treenode_api.treenodeapi attribute)": [[0, "AlgoTree.treenode_api.TreeNodeApi.properties", false]], "proxy() (algotree.flat_forest_node.flatforestnode static method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.proxy", false]], "prune() (in module algotree.utils)": [[0, "AlgoTree.utils.prune", false]], "purge() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.purge", false]], "root (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.root", false]], "root (algotree.flat_forest_node.flatforestnode property)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.root", false]], "root (algotree.treenode.treenode property)": [[0, "AlgoTree.treenode.TreeNode.root", false]], "root_key() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.root_key", false]], "root_names (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.root_names", false]], "roots (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.roots", false]], "siblings() (in module algotree.utils)": [[0, "AlgoTree.utils.siblings", false]], "size() (in module algotree.utils)": [[0, "AlgoTree.utils.size", false]], "spec() (algotree.flat_forest.flatforest static method)": [[0, "AlgoTree.flat_forest.FlatForest.spec", false]], "subtree() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.subtree", false]], "subtree() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.subtree", false]], "subtree() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.subtree", false]], "subtree_centered_at() (in module algotree.utils)": [[0, "AlgoTree.utils.subtree_centered_at", false]], "subtree_rooted_at() (in module algotree.utils)": [[0, "AlgoTree.utils.subtree_rooted_at", false]], "to_dict() (algotree.flat_forest.flatforest method)": [[0, "AlgoTree.flat_forest.FlatForest.to_dict", false]], "to_dict() (algotree.flat_forest_node.flatforestnode method)": [[0, "AlgoTree.flat_forest_node.FlatForestNode.to_dict", false]], "to_dict() (algotree.tree_converter.treeconverter static method)": [[0, "AlgoTree.tree_converter.TreeConverter.to_dict", false]], "to_dict() (algotree.treenode.treenode method)": [[0, "AlgoTree.treenode.TreeNode.to_dict", false]], "tree() (algotree.tree_hasher.treehasher static method)": [[0, "AlgoTree.tree_hasher.TreeHasher.tree", false]], "treeconverter (class in algotree.tree_converter)": [[0, "AlgoTree.tree_converter.TreeConverter", false]], "treehasher (class in algotree.tree_hasher)": [[0, "AlgoTree.tree_hasher.TreeHasher", false]], "treenode (class in algotree.treenode)": [[0, "AlgoTree.treenode.TreeNode", false]], "treenodeapi (class in algotree.treenode_api)": [[0, "AlgoTree.treenode_api.TreeNodeApi", false]], "trees (algotree.flat_forest.flatforest property)": [[0, "AlgoTree.flat_forest.FlatForest.trees", false]], "visit() (in module algotree.utils)": [[0, "AlgoTree.utils.visit", false]]}, "objects": {"": [[0, 0, 0, "-", "AlgoTree"]], "AlgoTree": [[0, 0, 0, "-", "flat_forest"], [0, 0, 0, "-", "flat_forest_node"], [0, 0, 0, "-", "node_hasher"], [0, 0, 0, "-", "pretty_tree"], [0, 0, 0, "-", "tree_converter"], [0, 0, 0, "-", "tree_hasher"], [0, 0, 0, "-", "treenode"], [0, 0, 0, "-", "treenode_api"], [0, 0, 0, "-", "utils"]], "AlgoTree.flat_forest": [[0, 1, 1, "", "FlatForest"]], "AlgoTree.flat_forest.FlatForest": [[0, 2, 1, "", "DETACHED_KEY"], [0, 2, 1, "", "PARENT_KEY"], [0, 3, 1, "", "add_child"], [0, 3, 1, "", "as_tree"], [0, 3, 1, "", "check_valid"], [0, 3, 1, "", "child_names"], [0, 4, 1, "", "children"], [0, 3, 1, "", "contains"], [0, 3, 1, "", "detach"], [0, 4, 1, "", "detached"], [0, 3, 1, "", "interior_node_names"], [0, 3, 1, "", "is_valid"], [0, 3, 1, "", "logical_root_names"], [0, 4, 1, "", "name"], [0, 3, 1, "", "node"], [0, 3, 1, "", "node_names"], [0, 3, 1, "", "nodes"], [0, 4, 1, "", "parent"], [0, 4, 1, "", "payload"], [0, 4, 1, "", "preferred_root"], [0, 3, 1, "", "purge"], [0, 4, 1, "", "root"], [0, 3, 1, "", "root_key"], [0, 4, 1, "", "root_names"], [0, 4, 1, "", "roots"], [0, 3, 1, "", "spec"], [0, 3, 1, "", "subtree"], [0, 3, 1, "", "to_dict"], [0, 4, 1, "", "trees"]], "AlgoTree.flat_forest_node": [[0, 1, 1, "", "FlatForestNode"]], "AlgoTree.flat_forest_node.FlatForestNode": [[0, 3, 1, "", "add_child"], [0, 4, 1, "", "children"], [0, 3, 1, "", "clone"], [0, 3, 1, "", "contains"], [0, 3, 1, "", "detach"], [0, 4, 1, "", "forest"], [0, 4, 1, "", "name"], [0, 3, 1, "", "node"], [0, 4, 1, "", "parent"], [0, 4, 1, "", "payload"], [0, 3, 1, "", "proxy"], [0, 4, 1, "", "root"], [0, 3, 1, "", "subtree"], [0, 3, 1, "", "to_dict"]], "AlgoTree.node_hasher": [[0, 1, 1, "", "NodeHasher"]], "AlgoTree.node_hasher.NodeHasher": [[0, 3, 1, "", "name"], [0, 3, 1, "", "node"], [0, 3, 1, "", "path"], [0, 3, 1, "", "payload"]], "AlgoTree.pretty_tree": [[0, 1, 1, "", "PrettyTree"], [0, 5, 1, "", "pretty_tree"]], "AlgoTree.pretty_tree.PrettyTree": [[0, 2, 1, "", "default_style"], [0, 3, 1, "", "mark"]], "AlgoTree.tree_converter": [[0, 1, 1, "", "TreeConverter"]], "AlgoTree.tree_converter.TreeConverter": [[0, 3, 1, "", "convert"], [0, 3, 1, "", "copy_under"], [0, 3, 1, "", "default_extract"], [0, 3, 1, "", "default_node_name"], [0, 3, 1, "", "to_dict"]], "AlgoTree.tree_hasher": [[0, 1, 1, "", "TreeHasher"]], "AlgoTree.tree_hasher.TreeHasher": [[0, 3, 1, "", "isomorphic"], [0, 3, 1, "", "tree"]], "AlgoTree.treenode": [[0, 1, 1, "", "TreeNode"]], "AlgoTree.treenode.TreeNode": [[0, 3, 1, "", "add_child"], [0, 3, 1, "", "clone"], [0, 3, 1, "", "from_dict"], [0, 3, 1, "", "is_valid"], [0, 3, 1, "", "node"], [0, 3, 1, "", "nodes"], [0, 4, 1, "", "parent"], [0, 4, 1, "", "root"], [0, 3, 1, "", "subtree"], [0, 3, 1, "", "to_dict"]], "AlgoTree.treenode_api": [[0, 1, 1, "", "TreeNodeApi"]], "AlgoTree.treenode_api.TreeNodeApi": [[0, 3, 1, "", "check"], [0, 3, 1, "", "is_valid"], [0, 3, 1, "", "missing"], [0, 2, 1, "", "properties"]], "AlgoTree.utils": [[0, 5, 1, "", "ancestors"], [0, 5, 1, "", "average_distance"], [0, 5, 1, "", "breadth_first"], [0, 5, 1, "", "breadth_first_undirected"], [0, 5, 1, "", "depth"], [0, 5, 1, "", "descendants"], [0, 5, 1, "", "distance"], [0, 5, 1, "", "find_node"], [0, 5, 1, "", "find_nodes"], [0, 5, 1, "", "find_path"], [0, 5, 1, "", "height"], [0, 5, 1, "", "is_internal"], [0, 5, 1, "", "is_isomorphic"], [0, 5, 1, "", "is_leaf"], [0, 5, 1, "", "is_root"], [0, 5, 1, "", "lca"], [0, 5, 1, "", "leaves"], [0, 5, 1, "", "map"], [0, 5, 1, "", "node_stats"], [0, 5, 1, "", "node_to_leaf_paths"], [0, 5, 1, "", "path"], [0, 5, 1, "", "paths_to_tree"], [0, 5, 1, "", "prune"], [0, 5, 1, "", "siblings"], [0, 5, 1, "", "size"], [0, 5, 1, "", "subtree_centered_at"], [0, 5, 1, "", "subtree_rooted_at"], [0, 5, 1, "", "visit"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function"}, "terms": {"": [0, 1, 3, 4, 10], "0": [1, 3, 6, 10], "0a5c451b": 1, "0f0d258b2a25": 1, "1": [1, 3, 4, 5, 6], "10": [4, 5, 7], "1000": [0, 3], "11": 5, "12": 5, "137b3a08d31": 1, "14e057df": 3, "1549bcb8": 1, "1d223ec4": 1, "1f73": 1, "2": [1, 2, 3, 4, 5, 6], "20": 4, "200": 3, "2000": 3, "27bc": 3, "2a2e": 1, "2ab5": 1, "2ad7": 1, "3": [1, 3, 4, 5, 6], "30": 4, "3000": 3, "30a87f4c": 1, "36a9": 3, "3af8": 1, "3e19": 1, "4": [1, 3, 5, 6], "40": 4, "409a": 1, "41": 3, "41d8adc8": 1, "42": 3, "4217": 1, "4544": 1, "457d": 3, "45eb": 1, "45f0": 3, "45f4": 1, "467f": 1, "474c": 1, "477d": 1, "47c3": 3, "48e9": 1, "4aae": 1, "4bb4": 1, "4dae": 3, "4fef": 1, "5": [3, 5], "5a8df89c": 1, "5ce307424675": 1, "5da441854dcb": 1, "5f189f2e85f2": 1, "6": 5, "7": [0, 1, 3, 5], "779cc759": 3, "78baf6c2": 1, "7dc9523b": 1, "8": [3, 5], "8004": 3, "8424": 1, "8749": 1, "8a24": 1, "9": [1, 3, 5], "90a4": 1, "9415": 3, "945ef525": 3, "9551": 1, "9852": 1, "9aa8123ac2bd": 1, "9b38": 1, "9daf": 1, "9db394571b83": 1, "A": [0, 1, 2, 3, 4, 5, 6], "And": 3, "As": [0, 1, 3, 6], "At": 1, "By": 4, "For": [0, 1, 2, 3, 4], "If": [0, 1, 3, 6, 7, 9], "In": [0, 1, 2, 3, 4, 6, 7, 10], "It": [0, 1, 2, 3, 4, 6, 7, 9, 10], "No": 0, "Or": 1, "The": [0, 1, 2, 3, 5, 6, 7, 9, 10], "Then": [0, 6], "These": [0, 2, 4], "To": [0, 6, 10], "With": 2, "_": 1, "_2": 3, "__call__": 1, "__detached__": [0, 3], "__init__": [0, 1, 9], "__root__": [0, 3], "_eval": 1, "a08e5a3fc4e0": 1, "a1c9": 3, "a2": 3, "a44d": 1, "a499": 3, "a8f1": 1, "ab68": 1, "abil": 3, "about": [0, 3, 4, 6], "abov": 7, "abstract": [0, 2, 3, 4], "accept": [0, 1, 3], "access": [0, 2, 3, 6, 9, 10], "achiev": 0, "across": 10, "act": 2, "ad": [1, 9, 10], "adapt": 2, "add": [0, 1, 3, 9, 10], "add_child": [0, 2, 3, 4, 8, 9, 10], "add_prefix": 3, "addit": [0, 2, 3, 7, 9], "address": 4, "adff": 1, "advanc": [2, 5], "aec46058acda": 1, "afbd": 1, "after": [0, 1, 3], "again": [1, 3], "algebra": 1, "algorithm": [1, 5, 6], "algotre": [1, 2, 3, 6], "all": [0, 1, 2, 3, 4, 6, 7], "allow": [0, 2, 3, 4, 7, 9, 10], "along": [3, 10], "alreadi": [0, 3], "also": [0, 1, 2, 3, 4, 6, 9], "alter": 4, "altern": 4, "alwai": 0, "among": 0, "an": [0, 1, 2, 3, 4, 6, 9, 10], "ancestor": [0, 3, 6, 7, 8], "ani": [0, 2, 3, 6, 9, 10], "anoth": [0, 2, 3, 4, 6, 10], "api": [2, 3, 5], "append": [1, 3], "appli": [1, 4], "applic": [4, 10], "approach": [0, 6, 10], "ar": [0, 1, 2, 3, 4, 6, 7, 10], "arbitrari": [3, 4], "arg": [0, 9], "argument": [0, 1, 5, 9], "around": 0, "as_tre": [0, 2, 3, 8], "ask": 4, "assert": [1, 4], "assign": 0, "associ": [0, 6, 10], "assum": [0, 4, 6, 10], "attempt": 2, "attent": 4, "attribut": [0, 2, 4, 5], "attributeerror": 0, "augment": 0, "avail": [0, 6], "averag": 0, "average_dist": [0, 8], "avoid": 3, "awai": [0, 4], "awar": 2, "b": [0, 3, 4, 6, 10], "b2": 3, "b2a8": 1, "b4be": 1, "b5449d28ef1": 3, "b614": 1, "b6d9": 3, "b7c7235ea4d8": 3, "b_0": 3, "b_1": 3, "b_2": 3, "b_3": 3, "b_4": 3, "b_5": 3, "b_6": 3, "b_7": 3, "back": 9, "background": 5, "base": [0, 1, 3, 4, 7, 10], "basic": [2, 7], "becaus": [3, 4], "been": [1, 3], "befor": 1, "behav": 0, "behavior": [0, 2, 4, 6], "being": [3, 4], "belong": [0, 4, 6], "below": 3, "better": 4, "between": [0, 2, 3, 4, 6, 7, 10], "bidirect": 0, "bit": 3, "bookkeep": 3, "bool": [0, 10], "both": [0, 4], "bottom": 1, "breadth": [0, 3, 10], "breadth_first": [0, 3, 8, 10], "breadth_first_undirect": [0, 3, 8], "break": 3, "bring": 4, "build": 4, "c": [0, 1, 3, 6, 10], "c0c917ab03e5": 1, "c2": 3, "c7034d020978": 3, "c833": 1, "c_2": 3, "cach": 2, "cad1": 1, "calcul": 7, "call": [0, 1, 3], "callabl": 0, "can": [0, 1, 2, 3, 4, 6, 7, 9, 10], "cannot": 1, "capabl": 2, "care": [3, 4], "carri": 0, "case": [0, 1, 4, 6], "caution": 0, "center": 0, "center_c": 3, "centric": [0, 2, 3, 5], "certain": [0, 4, 6], "chang": [0, 1, 2, 3, 4, 6, 10], "check": [0, 2, 4, 7, 8, 10], "check_valid": [0, 2, 3, 8], "child": [0, 1, 3, 4, 6, 9, 10], "child1": [0, 3, 4, 9], "child1_1": [4, 9], "child1_1_valu": 9, "child1_2": [3, 4], "child1_valu": 9, "child2": [0, 3, 4, 9], "child2_1": [4, 9], "child2_1_valu": 9, "child2_2": [3, 4], "child2_valu": 9, "child_connector": 0, "child_nam": [0, 8], "children": [0, 1, 2, 3, 6, 7, 8, 9, 10], "choos": [0, 4], "chose": 3, "class": [0, 1, 3, 5, 9], "clear": 3, "clone": [0, 8, 10], "clone_children": 0, "cloned_a": 10, "closest": 0, "closur": 1, "code": [0, 2, 6, 9], "collect": 2, "collis": 6, "com": 2, "come": 3, "command": 5, "common": [0, 1, 2, 6, 7], "compar": [0, 4, 10], "comparison": [0, 4], "compil": 1, "complet": [3, 4], "complex": [1, 2, 10], "comprehens": 5, "comput": [0, 1, 2, 4], "concept": [0, 3, 4, 5, 6], "concern": 4, "conclus": 5, "condit": [0, 6], "configur": 3, "conflict": 0, "connect": 0, "consid": [0, 4], "consist": [0, 2, 6, 10], "const": [1, 10], "construct": 9, "contain": [0, 1, 2, 4, 6, 7, 8, 10], "content": 8, "context": [1, 2, 4, 10], "contextu": 4, "continu": [0, 4], "contrast": 1, "control": 2, "conveni": 1, "convent": 4, "convers": [1, 3, 5, 6], "convert": [0, 3, 5, 6, 7, 8, 10], "copi": [0, 1, 3], "copy_und": [0, 3, 8], "core": 5, "correct": 4, "correspond": [0, 4], "cost": 3, "could": [0, 1], "cours": 3, "cover": [2, 10], "creat": [0, 2, 5, 6, 10], "criteria": 4, "crucial": 4, "ctx": 1, "current": [0, 6, 10], "custom": 7, "cycl": [0, 3], "cycle_tre": [2, 3], "cycle_tree_data": 2, "d": [0, 3, 6, 10], "d2": 3, "d433395a": 3, "d_0": 3, "d_1": 3, "d_2": 3, "data": [0, 1, 3, 4, 5, 6, 9, 10], "databas": 2, "dde50326": 1, "deal": [0, 6], "debug": 1, "decid": [0, 6], "decoupl": 6, "deepcopi": [0, 1, 3], "def": [1, 3, 9, 10], "default": [0, 1, 2, 3, 7, 9], "default_extract": [0, 8], "default_node_nam": [0, 8], "default_styl": [0, 8], "defin": [0, 1, 4, 6], "definit": 5, "del": 3, "delet": 3, "demonstr": [2, 10], "denot": 0, "depend": 4, "depth": [0, 1, 3, 7, 8], "descend": [0, 3, 6, 7, 8, 10], "desend": 0, "design": [1, 2, 6], "dest": 0, "destin": 0, "detach": [0, 3, 8], "detached_kei": [0, 3, 8], "detail": [0, 2, 3, 7], "detect": 3, "determin": 0, "dict": [0, 1, 2, 3, 6], "dictionari": [0, 1, 2, 3, 4, 6, 9, 10], "differ": [0, 1, 2, 3, 4, 6, 7, 10], "directli": [1, 2], "disconnect": 3, "discov": 3, "discuss": 4, "disk": 1, "displai": 3, "distanc": [0, 7, 8], "distinct": 4, "distinguish": 4, "distribut": 7, "do": [0, 2, 3, 4, 6], "document": [0, 4, 6], "doe": [0, 3, 4, 6], "doesn": [0, 3], "domain": [2, 10], "don": 3, "down": [0, 1, 6], "due": 4, "dump": [1, 2, 3], "dure": 1, "e": [0, 1, 2, 3, 4, 6, 7, 10], "e021d65aa1d4": 3, "e2": 3, "e_2": 3, "ea98d53a1c56": 1, "each": [0, 1, 2, 3, 4, 6, 9], "earlier": 1, "easi": 3, "easier": 10, "easili": 6, "eef6aa53bbec": 1, "effect": [0, 4], "effici": [0, 1, 2, 4], "either": 0, "elif": [3, 10], "els": 3, "elsewher": 6, "encapsul": 2, "encount": 1, "ensur": [0, 1, 2], "entir": [0, 4, 10], "entiti": 0, "enumer": 0, "environ": 4, "epilog": 7, "equal": [0, 5], "equival": 0, "error": [1, 3], "error_tre": 3, "essenc": 1, "essenti": [0, 1], "etc": 4, "eval": 1, "evalu": 5, "even": [0, 2, 4, 6, 10], "everi": [1, 4], "exampl": [0, 1, 2, 4, 5, 6, 7], "except": [0, 1, 2, 3, 6], "exist": [0, 2, 3, 6, 7, 10], "expalanatori": 3, "expect": [0, 1, 2], "experi": 4, "explor": [1, 3, 4, 6], "expos": [0, 1, 2], "expr": [1, 10], "expr_typ": 1, "express": [5, 7], "extend": [0, 10], "extens": 0, "extract": [0, 1], "extractor": 0, "extrins": 5, "f": [0, 1, 3, 6, 10], "f2": 3, "f4057e80": 1, "f633d8d3": 1, "f_2": 3, "f_node": 3, "facilit": [0, 2], "fairli": 3, "fals": [0, 1, 3, 10], "famou": 4, "far": 3, "fast": 1, "fc106112": 1, "featur": [2, 3, 5], "fece": 3, "few": 7, "fewer": 9, "file": [2, 3, 7], "final": 1, "find": [0, 3, 7, 10], "find_nod": [0, 8], "find_path": [0, 8], "finit": 4, "first": [0, 1, 2, 3, 10], "fix": [3, 4], "flat": [0, 1, 2, 3, 6, 10], "flat_expr": 1, "flat_forest": [1, 3, 8, 10], "flat_forest_nod": [1, 3, 6, 8, 10], "flat_forest_root": 10, "flatforest": [0, 5, 6, 7, 8], "flatforestnod": [0, 1, 3, 6, 8, 9, 10], "flatten": 1, "flatter": 1, "flattre": 3, "flattreenod": 3, "flexibl": [0, 2, 3, 5, 6], "float": 0, "fn": 1, "focus": [0, 3, 4], "follow": [0, 6, 7, 9, 10], "forest": [0, 1, 2, 3, 6, 7, 8, 10], "forest2": 3, "forest3": 3, "form": [1, 4, 9], "format": [1, 3, 5, 7], "found": [0, 2], "foundat": [4, 10], "from": [0, 1, 2, 4, 6, 7, 10], "from_dict": [0, 1, 3, 8, 9, 10], "full": 3, "func": 0, "function": [0, 1, 2, 3, 4, 6, 7, 10], "further": [1, 3], "g": [0, 3, 4, 6, 7], "g2": 3, "g_2": 3, "gather": 0, "gener": [0, 1, 3, 7, 9], "get": [0, 1, 3, 5, 7, 10], "github": 2, "give": 1, "given": [0, 6, 7, 9, 10], "go": [0, 1, 3, 6], "gone": 3, "good": [1, 3, 4], "gradual": 4, "graph": 0, "guarante": 4, "h": 3, "h2": 3, "ha": [0, 1, 2, 3, 4, 6, 7, 9, 10], "had": [0, 1, 6], "handl": [0, 5, 6], "happen": [1, 3], "hash": [0, 5, 6], "hash_fn": 0, "have": [0, 1, 2, 3, 4, 6, 10], "height": [0, 3, 7, 8, 10], "help": [4, 6, 7], "here": [4, 6, 7, 9], "hide": 2, "hierarch": [2, 4, 10], "high": 4, "highlight": [3, 4], "hold": 4, "hop": 0, "horizont": 0, "how": [0, 1, 4, 6, 7, 10], "howerv": 1, "howev": [0, 3, 4, 6, 9], "http": 2, "human": 1, "i": [0, 1, 2, 3, 4, 6, 7, 9, 10], "i2": 3, "id": 4, "idea": 1, "ident": 5, "identifi": [0, 2, 6, 10], "ignor": 0, "illustr": 3, "immedi": 0, "immut": [0, 3, 6], "implement": [0, 1, 2, 3, 4, 6, 10], "impli": 4, "import": [0, 1, 2, 3, 4, 6, 9, 10], "inaccess": [0, 6], "includ": [0, 3, 4, 6], "incomplet": 1, "incur": 3, "indent": [0, 1, 2, 3], "independ": 4, "index": 5, "indic": 2, "indirect": 2, "indiscern": 4, "indistinguish": 4, "individu": [2, 10], "inf": 0, "infinit": 4, "inform": [0, 1, 2, 3], "input": [4, 7], "instal": [5, 6], "instanc": [0, 1, 3, 4, 6, 9], "instead": [0, 1, 3], "int": 0, "integ": 0, "integr": [0, 3, 6], "interest": 4, "interfac": [0, 1, 2, 3, 10], "interior": 0, "interior_node_nam": [0, 8], "intermediari": 2, "intern": [0, 4], "intrins": [0, 5], "introduct": 5, "intuit": [2, 10], "invalid": [0, 3, 6], "invalid_tre": 2, "invok": 0, "ipython": 3, "is_intern": [0, 3, 8], "is_isomorph": [0, 8], "is_leaf": [0, 3, 8], "is_root": [0, 3, 8], "is_valid": [0, 8], "isomorph": [0, 4, 8], "item": 3, "iter": [0, 3], "itrat": 3, "its": [0, 1, 2, 3, 4, 6, 7, 10], "itself": [0, 1, 2, 4], "j": 3, "json": [0, 1, 2, 7, 9], "jt": 5, "just": [0, 1, 3, 6], "k": 3, "k_2": 3, "keep": 3, "kei": [0, 1, 2, 3, 6, 7, 9, 10], "keyerror": [0, 1, 2, 3, 6], "keyword": 0, "kind": [0, 1, 3, 4, 9], "know": 1, "known": 1, "kwarg": [0, 9], "l": 3, "l_2": 3, "label": 4, "lambda": [0, 1, 3, 7, 10], "lambda_express": 7, "larger": [0, 4, 6], "last_child_connector": 0, "law": 4, "lazi": 2, "lca": [0, 7, 8], "lead": 4, "leaf": [0, 2, 3, 7], "learn": 6, "leav": [0, 3, 6, 7, 8, 10], "leaves_und": 3, "leibniz": 4, "len": [3, 10], "length": [0, 3], "let": [1, 3, 10], "level": [0, 2, 3, 4, 10], "librari": [3, 10], "licens": 5, "lightweight": 0, "like": [0, 1, 2, 3, 4, 6, 7, 10], "line": 5, "list": [0, 6, 7, 9, 10], "load": [2, 3], "locat": 0, "log": [1, 3], "logic": [0, 3], "logical_root_nam": [0, 3, 8], "long": [2, 3, 6], "longer": 3, "look": [3, 4, 6], "low": 0, "lowest": [0, 7], "m": 3, "m_2": 3, "mai": [0, 1, 2, 3, 4, 6], "main": [3, 10], "maintain": [2, 3, 10], "make": [3, 10], "mani": [0, 1, 2], "manipul": [0, 3, 5, 6, 7, 9], "map": [0, 1, 3, 4, 8, 9], "mark": [0, 3, 7, 8], "markdown": 3, "marker": 0, "materi": 4, "matter": 4, "max": [1, 3, 10], "max_hop": 0, "max_lvl": 0, "max_tri": 0, "maximum": 0, "md": 3, "mean": [0, 6, 10], "meaning": [0, 6], "memori": 4, "merg": [2, 7], "met": [0, 6], "method": [0, 2, 3, 5, 6, 10], "might": [1, 4], "miss": [0, 1, 8], "mit": 7, "mix": 4, "model": [0, 3, 6], "modifi": [0, 3, 6, 10], "modul": [5, 8], "monotext": 3, "more": [0, 1, 2, 3, 6, 7], "more_data": 3, "most": [0, 4, 6], "multipl": [0, 1, 2, 7], "must": [0, 3, 4, 10], "mutabl": 3, "mutablemap": 0, "mutat": 0, "n": [3, 10], "name": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10], "name_hash": 10, "natur": 2, "navig": [6, 10], "necessarili": [0, 4, 6], "need": [1, 2, 9], "neglig": 6, "nest": [0, 2, 3], "network": [1, 2], "new": [0, 2, 3, 6, 7, 10], "new_data": 3, "new_forest": 3, "new_nod": 3, "new_root": 3, "new_tre": [2, 3], "newrootnod": 7, "node": [0, 1, 3, 5, 7, 8, 9], "node0": 2, "node1": [0, 2, 4, 6, 10], "node2": [0, 2, 4, 6, 10], "node3": [2, 6], "node36": 2, "node4": [2, 6], "node5": 2, "node_detail": [0, 3, 10], "node_hash": [8, 10], "node_info": 3, "node_kei": [0, 2, 7], "node_key1": 7, "node_key2": 7, "node_nam": [0, 1, 3, 8, 10], "node_stat": [0, 3, 8], "node_to_leaf_path": [0, 3, 8], "nodehash": [0, 4, 8, 10], "nodekei": 7, "nodenam": 7, "nodetyp": [0, 1, 6, 10], "non": [1, 2, 3], "non_existent_par": [2, 3], "non_existent_parent_tre": 3, "none": [0, 1, 3, 6, 9, 10], "nor": [0, 6], "normal": [1, 3], "note": [0, 1, 3, 4], "notebook": 5, "noth": 3, "notic": 3, "notion": 0, "now": [0, 1, 3, 4, 6], "null": 3, "number": [0, 1, 7], "o": 3, "object": [0, 3, 4, 6, 9], "occupi": [0, 4], "occur": 0, "offer": [2, 10], "often": [3, 4], "onc": [0, 6], "one": [0, 1, 3, 6], "onli": [0, 1, 3, 4, 6], "op": [1, 10], "open_ctx": 1, "oper": [0, 1, 2, 3, 6, 7, 10], "optim": 1, "option": [0, 1, 2, 3, 6, 7, 9, 10], "order": [0, 3, 5], "origin": [0, 2, 3, 6, 10], "other": [0, 1, 3, 4, 6, 9], "other2": 9, "other2_valu": 9, "other_new_data": 3, "other_valu": 9, "otherwis": [0, 9], "our": [0, 1, 3, 4], "output": [2, 6, 7, 9, 10], "over": [0, 1, 3, 4, 6], "overhead": 3, "overridden": 2, "overview": 5, "own": 6, "p": [3, 4], "packag": [3, 5, 6, 8], "page": 5, "pair": [0, 1, 2, 3, 9], "par_kei": 3, "param": 1, "paramet": 0, "parent": [0, 1, 3, 4, 6, 7, 8, 9, 10], "parent_kei": [0, 8], "parent_node_kei": 2, "pars": 10, "part": [0, 3, 4], "partial": [0, 6], "particular": [0, 2, 3, 4], "particularli": [2, 4], "pass": [0, 1, 3], "path": [0, 3, 4, 7, 8], "paths_to_tre": [0, 3, 8], "pattern": [0, 2], "payload": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10], "payload_connector": 0, "perform": [0, 1, 6, 7, 10], "permit": [1, 3], "persist": 4, "perspect": [0, 2, 5, 6, 10], "philosoph": 5, "philosophi": 4, "piec": 4, "pip": [6, 10], "place": [0, 3], "point": [0, 4, 6], "pointer": [0, 6], "pop": 3, "posit": [0, 4], "possibl": [0, 4, 6], "post": [0, 5], "postord": 1, "potenti": [0, 2], "power": [1, 2, 3, 10], "pprint": 3, "practic": 4, "pre": [0, 3, 5], "pred": 0, "predic": [0, 3, 4, 7], "prefer": [0, 1, 3], "preferred_root": [0, 2, 3, 8], "present": [0, 1, 2], "pretti": [0, 3, 6, 7], "pretty_print": 2, "pretty_tre": [1, 2, 3, 8, 10], "prettytre": [0, 1, 2, 3, 8], "previou": 1, "print": [0, 1, 2, 3, 6, 7, 9, 10], "print_nod": [3, 10], "print_tre": 6, "probabl": 4, "problem": [1, 4], "proc": 0, "procedur": 0, "process": [1, 7], "produc": [4, 6], "program": [1, 7], "properti": [0, 2, 5, 6, 8, 10], "provid": [0, 1, 2, 3, 6, 7, 9, 10], "proxi": [0, 3, 6, 8], "prune": [0, 2, 3, 7, 8], "pruned_tre": 3, "purg": [0, 3, 8], "purpos": [0, 1, 3], "py": 0, "python": [3, 4, 6, 10], "q": 3, "queeliu": 2, "queri": 7, "question": 4, "quick": 6, "r": 3, "rais": [0, 2, 3, 4, 6], "random": [0, 6], "rang": [3, 4, 6], "rare": 4, "rather": [4, 10], "re": [3, 10], "reach": [0, 6], "read": 7, "readabl": [0, 1], "real": 0, "realiz": 4, "reason": 4, "recurs": [1, 3, 5, 6, 9], "refer": [0, 3, 4, 6], "reflect": [2, 10], "regener": 3, "rel": 1, "relat": [0, 1, 2, 4, 10], "relationship": [0, 2, 4], "relax": 4, "relev": 0, "remain": [0, 6], "rememb": 10, "remind": 4, "remov": [0, 2], "replac": [0, 1, 4], "replic": 0, "repositori": 2, "repres": [0, 2, 3, 6, 7, 10], "represent": [0, 1, 2, 3, 6, 9, 10], "requir": [0, 3, 10], "require_prop": 0, "respect": [0, 1, 4], "restrict": 9, "result": [1, 3, 4, 10], "result2": 3, "retriev": [0, 9], "return": [0, 1, 3, 6, 9, 10], "revert": 3, "rewrit": [0, 1], "rewritten": 1, "rid": 1, "right": [3, 4], "role": 4, "root": [0, 1, 3, 4, 6, 7, 8, 9, 10], "root1": 4, "root2": [3, 4], "root_1": 1, "root_1_1": 1, "root_1_1_1": 1, "root_1_1_2": 1, "root_2": 1, "root_2_1": 1, "root_2_1_1": 1, "root_2_1_2": 1, "root_2_2": 1, "root_2_3": 1, "root_dist": 3, "root_kei": [0, 8], "root_map": 3, "root_nam": [0, 2, 3, 8], "root_valu": 9, "rooter": 3, "rout": 2, "rule": 1, "run": 1, "sae": 3, "sai": 1, "same": [0, 1, 3, 4, 6], "satisfi": 0, "scienc": [2, 4], "seamlessli": 2, "search": [0, 5, 6], "second": 0, "see": [0, 1, 3, 7], "seek": 1, "seem": 3, "self": [0, 3, 9], "send": 1, "sens": 4, "seper": 3, "serial": 1, "set": [0, 1, 2, 3, 4, 6, 7], "share": 4, "shift": 1, "ship": 5, "should": [0, 1, 6, 10], "should_prun": 3, "show": [0, 7], "sibl": [0, 3, 7, 8], "side": 0, "signatur": 0, "similar": [1, 4], "simpl": [1, 3, 5, 6], "simpler": 1, "simplic": [1, 3], "simplif": 1, "simplifi": 1, "sinc": [0, 2, 3, 6], "sine": 0, "singl": [0, 1, 3, 7], "situat": 4, "size": [0, 3, 4, 7, 8], "small": 4, "so": [0, 1, 3, 6], "sole": 0, "solid": 10, "some": [0, 2, 3, 6], "soon": 0, "sort_kei": 3, "sourc": [0, 1, 3], "space": 4, "spacer": 0, "spec": [0, 8], "special": [0, 1, 2, 3], "specif": [0, 4, 6, 7], "specifi": [0, 3, 6, 7, 9], "src_node": 0, "standalon": 1, "standard": [0, 7], "start": [0, 5], "state": [1, 3, 4], "static": 0, "staticmethod": 0, "statist": 0, "stiill": 3, "still": [0, 1, 3, 4, 6], "stop": 0, "storag": 3, "store": [0, 4, 5, 9], "str": [0, 6, 9, 10], "strategi": 0, "strength": 6, "strict": 5, "strictest": 4, "strictli": 4, "string": [0, 3], "strong": 4, "structur": [0, 2, 3, 4, 5, 6, 7], "style": 0, "sub": [0, 1, 6], "submodul": 8, "substructur": 0, "subtre": [0, 3, 5, 6, 7, 8], "subtree_a": 10, "subtree_b": 10, "subtree_centered_at": [0, 3, 8], "subtree_info": 3, "subtree_rooted_at": [0, 3, 8], "suffix": 0, "suit": [6, 10], "sum": [1, 10], "support": [3, 6, 7], "suppos": [0, 1, 6], "system": [1, 2, 4], "t": [0, 3, 6], "take": [0, 1], "target": [0, 3], "target_format": 7, "target_typ": [0, 1, 2], "task": [1, 2], "tc": 2, "technic": 0, "techniqu": 4, "tension": 4, "term": [0, 1], "terminologi": 2, "test": 3, "text": 3, "than": [0, 1, 4, 6, 10], "thei": [0, 1, 2, 4], "them": [1, 2, 3, 6], "theoret": 5, "theseu": 5, "thi": [0, 1, 2, 3, 4, 6, 7, 10], "thing": 1, "think": 1, "thought": 4, "three": 1, "through": [0, 3, 4], "ti": 4, "time": 4, "to_dict": [0, 1, 3, 8, 10], "too": [0, 3], "tool": [5, 6, 10], "top": [1, 2], "total": 9, "tradit": 10, "transform": 1, "translat": 1, "transmit": 5, "travers": [0, 3, 5, 6], "treat": [0, 2], "tree": [0, 5, 6, 7, 8], "tree1": 3, "tree2": 3, "tree_convert": [1, 2, 3, 8, 10], "tree_data": 2, "tree_dict": 10, "tree_hash": [8, 10], "tree_node_root": 10, "treeconvert": [0, 1, 2, 3, 8, 10], "treehash": [0, 4, 8], "treenod": [1, 3, 5, 6, 7, 8], "treenode_2": 3, "treenode_api": 8, "treenode_dict": 3, "treenode_from_dict": 3, "treenodeapi": [0, 8], "treenodem": 3, "treeviz": 3, "tri": 0, "true": [0, 1, 3, 4, 6], "try": [0, 1, 2, 3], "turn": 4, "tutori": [2, 5], "two": [0, 1, 3, 4, 6, 7, 10], "txt": 3, "type": [0, 1, 2, 3, 4, 7, 10], "typeerror": [0, 3], "typic": [1, 4], "u": [3, 4], "undefin": [0, 5, 6], "under": [0, 2, 3, 7], "underli": [0, 2, 3, 6], "understand": [0, 5, 7], "undirect": 0, "unifi": 3, "uniqu": [0, 2, 3, 4, 6], "unless": 3, "unlik": 9, "until": 0, "up": [0, 1, 6], "us": [0, 1, 2, 3, 4, 6, 7, 9, 10], "usag": [2, 5], "util": [3, 6, 8, 10], "uuid": [0, 6, 9], "v": [3, 5], "valid": [0, 3], "valu": [0, 1, 2, 3, 4, 9, 10], "valueerror": [0, 2, 3], "var": [1, 10], "variabl": [4, 5], "variou": [0, 2, 4, 6, 7, 10], "veri": [3, 4], "versa": 3, "versatil": 2, "version": 7, "versu": 4, "vertic": 0, "vice": 3, "view": [0, 3, 6, 10], "visit": [0, 8], "visual": [3, 5, 6], "w": 3, "wa": 3, "wai": [0, 2, 3, 4, 6], "want": [0, 3, 4, 6], "we": [0, 1, 2, 3, 4, 6, 9, 10], "weak": 6, "weaker": 4, "welcom": 6, "well": [0, 1, 6], "what": [1, 4, 9], "whatev": 3, "when": [0, 1, 3, 4, 6], "where": [0, 1, 2, 3, 4, 6, 7, 9], "whether": [4, 10], "which": [0, 1, 2, 3, 4, 6, 9, 10], "while": [2, 4], "whole": [4, 10], "whose": 0, "wide": [3, 4, 6], "within": [0, 4, 6], "without": [0, 3], "word": [0, 4, 9], "work": [1, 2, 3, 4, 5, 6], "would": [0, 1, 3, 4, 6], "x": [0, 1, 3, 4, 6, 10], "y": [1, 3, 4, 10], "ye": 3, "yield": 4, "you": [0, 1, 2, 3, 6, 7, 10], "your": [0, 1, 10], "z": 1, "zero": 1}, "titles": ["AlgoTree package", "Expression Trees and Evaluation", "FlatForest", "FlatForest Notebook", "Understanding Equality in Trees and Nodes", "Welcome to AlgoTree\u2019s documentation!", "Introduction", "jt Command-Line Tool", "AlgoTree", "TreeNode", "AlgoTree: Comprehensive Tutorial"], "titleterms": {"": 5, "1": 10, "10": 10, "11": 10, "12": 10, "2": 10, "3": 10, "4": 10, "5": 10, "6": 10, "7": 10, "8": 10, "9": 10, "A": 10, "The": 4, "To": 1, "ad": 2, "advanc": 10, "algorithm": 3, "algotre": [0, 5, 8, 10], "altern": 1, "api": [6, 9, 10], "argument": 7, "attribut": 9, "background": 2, "centric": [6, 10], "child": 2, "class": 2, "collis": 4, "command": 7, "comprehens": 10, "concept": 10, "conclus": [1, 2, 3, 4, 10], "construct": 1, "content": [0, 3, 5, 10], "convers": [2, 10], "convert": [1, 2], "core": 10, "creat": 3, "cycl": 2, "data": 2, "definit": 4, "detach": 2, "detect": 2, "document": 5, "equal": 4, "error": 2, "evalu": [1, 10], "exampl": [3, 9], "explan": 4, "express": [1, 10], "extrins": 4, "featur": [6, 10], "flat_forest": 0, "flat_forest_nod": 0, "flatforest": [1, 2, 3, 10], "flatforestnod": 2, "flattre": 2, "flexibl": 10, "format": 2, "from": 3, "get": 6, "handl": [1, 2], "hash": [4, 10], "ident": 4, "indic": 5, "initi": [2, 9], "instal": 10, "intrins": 4, "introduct": [3, 6, 10], "invalid": 2, "json": 3, "jt": 7, "licens": 7, "line": 7, "manipul": [2, 10], "method": 9, "modul": 0, "node": [2, 4, 6, 10], "node_hash": 0, "notebook": 3, "object": 2, "order": 1, "output": 3, "overview": 7, "packag": 0, "parent": 2, "perspect": 4, "philosoph": 4, "post": 1, "pre": 1, "pretty_tre": 0, "properti": [4, 9], "proxi": 2, "purg": 2, "recurs": 10, "refer": 2, "root": 2, "self": 1, "ship": 4, "simpl": 10, "start": 6, "store": 3, "strict": 4, "structur": [1, 9, 10], "sub": 2, "submodul": 0, "subtre": 10, "tabl": [3, 5, 10], "text": 2, "theoret": 2, "theseu": 4, "tool": 7, "transmit": 3, "travers": [1, 10], "tree": [1, 2, 3, 4, 9, 10], "tree_convert": 0, "tree_hash": 0, "treenod": [0, 2, 9, 10], "treenode_api": 0, "tutori": 10, "undefin": 1, "understand": 4, "usag": [7, 9], "util": 0, "v": 1, "valid": 2, "variabl": 1, "view": 2, "visual": [1, 2, 10], "wai": 1, "welcom": 5, "work": 10}})