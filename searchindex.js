Search.setIndex({"alltitles":{"1. Introduction":[[16,"introduction"]],"10. Working with Subtrees":[[16,"working-with-subtrees"]],"11. Expression Trees and Evaluation":[[16,"expression-trees-and-evaluation"]],"12. Conclusion":[[16,"conclusion"]],"2. Installation":[[16,"installation"]],"3. Core Concepts":[[16,"core-concepts"]],"4. FlatForest: A Flexible Tree Structure":[[16,"flatforest-a-flexible-tree-structure"]],"5. TreeNode: A Simple Recursive Tree Structure":[[16,"treenode-a-simple-recursive-tree-structure"]],"6. Tree Traversal and Manipulation":[[16,"tree-traversal-and-manipulation"]],"7. Tree Visualization":[[16,"tree-visualization"]],"8. Tree Conversion":[[16,"tree-conversion"]],"9. Advanced Features":[[16,"advanced-features"]],"API Reference":[[2,null]],"Adding a Child Node":[[5,"adding-a-child-node"]],"Additional Closed Transformations":[[14,"additional-closed-transformations"]],"Advanced Examples":[[11,"advanced-examples"]],"Advanced Matching":[[13,"advanced-matching"]],"Advanced Path Features":[[13,"advanced-path-features"]],"Advanced Patterns":[[3,"advanced-patterns"]],"AlgoTree":[[12,null]],"AlgoTree Cookbook":[[3,null]],"AlgoTree Fluent API Guide":[[7,null]],"AlgoTree package":[[0,null]],"AlgoTree.dsl module":[[0,"module-AlgoTree.dsl"]],"AlgoTree.exporters module":[[0,"module-AlgoTree.exporters"]],"AlgoTree.flat_forest module":[[0,"module-AlgoTree.flat_forest"]],"AlgoTree.flat_forest_node module":[[0,"module-AlgoTree.flat_forest_node"]],"AlgoTree.fluent module":[[0,"module-AlgoTree.fluent"]],"AlgoTree.integrations package":[[1,null]],"AlgoTree.integrations.databases module":[[1,"algotree-integrations-databases-module"]],"AlgoTree.integrations.jupyter module":[[1,"algotree-integrations-jupyter-module"]],"AlgoTree.integrations.langchain module":[[1,"algotree-integrations-langchain-module"]],"AlgoTree.integrations.mcp module":[[1,"algotree-integrations-mcp-module"]],"AlgoTree.node module":[[0,"module-AlgoTree.node"]],"AlgoTree.node_hasher module":[[0,"module-AlgoTree.node_hasher"]],"AlgoTree.pattern_matcher module":[[0,"module-AlgoTree.pattern_matcher"]],"AlgoTree.pretty_tree module":[[0,"module-AlgoTree.pretty_tree"]],"AlgoTree.serialization module":[[0,"module-AlgoTree.serialization"]],"AlgoTree.tree_converter module":[[0,"module-AlgoTree.tree_converter"]],"AlgoTree.tree_hasher module":[[0,"module-AlgoTree.tree_hasher"]],"AlgoTree.tree_shaper module":[[0,"module-AlgoTree.tree_shaper"]],"AlgoTree.tree_transformer module":[[0,"module-AlgoTree.tree_transformer"]],"AlgoTree.treenode module":[[0,"module-AlgoTree.treenode"]],"AlgoTree.treenode_api module":[[0,"module-AlgoTree.treenode_api"]],"AlgoTree.utils module":[[0,"module-AlgoTree.utils"]],"AlgoTree: Comprehensive Tutorial":[[16,null]],"Algorithm Examples":[[6,"algorithm-examples"]],"Alternative Way To Construct Expression Trees":[[4,"alternative-way-to-construct-expression-trees"]],"Analyzing Tree Structure":[[13,"analyzing-tree-structure"]],"Ancestors and Descendants":[[11,"ancestors-and-descendants"]],"Attributes and Methods":[[15,"attributes-and-methods"]],"Auto-detection":[[7,"auto-detection"]],"Available Operations":[[7,"available-operations"]],"Basic Dot Paths":[[13,"basic-dot-paths"]],"Basic Statistics":[[11,"basic-statistics"]],"Basic Usage":[[11,"basic-usage"],[13,"basic-usage"]],"Best Practices":[[7,"best-practices"]],"Building a File System Tree":[[3,"building-a-file-system-tree"]],"Building an Organization Chart":[[3,"building-an-organization-chart"]],"Chaining Transformations":[[14,"chaining-transformations"]],"Children and Parents":[[11,"children-and-parents"]],"Closed Transformations (Tree \u2192 Tree)":[[2,"closed-transformations-tree-tree"]],"Closed Transformations (dotmod family)":[[14,"closed-transformations-dotmod-family"]],"Command-Line Usage":[[13,"command-line-usage"]],"Comparing Trees":[[3,"comparing-trees"]],"Comparison with v0.8":[[11,"comparison-with-v0-8"]],"Compatibility":[[7,"compatibility"]],"Complete Examples":[[7,"complete-examples"]],"Complex Queries":[[11,"complex-queries"]],"Conclusion":[[4,"conclusion"],[5,"conclusion"],[6,"conclusion"],[8,"conclusion"]],"Conversion Functions":[[14,"conversion-functions"]],"Converting to FlatForest":[[4,"converting-to-flatforest"]],"Converting to TreeNode":[[5,"converting-to-treenode"]],"Core Classes":[[2,"core-classes"]],"Creating a FlatForest":[[6,"creating-a-flatforest"]],"Creating a FlatForest from a JSON":[[6,"creating-a-flatforest-from-a-json"]],"Creating from DSL":[[3,"creating-from-dsl"]],"Custom Filter Expressions":[[11,"custom-filter-expressions"]],"Custom Predicates":[[13,"custom-predicates"]],"Cycle Detection":[[5,"cycle-detection"]],"DSL Format (Indent-based)":[[11,"dsl-format-indent-based"]],"DSL Format (S-expression)":[[11,"dsl-format-s-expression"]],"DSL Format (Visual)":[[11,"dsl-format-visual"]],"DSL Output":[[11,"dsl-output"]],"DSL to JSON":[[11,"dsl-to-json"]],"Data Extraction":[[14,"data-extraction"]],"Detaching and Purging Nodes":[[5,"detaching-and-purging-nodes"]],"Dictionary Patterns":[[13,"dictionary-patterns"]],"Dot Notation (dotsuite-inspired)":[[13,"dot-notation-dotsuite-inspired"]],"Dot Notation and Escaping":[[14,"dot-notation-and-escaping"]],"Efficient Tree Operations":[[3,"efficient-tree-operations"]],"Equality in Trees and Nodes":[[8,"equality-in-trees-and-nodes"]],"Equality: Intrinsic and Extrinsic Properties":[[8,"equality-intrinsic-and-extrinsic-properties"]],"Example 1: Building and Analyzing an Org Chart":[[7,"example-1-building-and-analyzing-an-org-chart"]],"Example 2: File System Processing":[[7,"example-2-file-system-processing"]],"Example 3: Data Pipeline":[[7,"example-3-data-pipeline"]],"Example Usage":[[15,"example-usage"]],"Explanation of Hash Collisions":[[8,"explanation-of-hash-collisions"]],"Export Functions":[[2,"export-functions"]],"Export and Visualization Patterns":[[3,"export-and-visualization-patterns"]],"Exporting to Different Formats":[[3,"exporting-to-different-formats"]],"Expression Tree Evaluator":[[4,"expression-tree-evaluator"]],"Expression Trees and Evaluation":[[4,null]],"Features":[[10,"features"]],"Filter Expressions":[[13,"filter-expressions"]],"Filter by Level":[[11,"filter-by-level"]],"Filter by Name":[[11,"filter-by-name"]],"Filtering Trees":[[3,"filtering-trees"]],"Filtering and Queries":[[11,"filtering-and-queries"]],"Finding Nodes":[[3,"finding-nodes"]],"Finding Patterns":[[3,"finding-patterns"]],"Finding Test Files":[[13,"finding-test-files"]],"FlatForest":[[5,null]],"FlatForest Class":[[5,"flatforest-class"]],"FlatForest Notebook":[[6,null]],"FlatForestNode Proxies":[[5,"flatforestnode-proxies"]],"Fluent API Integration":[[13,"fluent-api-integration"]],"FluentNode":[[2,"fluentnode"]],"FluentNode - Chainable Operations":[[7,"fluentnode-chainable-operations"]],"Format Conversion":[[11,"format-conversion"]],"Get Specific Node":[[11,"get-specific-node"]],"Getting Started":[[10,"getting-started"]],"Getting Started:":[[9,null]],"Handling Errors":[[5,"handling-errors"]],"Handling Undefined Variables":[[4,"handling-undefined-variables"]],"Hashing and Equality":[[8,"hashing-and-equality"]],"Identity: The Strict Definition":[[8,"identity-the-strict-definition"]],"In-Place vs Copy Operations":[[14,"in-place-vs-copy-operations"]],"Indent Format (YAML-like)":[[7,"indent-format-yaml-like"]],"Indices and tables":[[9,"indices-and-tables"]],"Initialization":[[15,"initialization"]],"Initializing a FlatTree":[[5,"initializing-a-flattree"]],"Input Formats":[[11,"input-formats"]],"Installation":[[11,"installation"]],"Introduction":[[6,"introduction"],[10,null]],"Invalid Parent Reference":[[5,"invalid-parent-reference"]],"JSON Format":[[11,"json-format"]],"JSON Output (default)":[[11,"json-output-default"]],"JSON to DSL":[[11,"json-to-dsl"]],"Key Features":[[7,"key-features"]],"Lazy Tree Loading":[[3,"lazy-tree-loading"]],"Leaf Nodes":[[11,"leaf-nodes"]],"Manipulating the Tree":[[5,"manipulating-the-tree"]],"Map Operations":[[11,"map-operations"]],"Match Types":[[13,"match-types"]],"Merging Trees":[[3,"merging-trees"]],"Methods":[[15,"methods"]],"Migration from Dict-based API":[[7,"migration-from-dict-based-api"]],"Migration from v0.8":[[11,"migration-from-v0-8"]],"Modern Node Class":[[7,"modern-node-class"]],"Module contents":[[0,"module-AlgoTree"],[1,"module-contents"]],"Navigation Methods":[[7,"navigation-methods"]],"New Way (Node class)":[[7,"new-way-node-class"]],"Next Steps":[[7,"next-steps"]],"Node":[[2,"node"]],"Node Hashing":[[16,"node-hashing"]],"Node-Centric API":[[10,"node-centric-api"],[16,"node-centric-api"]],"Old Way (Dict-based)":[[7,"old-way-dict-based"]],"Open Transformations (Tree \u2192 Any)":[[2,"open-transformations-tree-any"]],"Open Transformations (dotpipe family)":[[14,"open-transformations-dotpipe-family"]],"Output":[[6,"output"]],"Output Formats":[[11,"output-formats"]],"Path Operations":[[3,"path-operations"]],"Pattern":[[2,"pattern"]],"Pattern Functions":[[2,"pattern-functions"]],"Pattern Matching":[[2,"pattern-matching"],[13,null]],"Pattern Matching Reference":[[14,"pattern-matching-reference"]],"Pattern Objects":[[13,"pattern-objects"]],"Pattern Replacement":[[13,"pattern-replacement"]],"Pattern Syntax":[[13,"pattern-syntax"]],"PatternMatcher":[[2,"patternmatcher"]],"Performance Considerations":[[7,"performance-considerations"],[13,"performance-considerations"]],"Performance Patterns":[[3,"performance-patterns"]],"Philosophical Perspective: The Ship of Theseus":[[8,"philosophical-perspective-the-ship-of-theseus"]],"Pipeline Processing":[[11,"pipeline-processing"]],"Post-order Traversal":[[4,"post-order-traversal"]],"Post-order vs.\u00a0Pre-order Traversal":[[4,"post-order-vs-pre-order-traversal"]],"Pretty Print Any Format":[[11,"pretty-print-any-format"]],"Pretty Printing":[[3,"pretty-printing"]],"Pretty Tree Output":[[11,"pretty-tree-output"]],"Properties":[[15,"properties"]],"Proxy Objects and Views":[[5,"proxy-objects-and-views"]],"Prune Operations":[[11,"prune-operations"]],"Pruning Trees":[[3,"pruning-trees"]],"Purging Detached Nodes":[[5,"purging-detached-nodes"]],"Real-World Examples":[[13,"real-world-examples"]],"Refactoring Components":[[13,"refactoring-components"]],"Root Node":[[5,"root-node"]],"S-Expression Format":[[7,"s-expression-format"]],"See Also":[[3,"see-also"],[11,"see-also"],[13,"see-also"]],"Self-Evaluating Trees":[[4,"self-evaluating-trees"]],"Specialized Conversions":[[14,"specialized-conversions"]],"Statistics and Metrics":[[3,"statistics-and-metrics"]],"Storing and Transmitting Trees":[[6,"storing-and-transmitting-trees"]],"String Patterns":[[13,"string-patterns"]],"Submodules":[[0,"submodules"],[1,"submodules"]],"Table of Contents":[[6,"table-of-contents"],[7,"table-of-contents"],[16,"table-of-contents"]],"Text Visualization":[[5,"text-visualization"]],"Theoretical Background":[[5,"theoretical-background"]],"Tips and Tricks":[[11,"tips-and-tricks"]],"Tools & Reference:":[[9,null]],"Traditional API:":[[9,null]],"Transforming Nodes":[[3,"transforming-nodes"]],"Tree API":[[15,"tree-api"]],"Tree Analysis":[[11,"tree-analysis"]],"Tree Analysis Patterns":[[3,"tree-analysis-patterns"]],"Tree Building from Multiple Sources":[[11,"tree-building-from-multiple-sources"]],"Tree Comparison Patterns":[[3,"tree-comparison-patterns"]],"Tree Construction Patterns":[[3,"tree-construction-patterns"]],"Tree Conversions":[[5,"tree-conversions"]],"Tree DSL - Multiple Format Support":[[7,"tree-dsl-multiple-format-support"]],"Tree DSL Parsing":[[2,"tree-dsl-parsing"]],"Tree Data Format":[[5,"tree-data-format"]],"Tree Generators":[[3,"tree-generators"]],"Tree Navigation":[[11,"tree-navigation"]],"Tree Navigation Patterns":[[3,"tree-navigation-patterns"]],"Tree Node Concept":[[16,"tree-node-concept"]],"Tree Transformation Patterns":[[3,"tree-transformation-patterns"]],"Tree Transformations":[[11,"tree-transformations"],[14,null]],"Tree Visitors":[[3,"tree-visitors"]],"TreeBuilder":[[2,"treebuilder"]],"TreeBuilder - Fluent Tree Construction":[[7,"treebuilder-fluent-tree-construction"]],"TreeNode":[[15,null]],"TreeNode Structure":[[15,"treenode-structure"]],"Understanding Equality in Trees and Nodes":[[8,null]],"Validating the Tree":[[5,"validating-the-tree"]],"Viewing Sub-Trees":[[5,"viewing-sub-trees"]],"Visual Format":[[7,"visual-format"]],"Visualization":[[2,"visualization"]],"Visualizing the Tree":[[5,"visualizing-the-tree"]],"Visualizing the Tree Structure":[[4,"visualizing-the-tree-structure"]],"Welcome to AlgoTree\u2019s documentation!":[[9,null]],"Wildcards":[[13,"wildcards"]],"dotannotate":[[14,"dotannotate"]],"dotmap":[[14,"dotmap"]],"dotmerge":[[14,"dotmerge"]],"dotmod":[[14,"dotmod"]],"dotpipe":[[14,"dotpipe"]],"dotprune":[[14,"dotprune"]],"dotsuite Philosophy":[[13,"dotsuite-philosophy"]],"dotvalidate":[[14,"dotvalidate"]],"jt Command-Line Tool":[[11,null]]},"docnames":["AlgoTree","AlgoTree.integrations","api_reference","cookbook","expr_trees_nb","flat_forest","flat_forest_nb","fluent_api","identity","index","introduction","jt","modules","pattern_matching","transformations","treenode","tutorial"],"envversion":{"sphinx":65,"sphinx.domains.c":3,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":9,"sphinx.domains.index":1,"sphinx.domains.javascript":3,"sphinx.domains.math":2,"sphinx.domains.python":4,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,"sphinx.ext.viewcode":1},"filenames":["AlgoTree.rst","AlgoTree.integrations.rst","api_reference.rst","cookbook.rst","expr_trees_nb.rst","flat_forest.rst","flat_forest_nb.rst","fluent_api.rst","identity.rst","index.rst","introduction.rst","jt.rst","modules.rst","pattern_matching.rst","transformations.rst","treenode.rst","tutorial.rst"],"indexentries":{"add_child() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.add_child",false]],"add_child() (algotree.flat_forest_node.flatforestnode method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.add_child",false]],"add_child() (algotree.node method)":[[0,"AlgoTree.Node.add_child",false],[2,"AlgoTree.Node.add_child",false]],"add_child() (algotree.node.node method)":[[0,"AlgoTree.node.Node.add_child",false]],"add_child() (algotree.treenode.treenode method)":[[0,"AlgoTree.treenode.TreeNode.add_child",false]],"algotree":[[0,"module-AlgoTree",false]],"algotree.dsl":[[0,"module-AlgoTree.dsl",false]],"algotree.exporters":[[0,"module-AlgoTree.exporters",false]],"algotree.flat_forest":[[0,"module-AlgoTree.flat_forest",false]],"algotree.flat_forest_node":[[0,"module-AlgoTree.flat_forest_node",false]],"algotree.fluent":[[0,"module-AlgoTree.fluent",false]],"algotree.node":[[0,"module-AlgoTree.node",false]],"algotree.node_hasher":[[0,"module-AlgoTree.node_hasher",false]],"algotree.pattern_matcher":[[0,"module-AlgoTree.pattern_matcher",false]],"algotree.pretty_tree":[[0,"module-AlgoTree.pretty_tree",false]],"algotree.serialization":[[0,"module-AlgoTree.serialization",false]],"algotree.tree_converter":[[0,"module-AlgoTree.tree_converter",false]],"algotree.tree_hasher":[[0,"module-AlgoTree.tree_hasher",false]],"algotree.tree_shaper":[[0,"module-AlgoTree.tree_shaper",false]],"algotree.tree_transformer":[[0,"module-AlgoTree.tree_transformer",false]],"algotree.treenode":[[0,"module-AlgoTree.treenode",false]],"algotree.treenode_api":[[0,"module-AlgoTree.treenode_api",false]],"algotree.utils":[[0,"module-AlgoTree.utils",false]],"ancestors() (in module algotree.utils)":[[0,"AlgoTree.utils.ancestors",false]],"as_tree() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.as_tree",false]],"attributes (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.attributes",false],[2,"AlgoTree.Pattern.attributes",false]],"attributes (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.attributes",false]],"average_distance() (in module algotree.utils)":[[0,"AlgoTree.utils.average_distance",false]],"breadth_first() (in module algotree.utils)":[[0,"AlgoTree.utils.breadth_first",false]],"breadth_first_undirected() (in module algotree.utils)":[[0,"AlgoTree.utils.breadth_first_undirected",false]],"build() (algotree.fluent.treebuilder method)":[[0,"AlgoTree.fluent.TreeBuilder.build",false]],"build() (algotree.treebuilder method)":[[0,"AlgoTree.TreeBuilder.build",false],[2,"AlgoTree.TreeBuilder.build",false]],"check() (algotree.treenode_api.treenodeapi static method)":[[0,"AlgoTree.treenode_api.TreeNodeApi.check",false]],"check_valid() (algotree.flat_forest.flatforest static method)":[[0,"AlgoTree.flat_forest.FlatForest.check_valid",false]],"child() (algotree.fluent.treebuilder method)":[[0,"AlgoTree.fluent.TreeBuilder.child",false]],"child() (algotree.treebuilder method)":[[0,"AlgoTree.TreeBuilder.child",false],[2,"AlgoTree.TreeBuilder.child",false]],"child_names() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.child_names",false]],"children (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.children",false]],"children (algotree.flat_forest_node.flatforestnode property)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.children",false]],"children (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.children",false],[2,"AlgoTree.Pattern.children",false]],"children (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.children",false]],"children() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.children",false]],"children() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.children",false],[2,"AlgoTree.FluentNode.children",false]],"clone() (algotree.flat_forest_node.flatforestnode method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.clone",false]],"clone() (algotree.node method)":[[0,"AlgoTree.Node.clone",false],[2,"AlgoTree.Node.clone",false]],"clone() (algotree.node.node method)":[[0,"AlgoTree.node.Node.clone",false]],"clone() (algotree.treenode.treenode method)":[[0,"AlgoTree.treenode.TreeNode.clone",false]],"contains() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.contains",false]],"contains() (algotree.flat_forest_node.flatforestnode method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.contains",false]],"convert() (algotree.tree_converter.treeconverter static method)":[[0,"AlgoTree.tree_converter.TreeConverter.convert",false]],"copy_under() (algotree.tree_converter.treeconverter static method)":[[0,"AlgoTree.tree_converter.TreeConverter.copy_under",false]],"count() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.count",false]],"count() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.count",false],[2,"AlgoTree.FluentNode.count",false]],"default_extract() (algotree.tree_converter.treeconverter static method)":[[0,"AlgoTree.tree_converter.TreeConverter.default_extract",false]],"default_node_name() (algotree.tree_converter.treeconverter static method)":[[0,"AlgoTree.tree_converter.TreeConverter.default_node_name",false]],"default_style (algotree.pretty_tree.prettytree attribute)":[[0,"AlgoTree.pretty_tree.PrettyTree.default_style",false]],"default_style (algotree.prettytree attribute)":[[0,"AlgoTree.PrettyTree.default_style",false],[2,"AlgoTree.PrettyTree.default_style",false]],"depth() (in module algotree.utils)":[[0,"AlgoTree.utils.depth",false]],"descendants() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.descendants",false]],"descendants() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.descendants",false],[2,"AlgoTree.FluentNode.descendants",false]],"descendants() (in module algotree.utils)":[[0,"AlgoTree.utils.descendants",false]],"detach() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.detach",false]],"detach() (algotree.flat_forest_node.flatforestnode method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.detach",false]],"detached (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.detached",false]],"detached_key (algotree.flat_forest.flatforest attribute)":[[0,"AlgoTree.flat_forest.FlatForest.DETACHED_KEY",false]],"distance() (in module algotree.utils)":[[0,"AlgoTree.utils.distance",false]],"dotannotate() (in module algotree)":[[0,"AlgoTree.dotannotate",false],[2,"AlgoTree.dotannotate",false]],"dotannotate() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotannotate",false]],"dotcollect() (in module algotree)":[[0,"AlgoTree.dotcollect",false],[2,"AlgoTree.dotcollect",false]],"dotcollect() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.dotcollect",false]],"dotcount() (in module algotree)":[[0,"AlgoTree.dotcount",false],[2,"AlgoTree.dotcount",false]],"dotcount() (in module algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.dotcount",false]],"dotexists() (in module algotree)":[[0,"AlgoTree.dotexists",false],[2,"AlgoTree.dotexists",false]],"dotexists() (in module algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.dotexists",false]],"dotextract() (in module algotree)":[[0,"AlgoTree.dotextract",false],[2,"AlgoTree.dotextract",false]],"dotextract() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.dotextract",false]],"dotfilter() (in module algotree)":[[0,"AlgoTree.dotfilter",false],[2,"AlgoTree.dotfilter",false]],"dotfilter() (in module algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.dotfilter",false]],"dotflatten() (in module algotree)":[[0,"AlgoTree.dotflatten",false],[2,"AlgoTree.dotflatten",false]],"dotflatten() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotflatten",false]],"dotgraft() (in module algotree)":[[0,"AlgoTree.dotgraft",false],[2,"AlgoTree.dotgraft",false]],"dotgraft() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotgraft",false]],"dotgroup() (in module algotree)":[[0,"AlgoTree.dotgroup",false],[2,"AlgoTree.dotgroup",false]],"dotgroup() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.dotgroup",false]],"dotmap() (in module algotree)":[[0,"AlgoTree.dotmap",false],[2,"AlgoTree.dotmap",false]],"dotmap() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotmap",false]],"dotmatch() (in module algotree)":[[0,"AlgoTree.dotmatch",false],[2,"AlgoTree.dotmatch",false]],"dotmatch() (in module algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.dotmatch",false]],"dotmerge() (in module algotree)":[[0,"AlgoTree.dotmerge",false],[2,"AlgoTree.dotmerge",false]],"dotmerge() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotmerge",false]],"dotmod() (in module algotree)":[[0,"AlgoTree.dotmod",false],[2,"AlgoTree.dotmod",false]],"dotmod() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotmod",false]],"dotnormalize() (in module algotree)":[[0,"AlgoTree.dotnormalize",false],[2,"AlgoTree.dotnormalize",false]],"dotnormalize() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotnormalize",false]],"dotpartition() (in module algotree)":[[0,"AlgoTree.dotpartition",false],[2,"AlgoTree.dotpartition",false]],"dotpartition() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.dotpartition",false]],"dotpipe() (in module algotree)":[[0,"AlgoTree.dotpipe",false],[2,"AlgoTree.dotpipe",false]],"dotpipe() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.dotpipe",false]],"dotpluck() (in module algotree)":[[0,"AlgoTree.dotpluck",false],[2,"AlgoTree.dotpluck",false]],"dotpluck() (in module algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.dotpluck",false]],"dotproject() (in module algotree)":[[0,"AlgoTree.dotproject",false],[2,"AlgoTree.dotproject",false]],"dotproject() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.dotproject",false]],"dotprune() (in module algotree)":[[0,"AlgoTree.dotprune",false],[2,"AlgoTree.dotprune",false]],"dotprune() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotprune",false]],"dotreduce() (in module algotree)":[[0,"AlgoTree.dotreduce",false],[2,"AlgoTree.dotreduce",false]],"dotreduce() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotreduce",false]],"dotsplit() (in module algotree)":[[0,"AlgoTree.dotsplit",false],[2,"AlgoTree.dotsplit",false]],"dotsplit() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotsplit",false]],"dotvalidate() (in module algotree)":[[0,"AlgoTree.dotvalidate",false],[2,"AlgoTree.dotvalidate",false]],"dotvalidate() (in module algotree.tree_transformer)":[[0,"AlgoTree.tree_transformer.dotvalidate",false]],"dumps() (in module algotree)":[[0,"AlgoTree.dumps",false]],"dumps() (in module algotree.serialization)":[[0,"AlgoTree.serialization.dumps",false]],"each() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.each",false]],"each() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.each",false],[2,"AlgoTree.FluentNode.each",false]],"exact (algotree.matchtype attribute)":[[0,"AlgoTree.MatchType.EXACT",false]],"exact (algotree.pattern_matcher.matchtype attribute)":[[0,"AlgoTree.pattern_matcher.MatchType.EXACT",false]],"export_tree() (in module algotree)":[[0,"AlgoTree.export_tree",false],[2,"AlgoTree.export_tree",false]],"export_tree() (in module algotree.exporters)":[[0,"AlgoTree.exporters.export_tree",false]],"filter() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.filter",false]],"filter() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.filter",false],[2,"AlgoTree.FluentNode.filter",false]],"find() (algotree.node method)":[[0,"AlgoTree.Node.find",false],[2,"AlgoTree.Node.find",false]],"find() (algotree.node.node method)":[[0,"AlgoTree.node.Node.find",false]],"find_all() (algotree.node method)":[[0,"AlgoTree.Node.find_all",false],[2,"AlgoTree.Node.find_all",false]],"find_all() (algotree.node.node method)":[[0,"AlgoTree.node.Node.find_all",false]],"find_all() (algotree.pattern_matcher.patternmatcher method)":[[0,"AlgoTree.pattern_matcher.PatternMatcher.find_all",false]],"find_all() (algotree.patternmatcher method)":[[0,"AlgoTree.PatternMatcher.find_all",false],[2,"AlgoTree.PatternMatcher.find_all",false]],"find_first() (algotree.pattern_matcher.patternmatcher method)":[[0,"AlgoTree.pattern_matcher.PatternMatcher.find_first",false]],"find_first() (algotree.patternmatcher method)":[[0,"AlgoTree.PatternMatcher.find_first",false],[2,"AlgoTree.PatternMatcher.find_first",false]],"find_node() (in module algotree.utils)":[[0,"AlgoTree.utils.find_node",false]],"find_nodes() (in module algotree.utils)":[[0,"AlgoTree.utils.find_nodes",false]],"find_path() (in module algotree.utils)":[[0,"AlgoTree.utils.find_path",false]],"first() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.first",false]],"first() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.first",false],[2,"AlgoTree.FluentNode.first",false]],"flatforest (class in algotree.flat_forest)":[[0,"AlgoTree.flat_forest.FlatForest",false]],"flatforestnode (class in algotree.flat_forest_node)":[[0,"AlgoTree.flat_forest_node.FlatForestNode",false]],"fluentnode (class in algotree)":[[0,"AlgoTree.FluentNode",false],[2,"AlgoTree.FluentNode",false]],"fluentnode (class in algotree.fluent)":[[0,"AlgoTree.fluent.FluentNode",false]],"forest (algotree.flat_forest_node.flatforestnode property)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.forest",false]],"from_dict() (algotree.node class method)":[[0,"AlgoTree.Node.from_dict",false],[2,"AlgoTree.Node.from_dict",false]],"from_dict() (algotree.node.node class method)":[[0,"AlgoTree.node.Node.from_dict",false]],"from_dict() (algotree.pattern static method)":[[0,"AlgoTree.Pattern.from_dict",false],[2,"AlgoTree.Pattern.from_dict",false]],"from_dict() (algotree.pattern_matcher.pattern static method)":[[0,"AlgoTree.pattern_matcher.Pattern.from_dict",false]],"from_dict() (algotree.treenode.treenode static method)":[[0,"AlgoTree.treenode.TreeNode.from_dict",false]],"from_parquet() (in module algotree.serialization)":[[0,"AlgoTree.serialization.from_parquet",false]],"from_pickle() (in module algotree.serialization)":[[0,"AlgoTree.serialization.from_pickle",false]],"from_string() (algotree.pattern static method)":[[0,"AlgoTree.Pattern.from_string",false],[2,"AlgoTree.Pattern.from_string",false]],"from_string() (algotree.pattern_matcher.pattern static method)":[[0,"AlgoTree.pattern_matcher.Pattern.from_string",false]],"get_path() (algotree.node method)":[[0,"AlgoTree.Node.get_path",false],[2,"AlgoTree.Node.get_path",false]],"get_path() (algotree.node.node method)":[[0,"AlgoTree.node.Node.get_path",false]],"height() (in module algotree.utils)":[[0,"AlgoTree.utils.height",false]],"interior_node_names() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.interior_node_names",false]],"is_deep_wildcard (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.is_deep_wildcard",false],[2,"AlgoTree.Pattern.is_deep_wildcard",false]],"is_deep_wildcard (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.is_deep_wildcard",false]],"is_internal() (in module algotree.utils)":[[0,"AlgoTree.utils.is_internal",false]],"is_isomorphic() (in module algotree.utils)":[[0,"AlgoTree.utils.is_isomorphic",false]],"is_leaf (algotree.node property)":[[0,"AlgoTree.Node.is_leaf",false],[2,"AlgoTree.Node.is_leaf",false]],"is_leaf (algotree.node.node property)":[[0,"AlgoTree.node.Node.is_leaf",false]],"is_leaf() (in module algotree.utils)":[[0,"AlgoTree.utils.is_leaf",false]],"is_root (algotree.node property)":[[0,"AlgoTree.Node.is_root",false],[2,"AlgoTree.Node.is_root",false]],"is_root (algotree.node.node property)":[[0,"AlgoTree.node.Node.is_root",false]],"is_root() (in module algotree.utils)":[[0,"AlgoTree.utils.is_root",false]],"is_valid() (algotree.flat_forest.flatforest static method)":[[0,"AlgoTree.flat_forest.FlatForest.is_valid",false]],"is_valid() (algotree.treenode.treenode static method)":[[0,"AlgoTree.treenode.TreeNode.is_valid",false]],"is_valid() (algotree.treenode_api.treenodeapi static method)":[[0,"AlgoTree.treenode_api.TreeNodeApi.is_valid",false]],"is_wildcard (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.is_wildcard",false],[2,"AlgoTree.Pattern.is_wildcard",false]],"is_wildcard (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.is_wildcard",false]],"isomorphic() (algotree.tree_hasher.treehasher static method)":[[0,"AlgoTree.tree_hasher.TreeHasher.isomorphic",false]],"iter_nodes() (in module algotree.serialization)":[[0,"AlgoTree.serialization.iter_nodes",false]],"lca() (in module algotree.utils)":[[0,"AlgoTree.utils.lca",false]],"leaves() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.leaves",false]],"leaves() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.leaves",false],[2,"AlgoTree.FluentNode.leaves",false]],"leaves() (in module algotree.utils)":[[0,"AlgoTree.utils.leaves",false]],"level (algotree.node property)":[[0,"AlgoTree.Node.level",false],[2,"AlgoTree.Node.level",false]],"level (algotree.node.node property)":[[0,"AlgoTree.node.Node.level",false]],"load() (in module algotree)":[[0,"AlgoTree.load",false]],"load() (in module algotree.serialization)":[[0,"AlgoTree.serialization.load",false]],"loads() (in module algotree)":[[0,"AlgoTree.loads",false]],"loads() (in module algotree.serialization)":[[0,"AlgoTree.serialization.loads",false]],"logical_root_names() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.logical_root_names",false]],"map() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.map",false]],"map() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.map",false],[2,"AlgoTree.FluentNode.map",false]],"map() (in module algotree.utils)":[[0,"AlgoTree.utils.map",false]],"mark() (algotree.pretty_tree.prettytree static method)":[[0,"AlgoTree.pretty_tree.PrettyTree.mark",false]],"mark() (algotree.prettytree static method)":[[0,"AlgoTree.PrettyTree.mark",false],[2,"AlgoTree.PrettyTree.mark",false]],"match() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.match",false]],"match() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.match",false],[2,"AlgoTree.FluentNode.match",false]],"match() (algotree.pattern_matcher.patternmatcher method)":[[0,"AlgoTree.pattern_matcher.PatternMatcher.match",false]],"match() (algotree.patternmatcher method)":[[0,"AlgoTree.PatternMatcher.match",false],[2,"AlgoTree.PatternMatcher.match",false]],"matchtype (class in algotree)":[[0,"AlgoTree.MatchType",false]],"matchtype (class in algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.MatchType",false]],"max_children (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.max_children",false],[2,"AlgoTree.Pattern.max_children",false]],"max_children (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.max_children",false]],"min_children (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.min_children",false],[2,"AlgoTree.Pattern.min_children",false]],"min_children (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.min_children",false]],"missing() (algotree.treenode_api.treenodeapi static method)":[[0,"AlgoTree.treenode_api.TreeNodeApi.missing",false]],"module":[[0,"module-AlgoTree",false],[0,"module-AlgoTree.dsl",false],[0,"module-AlgoTree.exporters",false],[0,"module-AlgoTree.flat_forest",false],[0,"module-AlgoTree.flat_forest_node",false],[0,"module-AlgoTree.fluent",false],[0,"module-AlgoTree.node",false],[0,"module-AlgoTree.node_hasher",false],[0,"module-AlgoTree.pattern_matcher",false],[0,"module-AlgoTree.pretty_tree",false],[0,"module-AlgoTree.serialization",false],[0,"module-AlgoTree.tree_converter",false],[0,"module-AlgoTree.tree_hasher",false],[0,"module-AlgoTree.tree_shaper",false],[0,"module-AlgoTree.tree_transformer",false],[0,"module-AlgoTree.treenode",false],[0,"module-AlgoTree.treenode_api",false],[0,"module-AlgoTree.utils",false]],"name (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.name",false]],"name (algotree.flat_forest_node.flatforestnode property)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.name",false]],"name (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.name",false],[2,"AlgoTree.Pattern.name",false]],"name (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.name",false]],"name() (algotree.node_hasher.nodehasher static method)":[[0,"AlgoTree.node_hasher.NodeHasher.name",false]],"node (class in algotree)":[[0,"AlgoTree.Node",false],[2,"AlgoTree.Node",false]],"node (class in algotree.node)":[[0,"AlgoTree.node.Node",false]],"node() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.node",false]],"node() (algotree.flat_forest_node.flatforestnode method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.node",false]],"node() (algotree.node_hasher.nodehasher static method)":[[0,"AlgoTree.node_hasher.NodeHasher.node",false]],"node() (algotree.treenode.treenode method)":[[0,"AlgoTree.treenode.TreeNode.node",false]],"node_names() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.node_names",false]],"node_stats() (in module algotree.utils)":[[0,"AlgoTree.utils.node_stats",false]],"node_to_leaf_paths() (in module algotree.utils)":[[0,"AlgoTree.utils.node_to_leaf_paths",false]],"nodehasher (class in algotree.node_hasher)":[[0,"AlgoTree.node_hasher.NodeHasher",false]],"nodes() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.nodes",false]],"nodes() (algotree.treenode.treenode method)":[[0,"AlgoTree.treenode.TreeNode.nodes",false]],"parent (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.parent",false]],"parent (algotree.flat_forest_node.flatforestnode property)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.parent",false]],"parent (algotree.node property)":[[0,"AlgoTree.Node.parent",false],[2,"AlgoTree.Node.parent",false]],"parent (algotree.node.node property)":[[0,"AlgoTree.node.Node.parent",false]],"parent (algotree.treenode.treenode property)":[[0,"AlgoTree.treenode.TreeNode.parent",false]],"parent_key (algotree.flat_forest.flatforest attribute)":[[0,"AlgoTree.flat_forest.FlatForest.PARENT_KEY",false]],"parse() (algotree.dsl.treedsl static method)":[[0,"AlgoTree.dsl.TreeDSL.parse",false]],"parse() (algotree.treedsl static method)":[[0,"AlgoTree.TreeDSL.parse",false],[2,"AlgoTree.TreeDSL.parse",false]],"parse_tree() (in module algotree)":[[0,"AlgoTree.parse_tree",false],[2,"AlgoTree.parse_tree",false]],"parse_tree() (in module algotree.dsl)":[[0,"AlgoTree.dsl.parse_tree",false]],"partial (algotree.matchtype attribute)":[[0,"AlgoTree.MatchType.PARTIAL",false]],"partial (algotree.pattern_matcher.matchtype attribute)":[[0,"AlgoTree.pattern_matcher.MatchType.PARTIAL",false]],"path() (algotree.node_hasher.nodehasher static method)":[[0,"AlgoTree.node_hasher.NodeHasher.path",false]],"path() (in module algotree.utils)":[[0,"AlgoTree.utils.path",false]],"paths_to_tree() (in module algotree.utils)":[[0,"AlgoTree.utils.paths_to_tree",false]],"pattern (class in algotree)":[[0,"AlgoTree.Pattern",false],[2,"AlgoTree.Pattern",false]],"pattern (class in algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.Pattern",false]],"pattern_match() (in module algotree)":[[0,"AlgoTree.pattern_match",false],[2,"AlgoTree.pattern_match",false]],"pattern_match() (in module algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.pattern_match",false]],"patternmatcher (class in algotree)":[[0,"AlgoTree.PatternMatcher",false],[2,"AlgoTree.PatternMatcher",false]],"patternmatcher (class in algotree.pattern_matcher)":[[0,"AlgoTree.pattern_matcher.PatternMatcher",false]],"payload (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.payload",false]],"payload (algotree.flat_forest_node.flatforestnode property)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.payload",false]],"payload() (algotree.node_hasher.nodehasher static method)":[[0,"AlgoTree.node_hasher.NodeHasher.payload",false]],"predicate (algotree.pattern attribute)":[[0,"AlgoTree.Pattern.predicate",false],[2,"AlgoTree.Pattern.predicate",false]],"predicate (algotree.pattern_matcher.pattern attribute)":[[0,"AlgoTree.pattern_matcher.Pattern.predicate",false]],"preferred_root (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.preferred_root",false]],"pretty_tree() (in module algotree)":[[0,"AlgoTree.pretty_tree",false],[2,"AlgoTree.pretty_tree",false]],"pretty_tree() (in module algotree.pretty_tree)":[[0,"AlgoTree.pretty_tree.pretty_tree",false]],"prettytree (class in algotree)":[[0,"AlgoTree.PrettyTree",false],[2,"AlgoTree.PrettyTree",false]],"prettytree (class in algotree.pretty_tree)":[[0,"AlgoTree.pretty_tree.PrettyTree",false]],"properties (algotree.treenode_api.treenodeapi attribute)":[[0,"AlgoTree.treenode_api.TreeNodeApi.properties",false]],"proxy() (algotree.flat_forest_node.flatforestnode static method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.proxy",false]],"prune() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.prune",false]],"prune() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.prune",false],[2,"AlgoTree.FluentNode.prune",false]],"prune() (in module algotree.utils)":[[0,"AlgoTree.utils.prune",false]],"purge() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.purge",false]],"register_json_encoder() (in module algotree.serialization)":[[0,"AlgoTree.serialization.register_json_encoder",false]],"remove_child() (algotree.node method)":[[0,"AlgoTree.Node.remove_child",false],[2,"AlgoTree.Node.remove_child",false]],"remove_child() (algotree.node.node method)":[[0,"AlgoTree.node.Node.remove_child",false]],"replace() (algotree.pattern_matcher.patternmatcher method)":[[0,"AlgoTree.pattern_matcher.PatternMatcher.replace",false]],"replace() (algotree.patternmatcher method)":[[0,"AlgoTree.PatternMatcher.replace",false],[2,"AlgoTree.PatternMatcher.replace",false]],"replace_matches() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.replace_matches",false]],"replace_matches() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.replace_matches",false],[2,"AlgoTree.FluentNode.replace_matches",false]],"root (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.root",false]],"root (algotree.flat_forest_node.flatforestnode property)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.root",false]],"root (algotree.node property)":[[0,"AlgoTree.Node.root",false],[2,"AlgoTree.Node.root",false]],"root (algotree.node.node property)":[[0,"AlgoTree.node.Node.root",false]],"root (algotree.treenode.treenode property)":[[0,"AlgoTree.treenode.TreeNode.root",false]],"root() (algotree.fluent.treebuilder method)":[[0,"AlgoTree.fluent.TreeBuilder.root",false]],"root() (algotree.treebuilder method)":[[0,"AlgoTree.TreeBuilder.root",false],[2,"AlgoTree.TreeBuilder.root",false]],"root_key() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.root_key",false]],"root_names (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.root_names",false]],"roots (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.roots",false]],"save() (in module algotree)":[[0,"AlgoTree.save",false]],"save() (in module algotree.serialization)":[[0,"AlgoTree.serialization.save",false]],"save_tree() (in module algotree)":[[0,"AlgoTree.save_tree",false],[2,"AlgoTree.save_tree",false]],"save_tree() (in module algotree.exporters)":[[0,"AlgoTree.exporters.save_tree",false]],"sibling() (algotree.fluent.treebuilder method)":[[0,"AlgoTree.fluent.TreeBuilder.sibling",false]],"sibling() (algotree.treebuilder method)":[[0,"AlgoTree.TreeBuilder.sibling",false],[2,"AlgoTree.TreeBuilder.sibling",false]],"siblings (algotree.node property)":[[0,"AlgoTree.Node.siblings",false],[2,"AlgoTree.Node.siblings",false]],"siblings (algotree.node.node property)":[[0,"AlgoTree.node.Node.siblings",false]],"siblings() (in module algotree.utils)":[[0,"AlgoTree.utils.siblings",false]],"size() (in module algotree.utils)":[[0,"AlgoTree.utils.size",false]],"sort() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.sort",false]],"sort() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.sort",false],[2,"AlgoTree.FluentNode.sort",false]],"spec() (algotree.flat_forest.flatforest static method)":[[0,"AlgoTree.flat_forest.FlatForest.spec",false]],"stream_writer() (in module algotree.serialization)":[[0,"AlgoTree.serialization.stream_writer",false]],"subtree() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.subtree",false]],"subtree() (algotree.flat_forest_node.flatforestnode method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.subtree",false]],"subtree() (algotree.treenode.treenode method)":[[0,"AlgoTree.treenode.TreeNode.subtree",false]],"subtree_centered_at() (in module algotree.utils)":[[0,"AlgoTree.utils.subtree_centered_at",false]],"subtree_rooted_at() (in module algotree.utils)":[[0,"AlgoTree.utils.subtree_rooted_at",false]],"to_adjacency_list() (in module algotree)":[[0,"AlgoTree.to_adjacency_list",false],[2,"AlgoTree.to_adjacency_list",false]],"to_adjacency_list() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_adjacency_list",false]],"to_ascii() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_ascii",false]],"to_ascii() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_ascii",false],[2,"AlgoTree.TreeExporter.to_ascii",false]],"to_dict() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_dict",false]],"to_dict() (algotree.flat_forest.flatforest method)":[[0,"AlgoTree.flat_forest.FlatForest.to_dict",false]],"to_dict() (algotree.flat_forest_node.flatforestnode method)":[[0,"AlgoTree.flat_forest_node.FlatForestNode.to_dict",false]],"to_dict() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.to_dict",false]],"to_dict() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.to_dict",false],[2,"AlgoTree.FluentNode.to_dict",false]],"to_dict() (algotree.node method)":[[0,"AlgoTree.Node.to_dict",false],[2,"AlgoTree.Node.to_dict",false]],"to_dict() (algotree.node.node method)":[[0,"AlgoTree.node.Node.to_dict",false]],"to_dict() (algotree.tree_converter.treeconverter static method)":[[0,"AlgoTree.tree_converter.TreeConverter.to_dict",false]],"to_dict() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_dict",false],[2,"AlgoTree.TreeExporter.to_dict",false]],"to_dict() (algotree.treenode.treenode method)":[[0,"AlgoTree.treenode.TreeNode.to_dict",false]],"to_dict() (in module algotree)":[[0,"AlgoTree.to_dict",false],[2,"AlgoTree.to_dict",false]],"to_dict() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_dict",false]],"to_edge_list() (in module algotree)":[[0,"AlgoTree.to_edge_list",false],[2,"AlgoTree.to_edge_list",false]],"to_edge_list() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_edge_list",false]],"to_graphviz() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_graphviz",false]],"to_graphviz() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_graphviz",false],[2,"AlgoTree.TreeExporter.to_graphviz",false]],"to_graphviz_data() (in module algotree)":[[0,"AlgoTree.to_graphviz_data",false],[2,"AlgoTree.to_graphviz_data",false]],"to_graphviz_data() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_graphviz_data",false]],"to_html() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_html",false]],"to_html() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_html",false],[2,"AlgoTree.TreeExporter.to_html",false]],"to_json() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_json",false]],"to_json() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_json",false],[2,"AlgoTree.TreeExporter.to_json",false]],"to_json_schema() (in module algotree)":[[0,"AlgoTree.to_json_schema",false],[2,"AlgoTree.to_json_schema",false]],"to_json_schema() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_json_schema",false]],"to_list() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.to_list",false]],"to_list() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.to_list",false],[2,"AlgoTree.FluentNode.to_list",false]],"to_list() (in module algotree)":[[0,"AlgoTree.to_list",false],[2,"AlgoTree.to_list",false]],"to_list() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_list",false]],"to_mermaid() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_mermaid",false]],"to_mermaid() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_mermaid",false],[2,"AlgoTree.TreeExporter.to_mermaid",false]],"to_nested_lists() (in module algotree)":[[0,"AlgoTree.to_nested_lists",false],[2,"AlgoTree.to_nested_lists",false]],"to_nested_lists() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_nested_lists",false]],"to_parquet() (in module algotree.serialization)":[[0,"AlgoTree.serialization.to_parquet",false]],"to_paths() (in module algotree)":[[0,"AlgoTree.to_paths",false],[2,"AlgoTree.to_paths",false]],"to_paths() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_paths",false]],"to_pickle() (in module algotree.serialization)":[[0,"AlgoTree.serialization.to_pickle",false]],"to_root() (algotree.fluent.treebuilder method)":[[0,"AlgoTree.fluent.TreeBuilder.to_root",false]],"to_root() (algotree.treebuilder method)":[[0,"AlgoTree.TreeBuilder.to_root",false],[2,"AlgoTree.TreeBuilder.to_root",false]],"to_table() (in module algotree)":[[0,"AlgoTree.to_table",false],[2,"AlgoTree.to_table",false]],"to_table() (in module algotree.tree_shaper)":[[0,"AlgoTree.tree_shaper.to_table",false]],"to_unicode() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_unicode",false]],"to_unicode() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_unicode",false],[2,"AlgoTree.TreeExporter.to_unicode",false]],"to_xml() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_xml",false]],"to_xml() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_xml",false],[2,"AlgoTree.TreeExporter.to_xml",false]],"to_yaml() (algotree.exporters.treeexporter static method)":[[0,"AlgoTree.exporters.TreeExporter.to_yaml",false]],"to_yaml() (algotree.treeexporter static method)":[[0,"AlgoTree.TreeExporter.to_yaml",false],[2,"AlgoTree.TreeExporter.to_yaml",false]],"traverse_levelorder() (algotree.node method)":[[0,"AlgoTree.Node.traverse_levelorder",false],[2,"AlgoTree.Node.traverse_levelorder",false]],"traverse_levelorder() (algotree.node.node method)":[[0,"AlgoTree.node.Node.traverse_levelorder",false]],"traverse_postorder() (algotree.node method)":[[0,"AlgoTree.Node.traverse_postorder",false],[2,"AlgoTree.Node.traverse_postorder",false]],"traverse_postorder() (algotree.node.node method)":[[0,"AlgoTree.node.Node.traverse_postorder",false]],"traverse_preorder() (algotree.node method)":[[0,"AlgoTree.Node.traverse_preorder",false],[2,"AlgoTree.Node.traverse_preorder",false]],"traverse_preorder() (algotree.node.node method)":[[0,"AlgoTree.node.Node.traverse_preorder",false]],"tree() (algotree.tree_hasher.treehasher static method)":[[0,"AlgoTree.tree_hasher.TreeHasher.tree",false]],"treebuilder (class in algotree)":[[0,"AlgoTree.TreeBuilder",false],[2,"AlgoTree.TreeBuilder",false]],"treebuilder (class in algotree.fluent)":[[0,"AlgoTree.fluent.TreeBuilder",false]],"treeconverter (class in algotree.tree_converter)":[[0,"AlgoTree.tree_converter.TreeConverter",false]],"treedsl (class in algotree)":[[0,"AlgoTree.TreeDSL",false],[2,"AlgoTree.TreeDSL",false]],"treedsl (class in algotree.dsl)":[[0,"AlgoTree.dsl.TreeDSL",false]],"treeexporter (class in algotree)":[[0,"AlgoTree.TreeExporter",false],[2,"AlgoTree.TreeExporter",false]],"treeexporter (class in algotree.exporters)":[[0,"AlgoTree.exporters.TreeExporter",false]],"treehasher (class in algotree.tree_hasher)":[[0,"AlgoTree.tree_hasher.TreeHasher",false]],"treenode (class in algotree.treenode)":[[0,"AlgoTree.treenode.TreeNode",false]],"treenodeapi (class in algotree.treenode_api)":[[0,"AlgoTree.treenode_api.TreeNodeApi",false]],"trees (algotree.flat_forest.flatforest property)":[[0,"AlgoTree.flat_forest.FlatForest.trees",false]],"up() (algotree.fluent.treebuilder method)":[[0,"AlgoTree.fluent.TreeBuilder.up",false]],"up() (algotree.treebuilder method)":[[0,"AlgoTree.TreeBuilder.up",false],[2,"AlgoTree.TreeBuilder.up",false]],"upgrade_legacy_format() (in module algotree.serialization)":[[0,"AlgoTree.serialization.upgrade_legacy_format",false]],"visit() (in module algotree.utils)":[[0,"AlgoTree.utils.visit",false]],"where() (algotree.fluent.fluentnode method)":[[0,"AlgoTree.fluent.FluentNode.where",false]],"where() (algotree.fluentnode method)":[[0,"AlgoTree.FluentNode.where",false],[2,"AlgoTree.FluentNode.where",false]],"wildcard (algotree.matchtype attribute)":[[0,"AlgoTree.MatchType.WILDCARD",false]],"wildcard (algotree.pattern_matcher.matchtype attribute)":[[0,"AlgoTree.pattern_matcher.MatchType.WILDCARD",false]]},"objects":{"":[[0,0,0,"-","AlgoTree"]],"AlgoTree":[[2,1,1,"","FluentNode"],[0,1,1,"","MatchType"],[2,1,1,"","Node"],[2,1,1,"","Pattern"],[2,1,1,"","PatternMatcher"],[2,1,1,"","PrettyTree"],[2,1,1,"","TreeBuilder"],[2,1,1,"","TreeDSL"],[2,1,1,"","TreeExporter"],[2,5,1,"","dotannotate"],[2,5,1,"","dotcollect"],[2,5,1,"","dotcount"],[2,5,1,"","dotexists"],[2,5,1,"","dotextract"],[2,5,1,"","dotfilter"],[2,5,1,"","dotflatten"],[2,5,1,"","dotgraft"],[2,5,1,"","dotgroup"],[2,5,1,"","dotmap"],[2,5,1,"","dotmatch"],[2,5,1,"","dotmerge"],[2,5,1,"","dotmod"],[2,5,1,"","dotnormalize"],[2,5,1,"","dotpartition"],[2,5,1,"","dotpipe"],[2,5,1,"","dotpluck"],[2,5,1,"","dotproject"],[2,5,1,"","dotprune"],[2,5,1,"","dotreduce"],[2,5,1,"","dotsplit"],[2,5,1,"","dotvalidate"],[0,0,0,"-","dsl"],[0,5,1,"","dumps"],[2,5,1,"","export_tree"],[0,0,0,"-","exporters"],[0,0,0,"-","flat_forest"],[0,0,0,"-","flat_forest_node"],[0,0,0,"-","fluent"],[0,5,1,"","load"],[0,5,1,"","loads"],[0,0,0,"-","node"],[0,0,0,"-","node_hasher"],[2,5,1,"","parse_tree"],[2,5,1,"","pattern_match"],[0,0,0,"-","pattern_matcher"],[2,5,1,"","pretty_tree"],[0,0,0,"-","pretty_tree"],[0,5,1,"","save"],[2,5,1,"","save_tree"],[0,0,0,"-","serialization"],[2,5,1,"","to_adjacency_list"],[2,5,1,"","to_dict"],[2,5,1,"","to_edge_list"],[2,5,1,"","to_graphviz_data"],[2,5,1,"","to_json_schema"],[2,5,1,"","to_list"],[2,5,1,"","to_nested_lists"],[2,5,1,"","to_paths"],[2,5,1,"","to_table"],[0,0,0,"-","tree_converter"],[0,0,0,"-","tree_hasher"],[0,0,0,"-","tree_shaper"],[0,0,0,"-","tree_transformer"],[0,0,0,"-","treenode"],[0,0,0,"-","treenode_api"],[0,0,0,"-","utils"]],"AlgoTree.FluentNode":[[2,2,1,"","children"],[2,2,1,"","count"],[2,2,1,"","descendants"],[2,2,1,"","each"],[2,2,1,"","filter"],[2,2,1,"","first"],[2,2,1,"","leaves"],[2,2,1,"","map"],[2,2,1,"","match"],[2,2,1,"","prune"],[2,2,1,"","replace_matches"],[2,2,1,"","sort"],[2,2,1,"","to_dict"],[2,2,1,"","to_list"],[2,2,1,"","where"]],"AlgoTree.MatchType":[[0,3,1,"","EXACT"],[0,3,1,"","PARTIAL"],[0,3,1,"","WILDCARD"]],"AlgoTree.Node":[[2,2,1,"","add_child"],[2,2,1,"","clone"],[2,2,1,"","find"],[2,2,1,"","find_all"],[2,2,1,"","from_dict"],[2,2,1,"","get_path"],[2,4,1,"","is_leaf"],[2,4,1,"","is_root"],[2,4,1,"","level"],[2,4,1,"","parent"],[2,2,1,"","remove_child"],[2,4,1,"","root"],[2,4,1,"","siblings"],[2,2,1,"","to_dict"],[2,2,1,"","traverse_levelorder"],[2,2,1,"","traverse_postorder"],[2,2,1,"","traverse_preorder"]],"AlgoTree.Pattern":[[2,3,1,"","attributes"],[2,3,1,"","children"],[2,2,1,"","from_dict"],[2,2,1,"","from_string"],[2,3,1,"","is_deep_wildcard"],[2,3,1,"","is_wildcard"],[2,3,1,"","max_children"],[2,3,1,"","min_children"],[2,3,1,"","name"],[2,3,1,"","predicate"]],"AlgoTree.PatternMatcher":[[2,2,1,"","find_all"],[2,2,1,"","find_first"],[2,2,1,"","match"],[2,2,1,"","replace"]],"AlgoTree.PrettyTree":[[2,3,1,"","default_style"],[2,2,1,"","mark"]],"AlgoTree.TreeBuilder":[[2,2,1,"","build"],[2,2,1,"","child"],[2,2,1,"","root"],[2,2,1,"","sibling"],[2,2,1,"","to_root"],[2,2,1,"","up"]],"AlgoTree.TreeDSL":[[2,2,1,"","parse"]],"AlgoTree.TreeExporter":[[2,2,1,"","to_ascii"],[2,2,1,"","to_dict"],[2,2,1,"","to_graphviz"],[2,2,1,"","to_html"],[2,2,1,"","to_json"],[2,2,1,"","to_mermaid"],[2,2,1,"","to_unicode"],[2,2,1,"","to_xml"],[2,2,1,"","to_yaml"]],"AlgoTree.dsl":[[0,1,1,"","TreeDSL"],[0,5,1,"","parse_tree"]],"AlgoTree.dsl.TreeDSL":[[0,2,1,"","parse"]],"AlgoTree.exporters":[[0,1,1,"","TreeExporter"],[0,5,1,"","export_tree"],[0,5,1,"","save_tree"]],"AlgoTree.exporters.TreeExporter":[[0,2,1,"","to_ascii"],[0,2,1,"","to_dict"],[0,2,1,"","to_graphviz"],[0,2,1,"","to_html"],[0,2,1,"","to_json"],[0,2,1,"","to_mermaid"],[0,2,1,"","to_unicode"],[0,2,1,"","to_xml"],[0,2,1,"","to_yaml"]],"AlgoTree.flat_forest":[[0,1,1,"","FlatForest"]],"AlgoTree.flat_forest.FlatForest":[[0,3,1,"","DETACHED_KEY"],[0,3,1,"","PARENT_KEY"],[0,2,1,"","add_child"],[0,2,1,"","as_tree"],[0,2,1,"","check_valid"],[0,2,1,"","child_names"],[0,4,1,"","children"],[0,2,1,"","contains"],[0,2,1,"","detach"],[0,4,1,"","detached"],[0,2,1,"","interior_node_names"],[0,2,1,"","is_valid"],[0,2,1,"","logical_root_names"],[0,4,1,"","name"],[0,2,1,"","node"],[0,2,1,"","node_names"],[0,2,1,"","nodes"],[0,4,1,"","parent"],[0,4,1,"","payload"],[0,4,1,"","preferred_root"],[0,2,1,"","purge"],[0,4,1,"","root"],[0,2,1,"","root_key"],[0,4,1,"","root_names"],[0,4,1,"","roots"],[0,2,1,"","spec"],[0,2,1,"","subtree"],[0,2,1,"","to_dict"],[0,4,1,"","trees"]],"AlgoTree.flat_forest_node":[[0,1,1,"","FlatForestNode"]],"AlgoTree.flat_forest_node.FlatForestNode":[[0,2,1,"","add_child"],[0,4,1,"","children"],[0,2,1,"","clone"],[0,2,1,"","contains"],[0,2,1,"","detach"],[0,4,1,"","forest"],[0,4,1,"","name"],[0,2,1,"","node"],[0,4,1,"","parent"],[0,4,1,"","payload"],[0,2,1,"","proxy"],[0,4,1,"","root"],[0,2,1,"","subtree"],[0,2,1,"","to_dict"]],"AlgoTree.fluent":[[0,1,1,"","FluentNode"],[0,1,1,"","TreeBuilder"]],"AlgoTree.fluent.FluentNode":[[0,2,1,"","children"],[0,2,1,"","count"],[0,2,1,"","descendants"],[0,2,1,"","each"],[0,2,1,"","filter"],[0,2,1,"","first"],[0,2,1,"","leaves"],[0,2,1,"","map"],[0,2,1,"","match"],[0,2,1,"","prune"],[0,2,1,"","replace_matches"],[0,2,1,"","sort"],[0,2,1,"","to_dict"],[0,2,1,"","to_list"],[0,2,1,"","where"]],"AlgoTree.fluent.TreeBuilder":[[0,2,1,"","build"],[0,2,1,"","child"],[0,2,1,"","root"],[0,2,1,"","sibling"],[0,2,1,"","to_root"],[0,2,1,"","up"]],"AlgoTree.node":[[0,1,1,"","Node"]],"AlgoTree.node.Node":[[0,2,1,"","add_child"],[0,2,1,"","clone"],[0,2,1,"","find"],[0,2,1,"","find_all"],[0,2,1,"","from_dict"],[0,2,1,"","get_path"],[0,4,1,"","is_leaf"],[0,4,1,"","is_root"],[0,4,1,"","level"],[0,4,1,"","parent"],[0,2,1,"","remove_child"],[0,4,1,"","root"],[0,4,1,"","siblings"],[0,2,1,"","to_dict"],[0,2,1,"","traverse_levelorder"],[0,2,1,"","traverse_postorder"],[0,2,1,"","traverse_preorder"]],"AlgoTree.node_hasher":[[0,1,1,"","NodeHasher"]],"AlgoTree.node_hasher.NodeHasher":[[0,2,1,"","name"],[0,2,1,"","node"],[0,2,1,"","path"],[0,2,1,"","payload"]],"AlgoTree.pattern_matcher":[[0,1,1,"","MatchType"],[0,1,1,"","Pattern"],[0,1,1,"","PatternMatcher"],[0,5,1,"","dotcount"],[0,5,1,"","dotexists"],[0,5,1,"","dotfilter"],[0,5,1,"","dotmatch"],[0,5,1,"","dotpluck"],[0,5,1,"","pattern_match"]],"AlgoTree.pattern_matcher.MatchType":[[0,3,1,"","EXACT"],[0,3,1,"","PARTIAL"],[0,3,1,"","WILDCARD"]],"AlgoTree.pattern_matcher.Pattern":[[0,3,1,"","attributes"],[0,3,1,"","children"],[0,2,1,"","from_dict"],[0,2,1,"","from_string"],[0,3,1,"","is_deep_wildcard"],[0,3,1,"","is_wildcard"],[0,3,1,"","max_children"],[0,3,1,"","min_children"],[0,3,1,"","name"],[0,3,1,"","predicate"]],"AlgoTree.pattern_matcher.PatternMatcher":[[0,2,1,"","find_all"],[0,2,1,"","find_first"],[0,2,1,"","match"],[0,2,1,"","replace"]],"AlgoTree.pretty_tree":[[0,1,1,"","PrettyTree"],[0,5,1,"","pretty_tree"]],"AlgoTree.pretty_tree.PrettyTree":[[0,3,1,"","default_style"],[0,2,1,"","mark"]],"AlgoTree.serialization":[[0,5,1,"","dumps"],[0,5,1,"","from_parquet"],[0,5,1,"","from_pickle"],[0,5,1,"","iter_nodes"],[0,5,1,"","load"],[0,5,1,"","loads"],[0,5,1,"","register_json_encoder"],[0,5,1,"","save"],[0,5,1,"","stream_writer"],[0,5,1,"","to_parquet"],[0,5,1,"","to_pickle"],[0,5,1,"","upgrade_legacy_format"]],"AlgoTree.tree_converter":[[0,1,1,"","TreeConverter"]],"AlgoTree.tree_converter.TreeConverter":[[0,2,1,"","convert"],[0,2,1,"","copy_under"],[0,2,1,"","default_extract"],[0,2,1,"","default_node_name"],[0,2,1,"","to_dict"]],"AlgoTree.tree_hasher":[[0,1,1,"","TreeHasher"]],"AlgoTree.tree_hasher.TreeHasher":[[0,2,1,"","isomorphic"],[0,2,1,"","tree"]],"AlgoTree.tree_shaper":[[0,5,1,"","dotcollect"],[0,5,1,"","dotextract"],[0,5,1,"","dotgroup"],[0,5,1,"","dotpartition"],[0,5,1,"","dotpipe"],[0,5,1,"","dotproject"],[0,5,1,"","to_adjacency_list"],[0,5,1,"","to_dict"],[0,5,1,"","to_edge_list"],[0,5,1,"","to_graphviz_data"],[0,5,1,"","to_json_schema"],[0,5,1,"","to_list"],[0,5,1,"","to_nested_lists"],[0,5,1,"","to_paths"],[0,5,1,"","to_table"]],"AlgoTree.tree_transformer":[[0,5,1,"","dotannotate"],[0,5,1,"","dotflatten"],[0,5,1,"","dotgraft"],[0,5,1,"","dotmap"],[0,5,1,"","dotmerge"],[0,5,1,"","dotmod"],[0,5,1,"","dotnormalize"],[0,5,1,"","dotprune"],[0,5,1,"","dotreduce"],[0,5,1,"","dotsplit"],[0,5,1,"","dotvalidate"]],"AlgoTree.treenode":[[0,1,1,"","TreeNode"]],"AlgoTree.treenode.TreeNode":[[0,2,1,"","add_child"],[0,2,1,"","clone"],[0,2,1,"","from_dict"],[0,2,1,"","is_valid"],[0,2,1,"","node"],[0,2,1,"","nodes"],[0,4,1,"","parent"],[0,4,1,"","root"],[0,2,1,"","subtree"],[0,2,1,"","to_dict"]],"AlgoTree.treenode_api":[[0,1,1,"","TreeNodeApi"]],"AlgoTree.treenode_api.TreeNodeApi":[[0,2,1,"","check"],[0,2,1,"","is_valid"],[0,2,1,"","missing"],[0,3,1,"","properties"]],"AlgoTree.utils":[[0,5,1,"","ancestors"],[0,5,1,"","average_distance"],[0,5,1,"","breadth_first"],[0,5,1,"","breadth_first_undirected"],[0,5,1,"","depth"],[0,5,1,"","descendants"],[0,5,1,"","distance"],[0,5,1,"","find_node"],[0,5,1,"","find_nodes"],[0,5,1,"","find_path"],[0,5,1,"","height"],[0,5,1,"","is_internal"],[0,5,1,"","is_isomorphic"],[0,5,1,"","is_leaf"],[0,5,1,"","is_root"],[0,5,1,"","lca"],[0,5,1,"","leaves"],[0,5,1,"","map"],[0,5,1,"","node_stats"],[0,5,1,"","node_to_leaf_paths"],[0,5,1,"","path"],[0,5,1,"","paths_to_tree"],[0,5,1,"","prune"],[0,5,1,"","siblings"],[0,5,1,"","size"],[0,5,1,"","subtree_centered_at"],[0,5,1,"","subtree_rooted_at"],[0,5,1,"","visit"]]},"objnames":{"0":["py","module","Python module"],"1":["py","class","Python class"],"2":["py","method","Python method"],"3":["py","attribute","Python attribute"],"4":["py","property","Python property"],"5":["py","function","Python function"]},"objtypes":{"0":"py:module","1":"py:class","2":"py:method","3":"py:attribute","4":"py:property","5":"py:function"},"terms":{"":[0,2,3,4,6,8,13,14,16],"0":[0,2,3,4,6,7,10,11,13,14,16],"000":7,"0a5c451b":4,"0f0d258b2a25":4,"1":[0,2,3,4,6,8,9,10,11,13,14],"10":[7,8,9,11,13],"100":[0,2,3,7,11,13,14],"1000":[0,2,3,6,7,14],"1000000":[0,2,14],"1024":[3,7,14],"10m":7,"11":9,"12":9,"128":[3,7],"137b3a08d31":4,"14e057df":6,"15":3,"150":7,"1500":7,"1549bcb8":4,"1d223ec4":4,"1f":7,"1f73":4,"1kb":7,"2":[0,2,3,4,5,6,8,9,10,11,13,14],"20":[3,7,8],"200":[6,7],"2000":[6,7],"2010":7,"2048":[3,7],"25":[3,7],"250":7,"255":[0,2,14],"256":3,"27bc":6,"2a2e":4,"2ab5":4,"2ad7":4,"3":[0,2,3,4,6,8,9,10,13,14],"30":[7,8],"300":7,"3000":6,"30a87f4c":4,"36a9":6,"3af8":4,"3e19":4,"4":[3,4,6,9,10,11],"40":8,"4096":7,"409a":4,"41":6,"41d8adc8":4,"42":[2,6,13],"4217":4,"45":7,"450":7,"4544":4,"457d":6,"45eb":4,"45f0":6,"45f4":4,"467f":4,"474c":4,"477d":4,"47c3":6,"48e9":4,"4aae":4,"4bb4":4,"4dae":6,"4fef":4,"5":[0,2,6,7,9,13],"50":[3,7],"500":7,"5000":7,"512":7,"5432":[0,2],"5a8df89c":4,"5ce307424675":4,"5da441854dcb":4,"5f189f2e85f2":4,"6":9,"60":7,"600":7,"7":[0,2,4,6,9],"700":7,"75":7,"779cc759":6,"78baf6c2":4,"7dc9523b":4,"8":[0,2,6,9,13],"80":[7,13],"800":7,"8004":6,"8424":4,"8749":4,"8a24":4,"9":[4,6,9],"9000":14,"90a4":4,"9415":6,"945ef525":6,"9551":4,"9852":4,"9aa8123ac2bd":4,"9b38":4,"9daf":4,"9db394571b83":4,"A":[0,2,4,5,6,8,9,10],"And":6,"As":[0,4,6,10],"At":4,"By":8,"For":[0,4,5,6,7,8,13,14],"If":[0,2,4,6,7,10,15],"In":[0,4,5,6,8,9,10,16],"It":[0,4,5,6,7,8,10,11,15,16],"No":0,"Or":[4,11],"The":[0,2,4,5,6,7,9,10,11,13,14,15,16],"Then":[0,10],"These":[0,5,8,14],"To":[0,10,11,16],"With":[0,2,5,14],"_":[0,2,3,4],"_2":6,"__call__":4,"__detached__":[0,6],"__init__":[0,3,4,15],"__root__":[0,6],"_annot":[0,2],"_children":3,"_eval":4,"_height_cach":3,"_load":3,"_loader":3,"_meta":14,"_size_cach":3,"_test":13,"_v2":13,"a08e5a3fc4e0":4,"a1c9":6,"a2":6,"a44d":4,"a499":6,"a8f1":4,"ab68":4,"abil":6,"about":[0,6,7,8,10],"abov":[],"abstract":[0,5,6,8],"acc":[0,2,14],"accept":[0,4,6],"access":[0,2,5,6,7,10,15,16],"accumul":[0,2],"achiev":0,"across":16,"act":5,"action":[0,2],"ad":[4,7,15,16],"adapt":5,"add":[0,2,3,4,6,7,11,14,15,16],"add_child":[0,2,3,5,6,7,8,12,13,15,16],"add_prefix":6,"addit":[0,5,6,15],"address":[8,13],"adff":4,"adj":[0,2,14],"adjac":[0,2,14],"admin":13,"admin_secur":13,"advanc":[0,2,5,9],"aec46058acda":4,"afbd":4,"after":[0,4,6],"ag":[0,2],"again":[4,6],"against":[0,2,14],"aggreg":[7,14],"algebra":[4,13],"algorithm":[4,9,10,14],"algotre":[2,4,5,6,10,11,13,14],"alia":[0,2,11],"alias":[0,2,11],"alic":[0,2,3,7],"all":[0,2,3,4,5,6,7,8,10,11,13,14],"all_children":7,"all_model":3,"all_nod":[0,2,14],"allow":[0,5,6,8,13,15,16],"along":[6,16],"alphabet":7,"alreadi":[0,2,6],"also":[0,2,4,5,6,8,9,10,15],"alter":8,"altern":8,"alwai":0,"america":7,"among":[0,13],"an":[0,2,4,5,6,8,10,14,15,16],"analysi":9,"analyt":0,"analyz":0,"ancestor":[0,6,10,12],"ani":[0,3,5,6,9,10,13,14,15,16],"annot":[0,2,14],"annotation_kei":[0,2,14],"anoth":[0,5,6,8,10,16],"answer":13,"anywher":[3,13],"apac":7,"api":[0,3,5,6,11],"app":[0,2,3,13,14],"append":[0,2,3,4,6],"appli":[0,2,3,4,8,14],"applic":[8,16],"approach":[0,7,10,13,16],"ar":[0,4,5,6,8,10,13,16],"arbitrari":[0,2,6,8,14],"arg":[0,3,15],"argument":[0,2,4,15],"around":0,"arrai":[0,2,13,14],"art":[0,2],"as_tre":[0,5,6,12],"ascii":[0,2,3],"asia":7,"ask":8,"assert":[4,8],"assign":0,"associ":[0,10,16],"assum":[0,8,10,16],"attempt":5,"attent":8,"attr":14,"attribut":[0,2,3,5,8,9,11,12,13,14],"attributeerror":0,"augment":0,"auth":[0,2],"auto":[0,2,3],"automat":[0,2,7,11],"avail":[0,10],"averag":0,"average_dist":[0,12],"avoid":6,"awai":[0,8],"awar":5,"b":[0,6,8,10,13,16],"b2":6,"b2a8":4,"b4be":4,"b5449d28ef1":6,"b614":4,"b6d9":6,"b7c7235ea4d8":6,"b_0":6,"b_1":6,"b_2":6,"b_3":6,"b_4":6,"b_5":6,"b_6":6,"b_7":6,"back":[0,2,7,15],"backend":[0,2,7],"background":9,"base":[0,2,3,4,6,8,9,14,16],"basic":[3,5,9],"batch":3,"batch_upd":3,"becaus":[6,8],"becom":0,"been":[4,6,11],"befor":[0,2,4],"begin":[0,2],"behav":0,"behavior":[0,5,8,10],"being":[6,8],"belong":[0,8,10],"below":6,"best":9,"better":[8,11],"between":[0,3,5,6,8,10,16],"bidirect":0,"bit":6,"bob":[0,2,7],"bookkeep":6,"bool":[0,2,16],"both":[0,2,8],"bottleneck":7,"bottom":4,"box":[0,2,3],"br":[0,2],"branch":[0,2,3,13],"branch1":[3,13],"branch2":[3,13],"branch_factor":3,"breadth":[0,2,6,16],"breadth_first":[0,6,12,16],"breadth_first_undirect":[0,6,12],"break":6,"bring":8,"bt":[0,2],"build":[0,2,8,12,13],"built":7,"by_ext":[0,2],"by_level":[0,2],"by_typ":[0,2,14],"byte":[0,3,14],"c":[0,2,3,4,6,10,11,13,16],"c0c917ab03e5":4,"c1":3,"c2":[3,6],"c7034d020978":6,"c833":4,"c_2":6,"cach":[0,3,5,14],"cachednod":3,"cad1":4,"calcul":7,"call":[0,4,6,13],"callabl":[0,2],"can":[0,2,4,5,6,8,10,11,13,14,15,16],"cannot":4,"capabl":[0,5,13],"care":[0,2,6,7,8],"carri":0,"case":[0,4,8,10,13],"cat":11,"caution":0,"center":0,"center_c":6,"centric":[0,5,6,9],"ceo":3,"certain":[0,8,10],"cfo":3,"chain":[0,2,7,9],"chainabl":[9,11],"chang":[0,3,4,5,6,8,10,16],"charact":[0,2,7],"charli":7,"check":[0,2,3,5,7,8,12,13,14,16],"check_valid":[0,5,6,12],"chief":3,"child":[0,2,3,4,6,7,8,10,11,12,13,15,16],"child1":[0,2,3,6,7,8,11,13,14,15],"child1_1":[8,15],"child1_1_valu":15,"child1_2":[6,8],"child1_valu":15,"child2":[0,2,3,6,7,8,11,13,14,15],"child2_1":[8,15],"child2_1_valu":15,"child2_2":[6,8],"child2_valu":15,"child_connector":[0,2],"child_map":3,"child_nam":[0,12],"children":[0,2,3,4,5,6,7,10,12,13,14,15,16],"children_count":3,"choos":[0,7,8],"chose":6,"circl":[0,2],"circular":[0,2,3],"class":[0,3,4,6,9,11,15],"classmethod":[0,2],"clean":[0,2,7],"cleaner":11,"cleanli":13,"clear":[0,2,6,14],"clone":[0,2,12,16],"clone_children":0,"cloned_a":16,"close":[0,9],"closest":0,"closur":4,"code":[0,5,7,10,15],"collaps":[0,2],"collect":[0,2,3,5,14],"collector":[0,2],"collis":10,"color":3,"column":[0,2,14],"columnar":0,"com":[5,11,14],"combin":[0,2,11,14],"come":6,"command":9,"common":[0,3,4,5,10,11,13,14],"compani":[0,2,7],"compar":[0,8,16],"comparison":[0,2,8,9],"compat":0,"compil":4,"complet":[2,6,8,9,11,13],"complex":[3,4,5,7,13,14,16],"compon":[0,2,14],"component_tre":13,"componentdidmount":13,"compos":13,"comprehens":[3,7,9,11,13],"compress":0,"comput":[0,2,3,4,5,8,11,14],"concept":[0,6,8,9,10],"concern":8,"concis":13,"conclus":9,"condit":[0,2,10,14],"config":[0,2,3,7,13,14],"configur":[0,2,6,14],"conflict":[0,2,3],"conflict_resolv":[0,2,3,14],"connect":0,"consid":[0,7,8,13],"consider":9,"consist":[0,5,10,16],"const":[4,16],"constraint":[0,2,13,14],"construct":[0,2,9,15],"contain":[0,2,3,4,5,8,10,11,12,13,16],"content":[2,3,12],"context":[0,4,5,8,16],"contextu":8,"continu":[0,8],"contrast":4,"control":[5,13],"conveni":[0,2,4],"convent":8,"convers":[0,2,4,6,9,10],"convert":[0,2,6,7,9,10,12,13,14,16],"cookbook":9,"copi":[0,2,3,4,6,7,9,13],"copy_und":[0,6,12],"core":9,"corpor":[0,2],"correct":8,"correspond":[0,8],"cost":6,"could":[0,4],"count":[0,2,3,7,11,12,13,14],"counter":3,"cours":6,"cover":[5,7,16],"creat":[0,2,5,7,9,10,13,14,16],"creation":7,"criteria":[0,2,8],"critic":0,"critical_":[0,2,14],"critical_nod":3,"crucial":8,"css":[0,2],"csv":[0,2,3],"cto":3,"ctx":4,"curl":11,"current":[0,2,3,7,10,16],"current_path":3,"custom":[0,2,3,14],"cycl":[0,6],"cycle_tre":[5,6],"cycle_tree_data":5,"d":[0,2,6,10,11,16],"d2":6,"d433395a":6,"d_0":6,"d_1":6,"d_2":6,"dana":7,"data":[0,2,3,4,6,8,9,10,11,13,15,16],"databas":[0,2,5,7,13,14],"datafram":[0,2,14],"david":7,"db":14,"db_config":13,"dde50326":4,"deal":[0,10],"debug":[0,2,4,14],"decid":[0,10],"decoupl":10,"deep":[0,2,11,13,14],"deep_nod":13,"deep_pattern":13,"deepcopi":[0,4,6],"deeper":11,"deepli":13,"def":[0,2,3,4,6,13,14,15,16],"default":[0,2,3,4,5,6,7,13,14,15],"default_extract":[0,12],"default_node_nam":[0,12],"default_styl":[0,2,12],"defin":[0,4,8,10],"definit":[0,9],"del":6,"delet":6,"demand":3,"demonstr":[5,16],"denot":0,"depart":7,"depend":[3,8],"deprec":[0,2,3,14],"dept":11,"depth":[0,2,3,4,6,11,12,13,14],"descend":[0,2,3,6,7,10,12,14,16],"desend":0,"deseri":0,"design":[4,5,10,13],"dest":0,"destin":0,"detach":[0,6,12],"detached_kei":[0,6,12],"detail":[0,2,5,6],"detect":[0,2,3,6],"determin":0,"devop":7,"df":[0,2,14],"diagram":[0,2],"dict":[0,2,4,5,6,9,10,14],"dictionari":[0,2,4,5,6,8,10,14,15,16],"diff":3,"diff_tre":3,"differ":[0,2,4,5,6,8,10,14,16],"dir":[0,2,3,7,14],"dir_count":3,"direct":[0,2,3,7,13],"directli":[0,4,5,13],"directori":[0,2,3,11],"disabl":[0,2],"disconnect":6,"discov":6,"discuss":8,"disk":4,"displai":6,"distanc":[0,12],"distinct":8,"distinguish":8,"distribut":[],"do":[0,5,6,8,10],"doc":7,"doc1":14,"document":[0,3,7,8,10,11,13],"doe":[0,6,8,10],"doesn":[0,6],"domain":[0,5,16],"domest":7,"don":[0,6,7],"dot":[0,2,3,9],"dot_graph":3,"dot_path":[0,2,14],"dotannot":[0,2,12],"dotcollect":[0,2,12,14],"dotcount":[0,2,12],"dotexist":[0,2,3,12,13],"dotextract":[0,2,12,14],"dotfilt":[0,2,3,12,13],"dotflatten":[0,2,12,14],"dotgraft":[0,2,12,14],"dotgroup":[0,2,12,14],"dotmap":[0,2,12],"dotmatch":[0,2,3,12,13,14],"dotmerg":[0,2,12],"dotmod":[0,2,9,12,13],"dotnorm":[0,2,12,14],"dotpartit":[0,2,12,14],"dotpip":[0,2,9,12,13],"dotpluck":[0,2,12,13],"dotproject":[0,2,12,14],"dotprun":[0,2,12],"dotreduc":[0,2,12,14],"dotsplit":[0,2,12,14],"dotsuit":[0,2,9,14],"dotvalid":[0,2,12],"doubl":[0,2,3,11],"down":[0,4,10],"download":3,"draw":[0,2],"dsl":[9,12],"duckdb":0,"due":8,"dump":[0,4,5,6,12],"duplic":3,"durat":7,"dure":4,"e":[0,2,4,5,6,8,10,16],"e021d65aa1d4":6,"e2":6,"e_2":6,"ea98d53a1c56":4,"each":[0,2,3,4,5,6,7,8,10,12,13,15],"earlier":4,"easi":6,"easier":16,"easili":10,"echo":11,"edg":[0,2,14],"edge_attr":[0,2],"eef6aa53bbec":4,"effect":[0,8],"effici":[0,4,5,7,8,13],"either":[0,2],"element":[0,2],"elif":[0,2,3,6,16],"els":[0,2,3,6],"elsewher":10,"email":[0,2],"emea":7,"employe":7,"empti":[0,2,3,7],"enabl":[0,2,14],"encapsul":5,"encount":4,"end":[0,2],"endswith":[0,2,7,13],"eng_mgr":3,"engin":[0,2,3,7,11],"ensur":[0,4,5],"entir":[0,2,8,16],"entiti":0,"enum":0,"enumer":[0,3],"env":14,"environ":8,"eof":11,"epilog":[],"equal":[0,9],"equival":0,"error":[4,6,11],"error_tre":6,"escap":9,"essenc":4,"essenti":[0,4],"etc":[0,3,7,8],"europ":7,"ev":7,"eval":4,"evalu":9,"even":[0,5,8,10,16],"everi":[4,8,13],"exact":[0,2,3,12,13,14],"exactli":13,"exampl":[0,2,3,4,5,8,9,10,14],"excel":0,"except":[0,2,4,5,6,10],"execut":[0,2,3,7],"exist":[0,2,3,5,6,10,13,14,16],"expalanatori":6,"expect":[0,4,5],"expens":13,"experi":8,"explor":[4,6,8,10],"export":[7,9,11,12],"export_tre":[0,2,3,12],"expos":[0,4,5],"expr":[4,7,16],"expr_typ":4,"express":[0,2,3,9,14],"extend":[0,3,16],"extens":[0,2],"extract":[0,2,4,7,13],"extractor":[0,2],"extrins":9,"f":[0,2,3,4,6,7,10,13,16],"f2":6,"f4057e80":4,"f633d8d3":4,"f_2":6,"f_node":6,"facilit":[0,5],"factori":[0,2],"failur":14,"fairli":6,"fals":[0,2,3,4,6,7,13,14,16],"famili":9,"famou":8,"far":6,"fast":4,"faster":0,"fc106112":4,"featur":[5,6,9,11],"fece":6,"few":[],"fewer":15,"field":[0,2,11,14],"file":[0,2,5,6,11,14],"file_count":3,"file_nam":[0,2],"file_s":[0,2],"file_typ":[0,2],"filepath":[0,2],"filesystem":7,"filesystemvisitor":3,"fill":3,"fillcolor":3,"filter":[0,2,7,9,12,14],"filter_expr":[0,2],"final":[0,2,4],"financi":3,"find":[0,2,6,7,11,12,16],"find_al":[0,2,7,12],"find_first":[0,2,12],"find_nod":[0,12],"find_path":[0,12],"finit":8,"first":[0,2,3,4,5,6,7,12,13,14,16],"fix":[6,8,13],"flat":[0,2,4,5,6,10,14,16],"flat_expr":4,"flat_forest":[4,6,12,16],"flat_forest_nod":[4,6,10,12,16],"flat_forest_root":16,"flatforest":[0,7,9,10,12],"flatforestnod":[0,4,6,10,12,15,16],"flatten":[0,2,4,14],"flatten_pattern":[0,2],"flatter":4,"flattre":6,"flattreenod":6,"flexibl":[0,5,6,9,10,13],"float":0,"fluent":[2,3,9,11,12],"fluentnod":[0,3,9,12,13],"fn":4,"focus":[0,2,6,8],"folder":[7,11],"follow":[0,10,13,15,16],"foo":[0,2],"forest":[0,4,5,6,10,12,16],"forest2":6,"forest3":6,"form":[4,8,15],"format":[0,2,4,6,9,14],"found":[0,5,7,13],"foundat":[8,16],"frank":7,"frequent":13,"from":[0,2,4,5,8,9,10,13,14,16],"from_dict":[0,2,4,6,7,12,13,15,16],"from_parquet":[0,12],"from_pickl":[0,12],"from_str":[0,2,12,13],"frontend":[0,2,7],"fs_tree":3,"full":[0,2,6,11],"func":0,"function":[0,4,5,6,7,8,9,10,13,16],"functional_compon":13,"further":[4,6],"futur":13,"fuzzi":[13,14],"g":[0,2,6,8,10],"g2":6,"g_2":6,"gather":0,"gener":[0,2,4,6,7,15],"generate_random_tre":3,"generate_subtre":0,"get":[0,2,3,4,6,7,13,14,16],"get_path":[0,2,3,12,13,14],"getattr":3,"github":[3,5,11,13],"give":4,"given":[0,10,15,16],"globaltech":7,"go":[0,4,6,7,10],"gone":6,"good":[4,6,8],"gradual":8,"graft":[0,2,14],"graft_point":[0,2],"graph":[0,2,14],"graph_attr":[0,2],"graphviz":[0,2,3],"greater":[0,2],"group":[0,2,14],"groupbi":0,"grouper":[0,2],"guarante":8,"guid":[3,9,11,13],"gz":0,"gzip":0,"h":6,"h2":6,"ha":[0,2,4,5,6,8,10,11,13,14,15,16],"had":[0,4,10],"hand":7,"handl":[0,9,10],"happen":[4,6],"has_children":[0,2,14],"has_circular_ref":3,"hash":[0,2,9,10],"hash_fn":0,"have":[0,3,4,5,6,8,10,11,14,16],"head":[0,2,7],"height":[0,3,6,11,12,13,16],"held":0,"help":[8,10],"here":[7,8,10,15],"hide":5,"hierarch":[0,5,8,16],"high":[0,2,3,7,8],"high_valu":7,"highlight":[6,8],"hold":8,"home":[3,7],"hook":13,"hop":0,"horizont":[0,2],"host":[0,2,14],"how":[0,4,7,8,10,13,16],"howerv":4,"howev":[0,6,8,10,15],"hr":7,"html":[0,2,3],"http":5,"human":[0,4],"i":[0,2,3,4,5,6,7,8,10,11,13,15,16],"i2":6,"id":8,"idea":4,"ident":9,"identifi":[0,2,5,7,10,16],"ignor":0,"illustr":6,"immedi":0,"immut":[0,6,10],"implement":[0,2,4,5,6,8,10,13,16],"impli":8,"import":[0,2,3,4,5,6,7,8,10,13,14,15,16],"important_nod":3,"improv":11,"in_plac":[0,2,14],"inaccess":[0,10],"includ":[0,2,6,8,10],"include_children":[0,2],"include_data":[0,2],"include_par":[0,2],"include_path":[0,2],"include_payload":[0,2,14],"include_point":[0,2],"include_root":[0,2],"include_styl":[0,2],"incomplet":4,"incur":6,"indent":[0,2,3,4,5,6],"independ":8,"index":[0,2,3,9,13,14],"indic":[5,13],"indirect":5,"indiscern":8,"indistinguish":8,"individu":[5,16],"inf":0,"infinit":8,"info":[0,2],"inform":[0,4,5,6],"infrastructur":7,"inherit":[0,2],"ini":[3,7],"initi":[0,2,14],"input":[8,9],"insert":[0,2],"inspir":[0,2,9,14],"instal":[9,10],"instanc":[0,4,6,8,10,15],"instead":[0,2,4,6,7,14],"int":[0,2],"integ":0,"integr":[0,6,9,10],"interact":[0,2],"interest":8,"interfac":[0,4,5,6,16],"interior":0,"interior_node_nam":[0,12],"intermediari":5,"intern":[0,7,8,11],"intrins":[0,9],"introduc":13,"introduct":9,"intuit":[0,2,5,7,16],"invalid":[0,2,6,10,14],"invalid_tre":5,"invalidate_cach":3,"invok":0,"ipython":6,"is_deep_wildcard":[0,2,12],"is_empty_dir":3,"is_intern":[0,6,12],"is_isomorph":[0,12],"is_large_branch":13,"is_leaf":[0,2,3,6,7,11,12,13],"is_root":[0,2,3,6,7,12],"is_unbalanc":[3,13],"is_valid":[0,12],"is_wildcard":[0,2,12],"isdir":3,"isinst":[0,2],"isomorph":[0,8,12],"item":[3,6,7],"item_path":3,"iter":[0,2,6],"iter_nod":[0,12],"itrat":6,"its":[0,2,4,5,6,8,10,13,16],"itself":[0,4,5,8],"j":6,"join":[0,2,3,14],"jpg":7,"jq":11,"json":[0,2,3,4,5,7,13,14,15],"json_data":14,"json_kwarg":0,"json_str":[0,3],"jsonpath":[0,2,13],"jt":[9,13],"jump":7,"junior":3,"jupyt":[],"just":[0,2,4,6,10],"k":6,"k_2":6,"kb":7,"keep":[0,2,6,7,13,14],"keep_structur":[0,2,14],"kei":[0,2,3,4,5,6,10,14,15,16],"key_mapp":[0,2],"keyerror":[0,4,5,6,10],"keyword":0,"kind":[0,4,6,8,15],"know":4,"known":4,"kwarg":[0,2,3,15],"l":6,"l_2":6,"label":[0,2,8],"lambda":[0,2,3,4,6,7,11,13,14,16],"lambda_express":[],"langchain":[],"languag":0,"larg":[0,2,7,13,14],"large_dept":7,"large_nod":3,"large_tre":0,"larger":[0,8,10],"largest":3,"last":13,"last_child_connector":[0,2],"law":8,"lazi":5,"lazili":3,"lazynod":3,"lca":[0,12],"lead":[7,8],"leaf":[0,2,3,5,6],"leaf1":[3,13],"leaf2":3,"leaf3":3,"leaf_count":3,"learn":10,"leav":[0,2,6,7,10,11,12,13,16],"leaves_und":6,"legaci":0,"legacy_data":0,"leibniz":8,"len":[0,2,3,6,7,13,14,16],"length":[0,2,3,6,13],"let":[4,6,16],"level":[0,2,3,5,6,7,8,12,14,16],"levelord":[0,2],"leverag":7,"librari":[0,6,16],"licens":[],"lifecycl":13,"lightblu":3,"lightgreen":3,"lightweight":0,"lightyellow":3,"like":[0,2,4,5,6,8,10,13,14,16],"line":[7,9],"list":[0,2,3,7,10,11,13,14,15,16],"listdir":3,"liter":14,"load":[0,5,6,7,12],"load_directori":3,"loader":3,"localhost":[0,2],"locat":0,"log":[4,6],"logic":[0,2,6,7,13,14],"logical_root_nam":[0,6,12],"long":[5,6,10],"longer":6,"look":[6,8,10],"loop":7,"low":0,"lower":[0,2],"lowercas":[0,2],"lowest":0,"lr":[0,2,3],"m":6,"m_2":6,"made":[0,2],"mai":[0,4,5,6,8,10],"main":[0,2,6,7,14,16],"maintain":[5,6,16],"make":[0,2,6,16],"manag":[0,3,7],"mani":[0,4,5],"manipul":[0,3,6,9,10,11,13,15],"manual":7,"map":[0,2,3,4,6,7,8,12,13,14,15],"mapper":[0,2],"mark":[0,2,3,6,12],"markdown":6,"marker":[0,2,3],"match":[0,3,9,11,12],"match_typ":[0,2],"matcher":13,"matching_nod":[0,2],"matchtyp":[0,2,12,13],"materi":8,"matter":8,"max":[0,2,3,4,6,13,16],"max_children":[0,2,12,13],"max_depth":[0,2],"max_hop":0,"max_lvl":0,"max_tri":0,"maximum":[0,2,13],"mcp":[],"md":[6,7],"mean":[0,10,16],"meaning":[0,7,10],"meant":7,"medium":7,"memori":[0,7,8],"merg":[0,2,5,14],"merge_strategi":[0,2],"merge_tre":3,"merged_child":3,"merged_payload":[0,2],"mermaid":[0,2,3],"messag":11,"met":[0,10],"metadata":14,"method":[0,2,3,5,6,9,10,13,16],"method_nam":3,"might":[4,8],"migrat":9,"min":[3,13],"min_children":[0,2,12,13],"minim":13,"miss":[0,2,4,12],"mit":[],"mix":[8,13],"mmd":3,"mobil":7,"model":[0,2,3,6,10,13],"modern":[0,9,11],"modernize_compon":13,"modifi":[0,2,6,10,14,16],"modul":[2,9,12,14],"monotext":6,"more":[0,2,4,5,6,7,10,11,13],"more_data":6,"most":[0,8,10,11,14],"move":[0,2,7],"multi":14,"multipl":[0,2,3,4,5,9],"must":[0,6,8,13,16],"mutabl":6,"mutablemap":0,"mutat":0,"my":14,"my_nod":14,"my_tre":0,"n":[0,2,3,6,7,11,13,14,16],"name":[0,2,3,4,5,6,7,8,10,12,13,14,15,16],"name_hash":16,"name_prefix":3,"nativ":0,"natur":[0,5],"navig":[0,2,9,10,13,14,16],"nbottleneck":7,"necessarili":[0,8,10],"need":[4,5,15],"neglig":10,"nest":[0,2,5,6,7,13,14],"network":[4,5],"new":[0,2,3,5,6,10,11,16],"new_accumul":[0,2],"new_comp":13,"new_data":6,"new_forest":6,"new_modul":[0,2],"new_module_tre":14,"new_nod":[6,13],"new_root":6,"new_tre":[5,6,14],"newli":[0,2],"newnam":[0,2],"newrootnod":[],"next":9,"no_ext":[0,2],"node":[4,6,9,12,13,14,15],"node0":5,"node1":[0,2,3,5,8,10,14,16],"node2":[0,2,3,5,8,10,14,16],"node3":[5,10,14],"node36":5,"node4":[5,10],"node5":5,"node_attr":[0,2,3],"node_color":3,"node_data":[0,2],"node_detail":[0,2,3,6,16],"node_hash":[12,16],"node_info":6,"node_kei":[0,5],"node_key1":[],"node_key2":[],"node_map":3,"node_nam":[0,2,4,6,11,12,16],"node_shap":[0,2],"node_stat":[0,6,12],"node_text":[0,2],"node_to_leaf_path":[0,6,12],"nodehash":[0,8,12,16],"nodekei":[],"nodenam":13,"nodetyp":[0,4,10,16],"non":[4,5,6,13],"non_existent_par":[5,6],"non_existent_parent_tre":6,"non_matching_nod":[0,2],"none":[0,2,3,4,6,10,14,15,16],"nor":[0,10],"normal":[0,2,4,6,7,14],"normalize_payload":[0,2],"north":7,"notat":[0,2,9],"note":[0,3,4,6,7,8],"notebook":9,"noth":6,"notic":6,"notion":0,"now":[0,4,6,8,10],"null":6,"num_children":3,"number":[0,2,3,4],"o":[0,3,6],"object":[0,2,6,7,8,10,15],"occupi":[0,8],"occur":0,"offer":[5,16],"offic":3,"often":[6,8],"old":0,"old_":13,"old_compon":13,"old_modul":[0,2],"old_nod":13,"oldnam":[0,2],"onc":[0,10],"one":[0,4,6,10,11,13],"onli":[0,2,4,6,7,8,10,13],"onto":[0,2],"op":[4,16],"open":[0,9],"open_ctx":4,"oper":[0,2,4,5,6,9,10,13,16],"optim":[4,7,13],"option":[0,2,4,5,6,10,15,16],"order":[0,2,6,7,9,13],"org":[3,11],"organ":7,"orient":7,"origin":[0,5,6,10,14,16],"other":[0,2,4,6,8,10,13,15],"other2":15,"other2_valu":15,"other_new_data":6,"other_valu":15,"otherwis":[0,2,15],"our":[0,4,6,8],"out":7,"output":[0,2,5,9,10,15,16],"over":[0,2,4,6,8,10,14],"overhead":6,"overlai":[0,2,14],"overrid":[0,2,14],"overridden":5,"overview":[],"own":10,"owner":7,"p":[0,2,6,8,14],"packag":[6,7,9,10,12],"page":9,"pair":[0,4,5,6,14,15],"panda":[0,2],"par_kei":6,"param":4,"paramet":[0,2,3,14],"parent":[0,2,3,4,6,7,8,10,12,13,15,16],"parent_kei":[0,12],"parent_node_kei":5,"parenthes":7,"parquet":0,"pars":[0,7,9,11,12,16],"parse_tre":[0,2,3,7,12],"parser":[0,2,7],"part":[0,6,8],"partial":[0,2,10,12,13],"particular":[0,5,6,8],"particularli":[5,8],"partit":[0,2,14],"pass":[0,3,4,6],"path":[0,2,6,8,11,12,14],"path_data":[0,2,14],"path_separ":[0,2],"paths_to_tre":[0,6,12],"pattern":[0,5,7,9,11,12],"pattern_dict":[0,2],"pattern_match":[2,3,12,13],"pattern_str":[0,2],"patternmatch":[0,12,13],"payload":[0,2,3,4,5,6,7,8,10,11,12,13,14,15,16],"payload_connector":[0,2],"pd":[0,2,14],"pdf":[3,7],"pend":[7,13],"per":[0,2],"perform":[0,4,9,10,11,16],"permit":[4,6],"persist":[0,8],"perspect":[0,5,9,10,16],"philosoph":9,"philosophi":[0,8],"pickl":0,"pictur":7,"piec":8,"pillar":[0,2,14],"pip":[10,11,16],"pipe":[0,2],"pipelin":[0,2,14],"place":[0,2,6,9],"placehold":[0,2],"platform":7,"point":[0,2,8,10,14],"pointer":[0,10],"pop":6,"port":[0,2,13,14],"posit":[0,2,8],"possibl":[0,8,10,13],"post":[0,3,9,13],"postord":[0,2,4,7],"potenti":[0,5],"power":[4,5,6,11,13,16],"pprint":6,"practic":[3,8,9],"pre":[0,6,9],"preced":[0,2,14],"pred":0,"predic":[0,2,3,6,7,8,12,14],"prefer":[0,2,4,6],"preferred_root":[0,5,6,12],"preorder":[0,2,7],"prepend":[0,2],"present":[0,4,5],"preserv":[0,2,14],"pretti":[0,2,6,10],"pretty_print":5,"pretty_tre":[2,3,4,5,6,12,16],"prettytre":[0,2,3,4,5,6,12],"previou":[0,2,4],"primari":7,"principl":13,"print":[0,2,4,5,6,7,10,13,15,16],"print_nod":[6,16],"print_tre":10,"printer":3,"prioriti":[0,2,3],"probabl":8,"problem":[4,8],"proc":0,"procedur":0,"process":[0,2,4,14],"process_fil":0,"prod":14,"produc":[8,10],"product":[7,14],"program":4,"project":[0,2,3,7,13,14],"project_tre":13,"proper":[0,2],"properti":[0,2,3,5,7,9,10,11,12,13,16],"provid":[0,2,3,4,5,6,7,10,13,14,15,16],"proxi":[0,6,10,12],"prune":[0,2,5,6,7,12],"pruned_tre":6,"purg":[0,6,12],"purpos":[0,4,6],"py":[0,7,13],"py_fil":7,"python":[0,6,7,8,10,11,13,16],"q":6,"qa":3,"qa_mgr":3,"queeliu":5,"queri":[0,9,13],"question":[8,13],"quick":10,"r":[3,6,7],"rais":[0,2,5,6,8,10,14],"raise_on_invalid":[0,2,14],"randint":3,"random":[0,3,10],"rang":[3,6,8,10],"rare":8,"rather":[8,16],"re":[3,6,7,16],"reach":[0,10],"react":[7,13],"read":[7,11],"read_api":7,"read_db":7,"read_parquet":0,"readabl":[0,2,4,7],"readi":7,"readm":7,"real":[0,9],"realiz":8,"reason":8,"receiv":[0,2],"recip":[3,7],"recommend":0,"reconstruct":0,"recurs":[0,2,3,4,6,9,10,15],"redis_cach":14,"reduc":[0,2,14],"reduct":[0,2],"ref":3,"ref_nam":3,"ref_nod":3,"refer":[0,6,8,10],"reflect":[5,16],"regener":6,"regex":[13,14],"region":7,"regist":0,"register_json_encod":[0,12],"regular":7,"reinvent":0,"rel":4,"relat":[0,2,4,5,8,16],"relationship":[0,5,8],"relax":8,"relev":0,"remain":[0,3,10],"rememb":16,"remind":8,"remov":[0,2,3,5,11,14],"remove_child":[0,2,12],"renam":[0,2,3,11,14],"render":13,"replac":[0,2,3,4,8,9,12],"replace_match":[0,2,12,13],"replic":0,"report":[3,7],"repositori":5,"repres":[0,2,5,6,10,16],"represent":[0,2,4,5,6,7,10,15,16],"requir":[0,2,6,14,16],"require_prop":0,"required_kei":[0,2],"reshap":[0,14],"resolut":[0,2,3,14],"resolv":[0,2,14],"respect":[0,4,8],"restrict":15,"result":[0,2,4,6,7,8,14,16],"result2":6,"retriev":[0,15],"return":[0,2,3,4,6,10,13,14,15,16],"return_path":[0,2,3],"revenu":7,"revers":[0,2],"revert":6,"review":[0,2,14],"rewrit":[0,4],"rewritten":[4,11],"rhombu":[0,2],"rich":7,"rid":4,"right":[6,7,8],"rl":[0,2],"role":8,"root":[0,2,3,4,6,7,8,10,11,12,13,14,15,16],"root1":8,"root2":[6,8],"root_1":4,"root_1_1":4,"root_1_1_1":4,"root_1_1_2":4,"root_2":4,"root_2_1":4,"root_2_1_1":4,"root_2_1_2":4,"root_2_2":4,"root_2_3":4,"root_dist":6,"root_kei":[0,12],"root_map":6,"root_nam":[0,5,6,12],"root_tag":[0,2],"root_valu":15,"rooter":6,"round":[0,2],"rout":5,"row":[0,2,14],"rule":4,"run":[4,7],"sae":6,"sai":4,"sale":[0,2,7],"same":[0,2,3,4,6,8,10],"same_structur":3,"sampl":[3,7],"satisfi":0,"save":[0,2,3,11,12],"save_tre":[0,2,3,12],"scenario":13,"schema":[0,2,14],"scienc":[5,8],"seamless":0,"seamlessli":[0,5,13],"search":[0,2,9,10,13],"second":[0,2],"secur":13,"see":[0,2,4,6,7,9],"seek":4,"seem":6,"select":[0,2],"self":[0,2,3,6,15],"send":4,"senior":3,"sens":8,"separ":[0,2,14],"seper":6,"seri":[0,2],"serial":[4,12],"set":[0,2,3,4,5,6,8,10,14],"setattr":3,"setup":7,"sexpr":[0,2,7,11],"shape":[0,2,3,13,14],"share":8,"shift":4,"ship":9,"should":[0,4,7,10,11,16],"should_prun":6,"shouldn":0,"show":[0,11],"sibl":[0,2,3,6,7,11,12,13],"side":0,"signatur":0,"similar":[0,2,4,8],"simpl":[0,2,3,4,6,7,9,10],"simpler":4,"simplest":13,"simplic":[4,6],"simplif":4,"simplifi":4,"sinc":[0,5,6,10],"sine":0,"singl":[0,2,3,4,6,13,14],"situat":8,"size":[0,2,3,6,7,8,11,12,13,14],"size_kb":7,"slice":[13,14],"small":[0,2,7,8,14],"so":[0,4,6,10],"sole":0,"solid":16,"some":[0,5,6,10,11],"soon":0,"sort":[0,2,7,12],"sort_kei":[0,6],"sourc":[0,2,4,6],"space":[0,2,8],"spacer":[0,2],"spark":0,"spec":[0,12],"spec_":3,"special":[0,4,5,6],"specif":[0,2,8,10,13,14],"specifi":[0,2,3,6,10,15],"speed":0,"split":[0,2,14],"split_point":[0,2],"sql":[0,2,14],"squar":[0,2],"src":[0,2,7],"src_node":0,"stadium":[0,2],"stage":[0,2,14],"standalon":4,"standard":0,"start":0,"startswith":[0,2,13],"stat":[0,2,11,14],"state":[4,6,8,13],"static":[0,2,14],"staticmethod":0,"statist":[0,2,14],"statu":[7,13],"status_summari":7,"stdin":11,"step":[3,9,11,13],"stiill":6,"still":[0,4,6,8,10,11],"stop":0,"storag":[6,7],"store":[0,2,8,9,15],"str":[0,2,10,15,16],"strategi":[0,2,14],"stream":0,"stream_writ":[0,12],"strength":10,"strict":9,"strictest":8,"strictli":8,"string":[0,2,3,6,14],"strong":8,"structur":[0,2,3,5,6,7,8,9,10,11,14],"style":[0,2,3,11],"sub":[0,4,10],"submodul":12,"subpackag":[],"substructur":0,"subtre":[0,2,3,6,9,10,11,12,13,14],"subtree1":11,"subtree2":11,"subtree_a":16,"subtree_b":16,"subtree_centered_at":[0,6,12],"subtree_info":6,"subtree_rooted_at":[0,6,12],"subtree_s":3,"suffix":[0,14],"suit":[10,16],"suitabl":[0,2],"sum":[0,2,3,4,7,13,14,16],"super":3,"support":[0,2,6,9,10,11,13,14],"suppos":[0,4,10],"syntax":9,"system":[4,5,8],"t":[0,2,6,7,10,14],"tabl":[0,2],"tabular":[0,2,14],"tag":[0,2],"take":[0,2,4,14],"target":[0,2,6,13],"target_format":[],"target_typ":[0,4,5],"task":[3,4,5,7],"tb":[0,2],"tc":5,"td":[0,2],"team":7,"team_siz":[0,2],"techcorp":7,"technic":0,"techniqu":8,"technologi":3,"temp":14,"temporari":0,"tension":8,"term":[0,4],"terminologi":5,"test":[0,2,3,6,7,11],"test_":[0,2,3,13,14],"test_fil":[3,7,13],"test_main":7,"test_modul":[0,2],"test_tre":3,"test_util":7,"text":[0,2,6,7],"than":[0,2,4,7,8,10,11,16],"thei":[0,4,5,7,8],"them":[4,5,6,10,13],"theoret":9,"theseu":9,"thi":[0,2,3,4,5,6,7,8,10,13,16],"thing":4,"think":4,"thought":8,"three":4,"threshold":13,"through":[0,2,6,8,13],"ti":8,"time":8,"timestamp":[0,2],"tip":9,"titl":3,"to_adjacency_list":[0,2,12,14],"to_ascii":[0,2,12],"to_dict":[0,2,4,6,7,12,14,16],"to_edge_list":[0,2,12,14],"to_graphviz":[0,2,12],"to_graphviz_data":[0,2,12,14],"to_html":[0,2,12],"to_json":[0,2,12],"to_json_schema":[0,2,12,14],"to_list":[0,2,3,7,12,14],"to_mermaid":[0,2,12],"to_nested_list":[0,2,12,14],"to_parquet":[0,12],"to_path":[0,2,12,14],"to_pickl":[0,12],"to_root":[0,2,7,12],"to_tabl":[0,2,12,14],"to_unicod":[0,2,12],"to_xml":[0,2,12],"to_yaml":[0,2,12],"too":[0,6],"tool":[10,13,16],"top":[0,2,4,5],"top_nod":[0,2],"total":[0,2,3,7,14,15],"total_lin":7,"total_nod":3,"total_s":[0,2,3,14],"tradit":[7,16],"transform":[0,4,7,9,13],"translat":4,"transmit":9,"travers":[0,2,3,6,7,9,10],"traverse_levelord":[0,2,12],"traverse_ord":[0,2],"traverse_pattern":[0,2],"traverse_postord":[0,2,12],"traverse_preord":[0,2,3,7,12,14],"treat":[0,5],"tree":[0,9,10,12],"tree1":[0,2,3,6,7,11,14],"tree2":[0,2,3,6,7,11,14],"tree3":7,"tree_convert":[4,5,6,12,16],"tree_data":[0,5],"tree_dict":16,"tree_hash":[12,16],"tree_height":3,"tree_node_root":16,"tree_shap":12,"tree_transform":12,"treebuild":[0,3,9,12,13],"treeconvert":[0,4,5,6,12,16],"treedsl":[0,2,12],"treeexport":[0,2,12],"treehash":[0,8,12],"treenod":[4,6,7,9,10,12],"treenode_2":6,"treenode_api":12,"treenode_dict":6,"treenode_from_dict":6,"treenodeapi":[0,12],"treenodem":6,"treevisitor":3,"treeviz":6,"tri":[0,2],"trick":9,"true":[0,2,3,4,6,7,8,10,14],"truth":[0,2,13],"try":[0,4,5,6],"tupl":[0,2],"turn":8,"tutori":[3,5,7,9,11,13],"two":[0,2,3,4,6,8,10,14,16],"txt":[3,6,7,14],"type":[0,2,3,4,5,6,7,8,11,14,16],"type_kei":[0,2],"typeerror":[0,6],"typic":[4,8],"u":[6,8],"unbalanc":[3,13],"unchang":14,"undefin":[0,9,10],"under":[0,2,5,6],"underlai":[0,2,14],"underli":[0,5,6,10],"underscor":[0,2],"understand":[0,9],"undirect":0,"unicod":[0,2,3,7],"unifi":6,"uniqu":[0,2,5,6,8,10],"univers":0,"unknown":[0,2,3,7],"unless":6,"unlik":15,"until":0,"up":[0,2,3,4,7,10,11,12,13],"updat":[0,2,3,14],"upgrad":0,"upgrade_legacy_format":[0,12],"upper":[0,2,14],"us":[0,2,3,4,5,6,7,8,10,11,13,14,15,16],"usag":[3,5,9],"useeffect":13,"user":[0,2,3,13],"user_nod":3,"usest":13,"usr":13,"util":[6,7,10,11,12,16],"uuid":[0,10,15],"v":[0,2,3,6,9],"v0":9,"v1":[2,3,11,13],"vacat":7,"val1":[0,2,3],"val2":[0,2,3],"valid":[0,2,6,7,13,14],"valu":[0,2,3,4,5,6,7,8,11,13,14,15,16],"valueerror":[0,5,6],"var":[4,16],"variabl":[0,2,8,9],"variou":[0,2,3,5,7,8,10,14,16],"veri":[0,6,7,8],"versa":6,"versatil":5,"version":[0,2,11,13,14],"versu":8,"vertic":[0,2],"vice":6,"view":[0,6,10,13,16],"visit":[0,3,12],"visit_":3,"visit_default":3,"visit_directori":3,"visit_fil":3,"visual":[0,6,9,10,14],"viz_data":14,"vue":7,"w":6,"wa":6,"wai":[0,2,5,6,8,10,13],"want":[0,6,8,10],"we":[0,4,5,6,8,10,15,16],"weak":10,"weaker":8,"welcom":10,"well":[0,4,10],"what":[4,8,15],"whatev":6,"wheel":0,"when":[0,4,6,8,10,13],"where":[0,2,3,4,5,6,7,8,10,12,15],"whether":[0,2,8,16],"which":[0,4,5,6,8,10,13,15,16],"while":[0,5,8,14],"whole":[8,16],"whose":0,"wide":[6,8,10],"wildcard":[0,2,3,12,14],"within":[0,8,10,13],"without":[0,2,6],"word":[0,2,8,15],"work":[0,4,5,6,7,8,9,10,11],"world":9,"would":[0,4,6,8,10],"wrapper":[0,2,7],"write":[0,7],"write_db":7,"write_nod":0,"write_subtre":0,"writer":0,"x":[0,4,6,8,10,16],"xml":[0,2],"y":[4,6,8,16],"yaml":[0,2],"ye":6,"yet":13,"yield":[0,8],"you":[0,4,5,6,7,10,16],"your":[0,4,7,16],"z":4,"zero":[4,13],"zip":3},"titles":["AlgoTree package","AlgoTree.integrations package","API Reference","AlgoTree Cookbook","Expression Trees and Evaluation","FlatForest","FlatForest Notebook","AlgoTree Fluent API Guide","Understanding Equality in Trees and Nodes","Welcome to AlgoTree\u2019s documentation!","Introduction","jt Command-Line Tool","AlgoTree","Pattern Matching","Tree Transformations","TreeNode","AlgoTree: Comprehensive Tutorial"],"titleterms":{"":[7,9,11],"1":[7,16],"10":16,"11":16,"12":16,"2":[7,16],"3":[7,16],"4":16,"5":16,"6":16,"7":16,"8":[11,16],"9":16,"A":16,"In":14,"The":8,"To":4,"ad":5,"addit":14,"advanc":[3,11,13,16],"algorithm":6,"algotre":[0,1,3,7,9,12,16],"also":[3,11,13],"altern":4,"an":[3,7],"analysi":[3,11],"analyz":[7,13],"ancestor":11,"ani":[2,11],"api":[2,7,9,10,13,15,16],"argument":[],"attribut":15,"auto":7,"avail":7,"background":5,"base":[7,11],"basic":[11,13],"best":7,"build":[3,7,11],"centric":[10,16],"chain":14,"chainabl":7,"chart":[3,7],"child":5,"children":11,"class":[2,5,7],"close":[2,14],"collis":8,"command":[11,13],"compar":3,"comparison":[3,11],"compat":7,"complet":7,"complex":11,"compon":13,"comprehens":16,"concept":16,"conclus":[4,5,6,8,16],"consider":[7,13],"construct":[3,4,7],"content":[0,1,6,7,16],"convers":[5,11,14,16],"convert":[4,5],"cookbook":3,"copi":14,"core":[2,16],"creat":[3,6],"custom":[11,13],"cycl":5,"data":[5,7,14],"databas":1,"default":11,"definit":8,"descend":11,"detach":5,"detect":[5,7],"dict":7,"dictionari":13,"differ":3,"document":9,"dot":[13,14],"dotannot":14,"dotmap":14,"dotmerg":14,"dotmod":14,"dotpip":14,"dotprun":14,"dotsuit":13,"dotvalid":14,"dsl":[0,2,3,7,11],"effici":3,"equal":8,"error":5,"escap":14,"evalu":[4,16],"exampl":[6,7,11,13,15],"explan":8,"export":[0,2,3],"express":[4,7,11,13,16],"extract":14,"extrins":8,"famili":14,"featur":[7,10,13,16],"file":[3,7,13],"filter":[3,11,13],"find":[3,13],"flat_forest":0,"flat_forest_nod":0,"flatforest":[4,5,6,16],"flatforestnod":5,"flattre":5,"flexibl":16,"fluent":[0,7,13],"fluentnod":[2,7],"format":[3,5,7,11],"from":[3,6,7,11],"function":[2,14],"gener":3,"get":[9,10,11],"guid":7,"handl":[4,5],"hash":[8,16],"ident":8,"indent":[7,11],"indic":9,"initi":[5,15],"input":11,"inspir":13,"instal":[11,16],"integr":[1,13],"intrins":8,"introduct":[6,10,16],"invalid":5,"json":[6,11],"jt":11,"jupyt":1,"kei":7,"langchain":1,"lazi":3,"leaf":11,"level":11,"licens":[],"like":7,"line":[11,13],"load":3,"manipul":[5,16],"map":11,"match":[2,13,14],"mcp":1,"merg":3,"method":[7,15],"metric":3,"migrat":[7,11],"modern":7,"modul":[0,1],"multipl":[7,11],"name":11,"navig":[3,7,11],"new":7,"next":7,"node":[0,2,3,5,7,8,10,11,16],"node_hash":0,"notat":[13,14],"notebook":6,"object":[5,13],"old":7,"open":[2,14],"oper":[3,7,11,14],"order":4,"org":7,"organ":3,"output":[6,11],"overview":[],"packag":[0,1],"parent":[5,11],"pars":2,"path":[3,13],"pattern":[2,3,13,14],"pattern_match":0,"patternmatch":2,"perform":[3,7,13],"perspect":8,"philosoph":8,"philosophi":13,"pipelin":[7,11],"place":14,"post":4,"practic":7,"pre":4,"predic":13,"pretti":[3,11],"pretty_tre":0,"print":[3,11],"process":[7,11],"properti":[8,15],"proxi":5,"prune":[3,11],"purg":5,"queri":11,"real":13,"recurs":16,"refactor":13,"refer":[2,5,9,14],"replac":13,"root":5,"see":[3,11,13],"self":4,"serial":0,"ship":8,"simpl":16,"sourc":11,"special":14,"specif":11,"start":[9,10],"statist":[3,11],"step":7,"store":6,"strict":8,"string":13,"structur":[4,13,15,16],"sub":5,"submodul":[0,1],"subpackag":[],"subtre":16,"support":7,"syntax":13,"system":[3,7],"tabl":[6,7,9,16],"test":13,"text":5,"theoret":5,"theseu":8,"tip":11,"tool":[9,11],"tradit":9,"transform":[2,3,11,14],"transmit":6,"travers":[4,16],"tree":[2,3,4,5,6,7,8,11,13,14,15,16],"tree_convert":0,"tree_hash":0,"tree_shap":0,"tree_transform":0,"treebuild":[2,7],"treenod":[0,5,15,16],"treenode_api":0,"trick":11,"tutori":16,"type":13,"undefin":4,"understand":8,"usag":[11,13,15],"util":0,"v":[4,14],"v0":11,"valid":5,"variabl":4,"view":5,"visitor":3,"visual":[2,3,4,5,7,11,16],"wai":[4,7],"welcom":9,"wildcard":13,"work":16,"world":13,"yaml":7}})